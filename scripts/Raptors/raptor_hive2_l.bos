
#include "../recoil_common_includes.h"

piece  base, armbase, arm1, arm2, arm3, arm4, arm5, flare1, flare2, flare3, flare4, flare5, topflare;

static-var  restore_delay, shootflare;
// Signal definitions
#define SIGNAL_AIM1 256 
#define SIGNAL_AIM2 512
#define SIGNAL_AIM3	1024		    4 
//------------------------------- Worm Options --------------------------------------------------
#define HIVESIZE 100 // This is for scaling move animations, as percent 

#define WIGGLEAMPLITUDE  50 / 200
#define WIGGLEFREQUENCY 500
#define WIGGLESPEED <10>
#define WIGGLEPHASE 6500  //13017

KillArm(which){
	if (which == 1){
		emit-sfx 1025 from arm1;
		explode arm1 type FALL | NOHEATCLOUD;
		hide arm1;	
	}
	if (which == 2){
		emit-sfx 1025 from arm2;
		explode arm2 type FALL | NOHEATCLOUD;
		hide arm2;	
	}
	if (which == 3){
		emit-sfx 1025 from arm3;
		explode arm3 type FALL | NOHEATCLOUD;
		hide arm3;	
	}
	if (which == 4){
		emit-sfx 1025 from arm4;
		explode arm4 type FALL | NOHEATCLOUD;
		hide arm4;	
	}
	if (which == 5){
		emit-sfx 1025 from arm5;
		explode arm5 type FALL | NOHEATCLOUD;
		hide arm5;	
	}
}

HealArm(which){
	if (which == 1){
		move arm1 to y-axis [-0.6] * HIVESIZE now;
		show arm1;
		move arm1 to y-axis [0] speed [0.1] * HIVESIZE;
	}
	if (which == 2){
		move arm2 to y-axis [-0.6] * HIVESIZE now;
		show arm2;
		move arm2 to y-axis [0] speed [0.1] * HIVESIZE;
	}
	if (which == 3){
		move arm3 to y-axis [-0.6] * HIVESIZE now;
		show arm3;
		move arm3 to y-axis [0] speed [0.1] * HIVESIZE;
	}
	if (which == 4){
		move arm4 to y-axis [-0.6] * HIVESIZE now;
		show arm4;
		move arm4 to y-axis [0] speed [0.1] * HIVESIZE;
	}
	if (which == 5){
		move arm5 to y-axis [-0.6] * HIVESIZE now;
		show arm5;
		move arm5 to y-axis [0] speed [0.1] * HIVESIZE;
	}
}

Motion(){
	var wigglefreq; // NOTE: DO NOT DECLARE VAR WITHIN A WHILE LOOP AS IT WILL OVERFLOW THE COB STACK!
	wigglefreq = RAND(0, WIGGLEFREQUENCY); // init at random phase
	var health;
	var prevhealth;
	health = get HEALTH;
	prevhealth = health;
	var i;
	i = 0;
	while(1){

		 // lets have the worm do a Z wave instead
		 //	KSIN:	return int(1024*math::sinf(TAANG2RAD*(float)p1));
	 	turn arm1 to y-axis (get KSIN(wigglefreq + 1 * WIGGLEPHASE)) * WIGGLEAMPLITUDE now;
	 	turn arm2 to y-axis (get KSIN(wigglefreq + 2 * WIGGLEPHASE)) * WIGGLEAMPLITUDE now;
	 	turn arm3 to y-axis (get KSIN(wigglefreq + 3 * WIGGLEPHASE)) * WIGGLEAMPLITUDE now;
	 	turn arm4 to y-axis (get KSIN(wigglefreq + 4 * WIGGLEPHASE)) * WIGGLEAMPLITUDE now;
	 	turn arm5 to y-axis (get KSIN(wigglefreq + 5 * WIGGLEPHASE)) * WIGGLEAMPLITUDE now;
		
		health = get HEALTH;
		if (health != prevhealth){
			if (health > prevhealth){// healed
				i = 1;
				while (i < 6){
					if ((health >= i*16) AND (prevhealth <i*16)) call-script HealArm(i);
					i = i + 1;
				}
			}else{ // took damage
				i = 1;
				while (i < 6){
					if ((prevhealth >= i*16) AND (health <i*16)) call-script KillArm(i);
					i = i + 1;
				}
			}
		}
		prevhealth = health;
		
		wigglefreq = wigglefreq + WIGGLEFREQUENCY;
		if (wigglefreq > 65536) wigglefreq = wigglefreq - 65536;
		sleep 30;
	}
}


Create()
{
	shootflare = flare1;
	move base to y-axis [-1] * HIVESIZE now;
	hide base;
	hide arm1;
	hide arm2;
	hide arm3;
	hide arm4;
	hide arm5;
	sleep 30;
	show base;
	show arm1;
	show arm2;
	show arm3;
	show arm4;
	show arm5;
	
	move topflare to y-axis [3000.0] speed [10000.0];
	move topflare to x-axis [0.0] speed [10000.0];
	move topflare to z-axis [0.0] speed [10000.0];
	turn topflare to y-axis <90.0> speed <10000.0>;
	turn topflare to x-axis <90.0> speed <10000.0>;
	turn topflare to z-axis <90.0> speed <10000.0>;
	sleep 100;
	emit-sfx 2048 + 2 from topflare;
	move base to y-axis [0] speed [0.2] * HIVESIZE;
	sleep 100;
	
	move topflare to y-axis [0] speed [10000.0];
	turn topflare to y-axis <0> speed <10000.0>;
	turn topflare to x-axis <0> speed <10000.0>;
	turn topflare to z-axis <0> speed <10000.0>;
	
	restore_delay = 2000;
	SLEEP_UNTIL_UNITFINISHED;
 	start-script Motion();
}

SetMaxReloadTime(reloadtime)
{
	restore_delay = reloadtime * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}


AimWeapon1(heading, pitch) // ground weapon
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	
	var deg;
	deg = heading / 182;
	
	deg = -1* deg + 126;
	if (deg > 360) deg = deg -360;
	
	shootflare = flare1 + deg/72;
	
	//get PRINT(heading / 182, deg, shootflare)
	return (1);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = shootflare;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = base;
}


AimWeapon2(heading, pitch) // anti air weapon
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	
	//get PRINT(heading, pitch)
	turn topflare to y-axis heading now;
	turn topflare to x-axis <0> - pitch now; 
	return (1);
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = topflare;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = topflare;
}


AimWeapon3(heading, pitch) // meteor
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	return (0); // always return false?
}
QueryWeapon3(pieceIndex)
{
	pieceIndex = base;
}

AimFromWeapon3(pieceIndex)
{
	pieceIndex = base;
}


//Needs defines before usage:
//UNITSIZE 1-20, small for small units, large for large units, 
//MAXTILT ~100, how much unit should move
//BASEPIECE piecename, 
//HITSPEED <55>, for small units, <15> for large units


// angle[x|z] is always [-500;500], damage is multiplied by 100
// thus if our maxtilt is 100/100, then we get 500, which is about 2.7 degrees of max tilt, which should also kind of scale with unitsize, e.g. smaller units should tilt more, while larger less
// 

// hitspeed should be a part of unitsize, to simplify scaling
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (10 * HIVESIZE);
	var randpiece;
	randpiece = 0;
	if (amount < 3  ) return (0);
	//if (RAND(1, MAXTILT) < amount){
	if (1){
			randpiece = RAND(1, 5);
			if (randpiece == 1) emit-sfx 1024 from arm1;
			if (randpiece == 2) emit-sfx 1024 from arm2;
			if (randpiece == 3) emit-sfx 1024 from arm3;
			if (randpiece == 4) emit-sfx 1024 from arm4;
			if (randpiece == 5) emit-sfx 1024 from arm5;
	}
	if (amount > 100){
		amount = 100;
	}	
	if (anglex ==0 ) { //this happens when hit by lasers
		if (anglez == 0){
			amount = amount / 2;
			anglex = RAND(0,1000) - 500;
			anglez = RAND(0,1000) - 500;
		}
	} 
	
	// figure out which arm was the closest and retract that one
	if (anglex > 300){ // top arm
		move arm1 to y-axis [-0.01] * HIVESIZE speed [0.2] * HIVESIZE; // should be 3 frames
		wait-for-move arm1 along y-axis;
		move arm1 to y-axis [0] speed [0.05] * HIVESIZE; // should be 6 frames
	}else{
		if (anglex >0 ){ // second ring
			if (anglez> 0) {
				move arm2 to y-axis [-0.01] * HIVESIZE speed [0.2] * HIVESIZE; // should be 3 frames
				wait-for-move arm2 along y-axis;
				move arm2 to y-axis [0] speed [0.05] * HIVESIZE; // should be 6 frames
			}else{
				move arm3 to y-axis [-0.01] * HIVESIZE speed [0.2] * HIVESIZE; // should be 3 frames
				wait-for-move arm3 along y-axis;
				move arm3 to y-axis [0] speed [0.05] * HIVESIZE; // should be 6 frames
			} 
		}else{ // last ring
			if (anglez > 0){
				move arm4 to y-axis [-0.01] * HIVESIZE speed [0.2] * HIVESIZE; // should be 3 frames
				wait-for-move arm4 along y-axis;
				move arm4 to y-axis [0] speed [0.05] * HIVESIZE; // should be 6 frames
			}else{
				move arm5 to y-axis [-0.01] * HIVESIZE speed [0.2] * HIVESIZE; // should be 3 frames
				wait-for-move arm5 along y-axis;
				move arm5 to y-axis [0] speed [0.05] * HIVESIZE; // should be 6 frames
			}
		}
	}
}

static-var isSmoking;
DamagedSmoke() // ah yes, clever use of stack variables 
{
	var healthpercent;
	var randpiece;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		
		if( healthpercent < 65 )
		{
			randpiece = RAND(1, 5);
			if (randpiece == 1) emit-sfx 1024 from arm1;
			if (randpiece == 2) emit-sfx 1024 from arm2;
			if (randpiece == 3) emit-sfx 1024 from arm3;
			if (randpiece == 4) emit-sfx 1024 from arm4;
			if (randpiece == 5) emit-sfx 1024 from arm5;
		} 
		else {
			isSmoking = 0;
			return;
			//break; // bos2cob.py does not like this one!
		}
		if (healthpercent < 4) healthpercent = 4; 
		sleep healthpercent * 50;
	}
	sleep 97;
	isSmoking = 0;
}

HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	if( get BUILD_PERCENT_LEFT) return (100);
	if (isSmoking == 0)	{ 
		isSmoking = 1;
		start-script DamagedSmoke();
	}
	//get PRINT(anglex, anglez, weaponid, dmg);
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}





QueryLandingPad(pieceIndex)
{
	pieceIndex = armbase;
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = base;
}



Killed(severity, corpsetype)
{
	var randSeverity;
	randSeverity = RAND(0,severity);
	emit-sfx 1025 from flare1;
	emit-sfx 1025 from flare2;
	emit-sfx 1025 from flare3;
	emit-sfx 1025 from flare4;
	emit-sfx 1025 from flare5;
	corpsetype = 1;
	
	move base to y-axis [-1] * HIVESIZE speed [1] * HIVESIZE;
	sleep 1000;
	return (corpsetype);

	//get PRINT(severity, randSeverity);
	//Head pops off an it recedes
	/*
	if (randSeverity >= 0) {
		emit-sfx 1025 from head;
		explode head type FALL | NOHEATCLOUD;
		hide head;
	}
	
	if (randSeverity >= 10) {
		emit-sfx 1025 from seg5;
		explode seg5 type FALL | NOHEATCLOUD;
		hide seg5;
	}
	
	if (randSeverity >= 20) {
		emit-sfx 1025 from seg4;
		explode seg4 type FALL | NOHEATCLOUD;
		hide seg4;
	}
	if (randSeverity >= 30) {
		emit-sfx 1025 from seg3;
		explode seg3 type FALL | NOHEATCLOUD;
		hide seg3;
	}
	if (randSeverity >= 40) {
		emit-sfx 1025 from seg2;
		explode seg2 type FALL | NOHEATCLOUD;
		hide seg2;
	}
	if (randSeverity >= 50) {
		emit-sfx 1025 from seg1;
		explode seg1 type FALL | NOHEATCLOUD;
		hide seg1;
		corpsetype = 2;
	}else{
		call-script Stop();
		sleep 1500;
		corpsetype = 1;
	}
	return(corpsetype);
	*/
}