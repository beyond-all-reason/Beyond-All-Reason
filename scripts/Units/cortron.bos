#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, door1, door2, flare, greenlight, orangelight;

static-var  gun_1, restore_delay, statechg_DesiredState, statechg_StateChanging, missiles_stockpiled;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	if( TRUE )
	{
				turn door1 to z-axis <180> speed <60>;
				turn door2 to z-axis <-180> speed <60>;
				wait-for-turn door1 around z-axis;
		sleep 100;
	}
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
				turn door1 to z-axis <0> speed <60>;
				turn door2 to z-axis <0> speed <60>;
				wait-for-turn door1 around z-axis;
		sleep 100;
	}
	return (0);
}


Go()
{
	call-script activatescr();
	gun_1 = flare;
	return (0);
}

Stop()
{
	gun_1 = base;
	sleep 4000;
	call-script deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	hide flare;
	gun_1 = base;
	restore_delay = 3000;
	missiles_stockpiled = 0;
	hide greenlight;
	show orangelight;
	call-script InitState();
	return (0);
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !gun_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	gun_1 = base;
	start-script RequestState(1);
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

lights_orange()
{
	hide greenlight;
	show orangelight;
}

lights_green()
{
	show greenlight;
	hide orangelight;
}

SetStockpile(num_stockpiled)
{
	if (num_stockpiled == 0)
	{
		start-script lights_orange();
		sleep 100;
		missiles_stockpiled = 0;
	}
	if (num_stockpiled >= 1)
	{
		start-script lights_green();
		sleep 100;
		missiles_stockpiled = 1;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type SMOKE | FALL | NOHEATCLOUD;
		explode door2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
