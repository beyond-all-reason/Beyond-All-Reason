
#include "../recoil_common_includes.h"

#define SIGNAL_MOVE 1
#define SIGNAL_BUILD 2

piece  base, track, arm1, arm2, turret, beam, door, nano, cagelight, cagelight_emit ;

static-var  readyToBuild, isMoving;


#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100
#include "../unit_hitbyweaponid_and_smoke.h"



#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <0.1>
#define TB_BANK_Z <0.1> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"


Create()
{
	hide nano;
	hide cagelight_emit;
	readyToBuild = 0;
	turn arm1 to x-axis <-90> speed <180>;
	turn arm2 to x-axis <105> speed <180>;
	call-script TB_Init();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}

StartBuilding(heading, pitch)
{
	signal SIGNAL_BUILD;
	set-signal-mask SIGNAL_BUILD;

	if (!readyToBuild) {
		turn arm1 to x-axis <60> speed <180>;
		turn arm2 to x-axis <30> speed <180>;
		wait-for-turn arm1 around x-axis;

		turn door to x-axis <90> speed <180>;
		move beam to y-axis [5] speed [10];
		wait-for-move beam along y-axis;

		readyToBuild = TRUE;
	}

	turn turret to z-axis heading speed <360.0>;
	wait-for-turn turret around z-axis;
//	turn arm2 to x-axis <0> - pitch speed <360.0>;  //up/down movement not working correct
//	wait-for-turn arm2 around x-axis;
	set INBUILDSTANCE to 1;
	show cagelight_emit;
	spin cagelight around y-axis speed <150>;
}


StopBuilding()
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;

	hide nano;
	hide cagelight_emit;
	turn cagelight to y-axis <0> speed <1000>;
	sleep 6000;
	
	set INBUILDSTANCE to 0;
	readyToBuild = FALSE;


	move beam to y-axis [0] speed [10];
	turn turret to z-axis <0> speed <180>;
	turn door to x-axis <0> speed <180>;

	wait-for-turn door around x-axis;
	turn arm1 to x-axis <-90> speed <180>;
	turn arm2 to x-axis <105> speed <180>;
	turn door to x-axis <0> speed <180>;
}



QueryNanoPiece(pieceIndex)
{
	pieceIndex = beam;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode beam type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode track type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode beam type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode track type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode track type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode track type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
