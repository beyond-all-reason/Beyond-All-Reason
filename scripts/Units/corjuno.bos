
#include "../recoil_common_includes.h"

piece  base, flare;

static-var  gun_1, restore_delay;

// Signal definitions
#define SIGNAL_AIM1 256



Create()
{
	hide flare;
	gun_1 = flare;
	restore_delay = 300;
}


#define BASEPIECE base
#define MAXTILT 0
#include "../unit_hitbyweaponid_and_smoke.h"


SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	while( !gun_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
