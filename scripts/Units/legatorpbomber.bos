#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece chassis, launcher, launcher2, torpflare1, torpflare2, leftAJet, leftBJet, rightAJet, rightBJet, mainWing, leftWing, rightWing;

//#define SIGNAL_TURNON 4

#define BASEPIECE chassis
#define HITSPEED <35.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

// #define BARRELROLL_PIECE chassis
// #define BARRELROLLSPEEED <200>
// #include "../air_barrelroll.h"

static-var  statechg_DesiredState, statechg_StateChanging;

activatescr()
{
	if( TRUE )
	{
		turn rightWing to y-axis <0> speed <45>;
		turn leftWing to y-axis <0> speed <45>;

	}
	sleep 12;
}

deactivatescr()
{
	if( TRUE )
	{
		turn rightWing to y-axis <45> speed <45>;
		turn leftWing to y-axis <-45> speed <45>;
	}
	sleep 33;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{

	hide torpflare1;
	hide torpflare2;
	hide leftAJet;
	hide leftBJet;
	hide rightAJet;
	hide rightBjet;
	call-script InitState();
	turn rightWing to y-axis <45> now;
	turn leftWing to y-axis <-45> now;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 100;
	}
	call-script activatescr();
}

Activate()
{
	show leftAJet;
	show leftBJet;
	show rightAJet;
	show rightBjet;
	start-script RequestState(0);
}

Deactivate()
{
	hide leftAJet;
	hide leftBJet;
	hide rightAJet;
	hide rightBjet;
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = chassis;
}

FireWeapon1()
{
	turn launcher to x-axis <10> speed <10>;
	sleep 1000;
	turn launcher to x-axis <0> speed <10>;
	return (1);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = torpflare1;
}

FireWeapon2()
{
	turn launcher2 to x-axis <10> speed <10>;
	sleep 1000;
	turn launcher2 to x-axis <0> speed <10>;
	return (1);
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = torpflare2;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode mainWing	type BITMAPONLY | NOHEATCLOUD;
		explode rightWing	type BITMAPONLY | NOHEATCLOUD;
		explode leftWing 	type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode mainWing type FALL | NOHEATCLOUD;
		explode rightWing type FALL | NOHEATCLOUD;
		explode leftWing type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode mainWing type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode rightWing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode leftWing type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode mainWing type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rightWing type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode leftWing type BITMAPONLY | NOHEATCLOUD;
	return corpsetype;
}
