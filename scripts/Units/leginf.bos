#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece turretHeadingPivot,
turrretPitchPivot,
rightBarrel,
topBarrel,
base,
leftBarrel,
topFlare,
rightFlare,
leftFlare,
leftCannisterLight,
rightCannisterLight,
topBarrelLightA,
topBarrelLightB,
rightBarrelLight,
leftBarrelLight;



static-var  gun_1, restore_delay;

// Signal definitions
#define SIG_AIM				2



#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis <0> - anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
	return (0);
}

Create()
{
	turn turrretPitchPivot to x-axis <-18> now;
	gun_1 = 0;
	restore_delay = 3000;
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
		move topBarrel to y-axis [0] speed [10];
		move leftBarrel to y-axis [0] speed [10];
		move rightBarrel to y-axis [0] speed [10];
	turn turretHeadingPivot to y-axis <0.000000> speed <40.000000>;
	turn turrretPitchPivot to x-axis <-18.000000> speed <40.000000>;
	wait-for-turn turretHeadingPivot around y-axis;
	wait-for-turn turrretPitchPivot around x-axis;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turretHeadingPivot to y-axis heading speed <40.000000>;
	if(-1*pitch > <0>){
		move topBarrel to y-axis [1] speed [10];
		move leftBarrel to y-axis [1] speed [10];
		move rightBarrel to y-axis [1] speed [10];
		turn turrretPitchPivot to x-axis <0> speed <40.000000>;
	}
	else if(-1*pitch > <-18> and -1*pitch < <0>){
		move topBarrel to y-axis [1] speed [10];
		move leftBarrel to y-axis [1] speed [10];
		move rightBarrel to y-axis [1] speed [10];
		turn turrretPitchPivot to x-axis -1*pitch speed <40.000000>;
	}
	else {
		move topBarrel to y-axis [0] speed [10];
		move leftBarrel to y-axis [0] speed [10];
		move rightBarrel to y-axis [0] speed [10];
		turn turrretPitchPivot to x-axis -1*pitch speed <40.000000>;
	}
	wait-for-turn turretHeadingPivot around y-axis;
	wait-for-turn turrretPitchPivot around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	// // emit-sfx 1024 + 0 from flare;
	// if( gun_1 == 0 )
	// {
	// 	move topBarrel to z-axis [-3] speed [30];
	// 	emit-sfx 1024 + 0 from topFlare;
	// 	sleep 250;
	// 	move topBarrel to z-axis [0] speed [6];
	// }
	// else if( gun_1 == 1 )
	// {
	// 	move leftBarrel to z-axis [-3] speed [30];
	// 	emit-sfx 1024 + 0 from leftFlare;
	// 	sleep 250;
	// 	move leftBarrel to z-axis [0] speed [6];
	// }
	// else if( gun_1 == 2 )
	// {
	// 	move rightBarrel to z-axis [-3] speed [30];
	// 	emit-sfx 1024 + 0 from rightFlare;
	// 	sleep 250;
	// 	move rightBarrel to z-axis [0] speed [6];
	// }
	// ++gun_1;
	// if( gun_1 >= 3 ) gun_1 = 0;
}

Shot1(){
	// emit-sfx 1024 + 0 from flare;
	if( gun_1 == 0 )
	{
		move topBarrel to z-axis [-7] speed [60];
		emit-sfx 1024 + 0 from topFlare;
		// sleep 250;
		// move topBarrel to z-axis [0] speed [6];
	}
	else if( gun_1 == 1 )
	{
		move leftBarrel to z-axis [-7] speed [60];
		emit-sfx 1024 + 0 from leftFlare;
		// sleep 250;
		// move leftBarrel to z-axis [0] speed [6];
	}
	else if( gun_1 == 2 )
	{
		move rightBarrel to z-axis [-7] speed [60];
		emit-sfx 1024 + 0 from rightFlare;
		// sleep 250;
		// move rightBarrel to z-axis [0] speed [6];
	}


	++gun_1;
	if( gun_1 >= 3 ) gun_1 = 0;
	sleep 500;
	move topBarrel to z-axis [0] speed [2];
	move leftBarrel to z-axis [0] speed [2];
	move rightBarrel to z-axis [0] speed [2];
}

QueryPrimary(piecenum)
{
	// piecenum = flare;
	// return (0);

	if( gun_1 == 0 )
	{
		piecenum = topFlare;
	}
	else if( gun_1 == 1 )
	{
		piecenum = leftFlare;
	}
	else if( gun_1 == 2 )
	{
		piecenum = rightFlare;
	}
	return(0);
}

AimFromPrimary(piecenum)
{
	piecenum = turrretPitchPivot;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretHeadingPivot type BITMAPONLY | NOHEATCLOUD;
		explode turrretPitchPivot type BITMAPONLY | NOHEATCLOUD;
		//explode sleeve type BITMAPONLY | NOHEATCLOUD;
		//explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretHeadingPivot type FALL | NOHEATCLOUD;
		explode turrretPitchPivot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode topBarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretHeadingPivot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turrretPitchPivot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeve type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode topBarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretHeadingPivot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turrretPitchPivot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode topBarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode leftBarrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
