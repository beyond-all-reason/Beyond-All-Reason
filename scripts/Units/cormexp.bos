
#include "../recoil_common_includes.h"

piece base, column, top, turret1, turret2, barrel, flare1, flare2, flare3, aimpoint;

static-var  ExtractionSpeed, restore_delay, gun_1, gun_2, column_going_up, weapon_state;
static-var  Stunned;

// weapon states
// weapon_state = 0, fully retracted
// weapon_state = 1, popping up
// weapon_state = 2, popped up, barrels still retracted
// weapon_state = 3, barrel deploying
// weapon_state = 4, fully deployed
// weapon_state = 5, barrel retracting
// weapon_state = 6, popping down

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512
#define SIGNAL_TURNON 4


#define BASEPIECE base
#define MAXTILT 0
#include "../unit_hitbyweaponid_and_smoke.h"

triplepenetration(){
  // extraction animation
	while(TRUE){
    if ( !Stunned AND ExtractionSpeed > 0)
    // only animate if not stunned and is extracting
    {
      // use get MAX statements to avoid stuck animations when ExtractionSpeed=0
      column_going_up = TRUE;
      // weapon deploy may desire to interrupt the upwards stroke
      if( weapon_state == 0 ) // normal stroke distance
  		{
  			move column to y-axis [20] speed ( get MAX(250000,ExtractionSpeed/2) );
      }
      else // half stroke if weapon is deployed
      {
        move column to y-axis [13.5] speed ( get MAX(250000,ExtractionSpeed/2) );
      }
  		wait-for-move column along y-axis;
      column_going_up = FALSE;
  		move column to y-axis [0] speed ( get MAX(1000000,ExtractionSpeed*2) );
  	  wait-for-move column along y-axis;
    }
    sleep 1000;
	}
}

Create()
{
	hide aimpoint;
	hide flare3;
	hide flare2;
	hide flare1;
	ExtractionSpeed = 500;
	gun_1 = base;
	gun_2 = base;
	restore_delay = 5000;
  set ARMORED to 0; //makes sure no armor state is applied
	SLEEP_UNTIL_UNITFINISHED;
  weapon_state = 4;
  start-script RetractWeapon();
	start-script triplepenetration();
}

Activate()
{
}

Deactivate()
{
}

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
  start-script RetractWeapon();
}

SetStunned(State)
{
    Stunned = State;
}

RestoreAfterDelay()
{
	sleep 6000;
	start-script ExecuteRestoreAfterDelay();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 10;
}

DeployWeapon()
{
  signal SIGNAL_TURNON;
  set-signal-mask SIGNAL_TURNON;

  if (column_going_up == TRUE)
  // interrupt column movement upwards to the half-stroke distance
  {
    move column to y-axis [13.5] speed ( get MAX(250000,ExtractionSpeed/2) );
  }

  // begin deploying weapon, setting weapon_state as we go
  move top to y-axis [0] speed [28];
  weapon_state = 1;
  wait-for-move top along y-axis;
  weapon_state = 2;
	move barrel to z-axis [0] speed [28];
  weapon_state = 3;
  wait-for-move barrel along z-axis;
  weapon_state = 4;
}

RetractWeapon()
{
  signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;

  if (weapon_state == 4 OR weapon_state == 5 OR weapon_state == 3)
  // if weapon is fully deployed, or barrel is moving
  {
    move barrel to z-axis [-5] speed [28];
    weapon_state = 5;
    wait-for-move barrel along z-axis;
    weapon_state = 2;
  }

  if (weapon_state == 2 OR weapon_state == 6 OR weapon_state == 1)
  // if weapon is popped up and barrels retracted, or moving vertically
  {
    move top to y-axis [-14] speed [28];
    weapon_state = 6;
    wait-for-move top along y-axis;
    weapon_state = 0;
  }
}

AimWeapon1(heading, pitch)
{

  if ( ExtractionSpeed == 0 ) // only allow attacking when extracting
  {
  return (0);
  }

	if( !(weapon_state == 4) )
	{
    call-script DeployWeapon();
	}
  signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret1 to y-axis heading speed 40000;
	wait-for-turn turret1 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	++gun_1;
	if( gun_1 >= 2 )
	{
		gun_1 = 0;
	}
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimpoint;
}

QueryWeapon1(pieceIndex)
{
	if( gun_1 == 0 )
	{
		pieceIndex = flare1;
	}
	if( gun_1 == 1 )
	{
		pieceIndex = flare2;
	}
}

AimWeapon2(heading, pitch)
{

  if ( ExtractionSpeed == 0 ) // only allow attacking when extracting
  {
  return (0);
  }

  if( !(weapon_state == 4) )
  {
    call-script DeployWeapon();
  }
  signal SIGNAL_AIM2;
  set-signal-mask SIGNAL_AIM2;
  turn turret2 to y-axis heading speed 40000;
  wait-for-turn turret2 around y-axis;
  start-script RestoreAfterDelay();
  return (1);
}

Shot2(zero)
{
  emit-sfx 257 from barrel;
}

FireWeapon2()
{
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = aimpoint;
}

QueryWeapon2(pieceIndex)
{
  pieceIndex = flare3;
}

SetSpeed(windOrMetal)
{
	ExtractionSpeed = windOrMetal * 500; //ExtractionSpeed ~= 2,000,000 on a +2 mex
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode column type BITMAPONLY | NOHEATCLOUD;
		explode top type BITMAPONLY | NOHEATCLOUD;
		explode turret1 type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type BITMAPONLY | NOHEATCLOUD;
		explode flare3 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode top type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret1 type FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode column type BITMAPONLY | NOHEATCLOUD;
		explode top type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret1 type SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode column type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode top type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
