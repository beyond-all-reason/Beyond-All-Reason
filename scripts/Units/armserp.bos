#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lturret, rturret, base, lprop, rprop, bprop;

static-var  turnClock, turnCounter, wheelSpeed, currentSpeed, moveSpeed, pivotAngle;

// Signal definitions
#define SIG_MOVE			2

#define SIG_AIM				4
#define SIG_AIM_2			8


#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"

TurnControl()
{
	var lastHeading, currHeading, diffHeading;
	lastHeading = GET HEADING;
	while (TRUE)
	{
		currHeading = GET HEADING;
		diffHeading = currHeading - lastHeading;
		// Set values for tilt
		turnClock = 1;
		turnCounter = 1;	
		if (diffHeading >= 500)
			{
			turnClock = <2>;
			}
		if (diffHeading <= -500)
			{
			turnCounter = <2>;
			}
		lastHeading = currHeading;
		sleep 100;
	}
}

Propcontrol()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*1000/moveSpeed;
		spin lprop around z-axis speed (<-1.000000> * currentSpeed ) * turnCounter accelerate <10.000000>;
		spin rprop around z-axis speed (<1.000000> * currentSpeed ) * turnClock accelerate <10.000000>;
		spin bprop around z-axis speed <1.000000>*currentSpeed accelerate <10.000000>;
		sleep 100;
	}
}

Create()
{
	moveSpeed = get MAX_SPEED;
	start-script Propcontrol();
	start-script TurnControl();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;

	while( TRUE )
	{
		emit-sfx 256 | 3 from lprop;
		emit-sfx 256 | 3 from rprop;
		emit-sfx 256 | 3 from bprop;
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

FirePrimary()
{
	sleep 200;
}

FireSecondary()
{
	sleep 200;
}

QueryPrimary(piecenum)
{
	piecenum = lturret;
}

QuerySecondary(piecenum)
{
	piecenum = rturret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	move rturret to x-axis [0] speed [10];
	move lturret to x-axis [0] speed [10];

	wait-for-move rturret along x-axis;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 5000;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	move lturret to x-axis [-9] speed [30];
	wait-for-move lturret along x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	move rturret to x-axis [9] speed [30];
	wait-for-move rturret along x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = lturret;
}

AimFromSecondary(piecenum)
{
	piecenum = rturret;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rprop type FIRE | SMOKE | NOHEATCLOUD;
		explode rturret type BITMAPONLY | NOHEATCLOUD;
		explode lprop type BITMAPONLY | NOHEATCLOUD;
		explode lturret type BITMAPONLY | NOHEATCLOUD;
		explode bprop type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rprop type FIRE | SMOKE | NOHEATCLOUD;
		explode rturret type FIRE | SMOKE | NOHEATCLOUD;
		explode lprop type FIRE | SMOKE | NOHEATCLOUD;
		explode lturret type FALL | NOHEATCLOUD;
		explode bprop type FIRE | SMOKE | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rprop type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode rturret type SMOKE | FALL | NOHEATCLOUD;
		explode lprop type SMOKE | FALL | NOHEATCLOUD;
		explode lturret type EXPLODE_ON_HIT | SMOKE | NOHEATCLOUD;
		explode bprop type EXPLODE_ON_HIT | SMOKE | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rprop type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
		explode rturret type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
		explode lprop type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
		explode lturret type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode bprop type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
	return corpsetype;
}
