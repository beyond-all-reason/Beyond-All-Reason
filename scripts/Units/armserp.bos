
#include "../recoil_common_includes.h"

piece  lturret, rturret, base, lprop, rprop, bprop;

static-var  turnClock, turnCounter, wheelSpeed, currentSpeed, moveSpeed, pivotAngle;

// Signal definitions
#define SIGNAL_MOVE 1

#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512


#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 200

#include "../unit_hitbyweaponid_and_smoke.h"


#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <-0.32>
#define TB_BANK_Z <0.5> // Do not define this if you dont want banking
#define TB_WAKE_PIECE lprop
#define TB_WAKE_PIECE2 rprop
#include "../tilt_bank_submarine.h"


Propcontrol()
{
	var currentspeed;
	while(TRUE)
	{
		currentspeed = (get CURRENT_SPEED)*1000/TB_maxSpeed;
		spin lprop around z-axis speed (<-1.0> * currentspeed )  accelerate <10.0>;
		spin rprop around z-axis speed (<1.0> * currentspeed )  accelerate <10.0>;
		spin bprop around z-axis speed <1.0>*currentspeed accelerate <10.0>;
		sleep 100;
	}
}

Create()
{
	call-script TB_Init();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;

	START_TILTBANK;
	start-script Propcontrol();
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
	stop-spin lprop around z-axis decelerate <10.0>;
	stop-spin rprop around z-axis decelerate <10.0>;
	stop-spin bprop around z-axis decelerate <10.0>;
}

FireWeapon1()
{
	sleep 200;
}

FireWeapon2()
{
	sleep 200;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = lturret;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = rturret;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	move rturret to x-axis [0] speed [10];
	move lturret to x-axis [0] speed [10];

	wait-for-move rturret along x-axis;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 5000;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	move lturret to x-axis [-9] speed [30];
	wait-for-move lturret along x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	move rturret to x-axis [9] speed [30];
	wait-for-move rturret along x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = lturret;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = lturret;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rprop type FIRE | SMOKE | NOHEATCLOUD;
		explode rturret type BITMAPONLY | NOHEATCLOUD;
		explode lprop type BITMAPONLY | NOHEATCLOUD;
		explode lturret type BITMAPONLY | NOHEATCLOUD;
		explode bprop type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rprop type FIRE | SMOKE | NOHEATCLOUD;
		explode rturret type FIRE | SMOKE | NOHEATCLOUD;
		explode lprop type FIRE | SMOKE | NOHEATCLOUD;
		explode lturret type FALL | NOHEATCLOUD;
		explode bprop type FIRE | SMOKE | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rprop type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode rturret type SMOKE | FALL | NOHEATCLOUD;
		explode lprop type SMOKE | FALL | NOHEATCLOUD;
		explode lturret type EXPLODE_ON_HIT | SMOKE | NOHEATCLOUD;
		explode bprop type EXPLODE_ON_HIT | SMOKE | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rprop type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
		explode rturret type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
		explode lprop type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
		explode lturret type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode bprop type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
	return corpsetype;
}
