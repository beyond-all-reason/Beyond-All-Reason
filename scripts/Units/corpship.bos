
#include "../recoil_common_includes.h"

piece  base, ground, wake1, wake2, turret, sleeve, barrel1, flare1, barrel2, flare2, barrel3, flare3;
		
static-var  gun_1, restore_delay, aimDir, oldHead;

// Signal definitions
#define SIGNAL_AIM1 256

#define RB_MASS 23
#define RB_LENGTH 6
#define RB_WIDTH 3
#define RB_PITCH_SPEED 100
#define RB_PITCH_ACCELERATION 20
#define RB_ROLL_ACCELERATION 8
#define RB_WAKE_PIECE wake1
#define RB_WAKE_CEG 1024 + 1
#define RB_IDLE_KICK 10000

#define RB_BOWSPLASH_PIECE wake2
#define RB_BOWSPLASH_CEG 1024 + 2

#define RB_ROCKUNIT 60

#include "../bar_ships_common.h"



Create()
{
	hide wake2;
	hide flare3;
	hide flare1;
	hide flare2;
	hide sleeve;
	hide wake1;
	hide ground;
	hide flare1;
	hide flare2;
	hide flare3;
	gun_1 = 1;
	restore_delay = 3000;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}


SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.0> speed <135.0>;
	turn sleeve to x-axis <0.0> speed <67.500000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script ExecuteRestoreAfterDelay();
}


StartMoving(reversing)
{

}

StopMoving()
{

}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <135.0>;
	turn sleeve to x-axis RB_AIMPITCHCORRECTION(heading) - pitch speed <67.500000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	aimDir = heading;
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	if( gun_1 == 0 )
	{
		move barrel1 to z-axis [-2.0] now;
		move barrel1 to z-axis [0.0] speed [3.0];
		emit-sfx 1024 + 0 from flare1;
	}
	if( gun_1 == 1 )
	{
		move barrel2 to z-axis [-2.0] now;
		move barrel2 to z-axis [0.0] speed [3.0];
		emit-sfx 1024 + 0 from flare2;
	}
	if( gun_1 == 2 )
	{
		move barrel3 to z-axis [-2.0] now;
		move barrel3 to z-axis [0.0] speed [3.0];
		emit-sfx 1024 + 0 from flare3;
	}
	gun_1 = (gun_1 + 1 ) % 3;
}



AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare1 + gun_1;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type BITMAPONLY | BITMAP1 | NOHEATCLOUD;
		explode barrel2 type BITMAPONLY | BITMAP1 | NOHEATCLOUD;
		explode base type BITMAPONLY | BITMAP3 | NOHEATCLOUD;
		explode turret type BITMAPONLY | BITMAP1 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type FALL | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode barrel2 type FALL | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode base type BITMAPONLY | BITMAP3 | NOHEATCLOUD;
		explode turret type FALL | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode base type BITMAPONLY | BITMAP3 | NOHEATCLOUD;
	explode turret type FALL | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	return corpsetype;
}
