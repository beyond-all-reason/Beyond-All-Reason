
#include "../recoil_common_includes.h"

#define SIGNAL_MOVE 1
#define SIGNAL_BUILD 2

piece  base, turret, tracks, beamhinge, beamcase, flare, mineflare;

static-var  notBuilding, isMoving, readyToBuild;

static-var animSpeed, maxSpeed, animFramesPerKeyframe;


#define BASEPIECE base
#define HITSPEED <65.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100
#include "../unit_hitbyweaponid_and_smoke.h"

#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <0.1>
#define TB_BANK_Z <0.1> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"

Create()
{
	hide flare;
	isMoving = FALSE;
	readyToBuild = FALSE;
	animSpeed = 4;
	call-script TB_Init();
}
	
StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}


StartBuilding(heading, pitch)
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;
	if (!readyToBuild){
		turn beamcase to z-axis <-90> speed <180>;
		wait-for-turn beamcase around z-axis;
		
		turn beamhinge to x-axis <90> speed <360>;
		wait-for-turn beamhinge around x-axis;
		readyToBuild = 1;
	}

	show flare;
	turn turret to y-axis heading speed <600.0>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;

	hide flare;
	
	sleep 6000;

	set INBUILDSTANCE to 0;
	readyToBuild = FALSE;

	turn beamhinge to x-axis <0> speed <360>;
	wait-for-turn beamhinge around x-axis;	

	turn beamcase to z-axis <0> speed <180>;
	wait-for-turn beamcase around z-axis;
	
	turn turret to y-axis <0.0> speed <160.0>;
	wait-for-turn turret around y-axis;
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = flare;
}




AimWeapon1(heading, pitch)
{
	turn turret to y-axis heading speed <300>;
	wait-for-turn turret around y-axis;

	return (1);
}

FireWeapon1()
{
	return (1);
}

QueryWeapon1(pieceIndex)
{
	//pieceIndex = turret;
	//pieceIndex = lnano;
	pieceIndex = mineflare;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode beamhinge type BITMAPONLY | NOHEATCLOUD;
		explode beamcase type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode beamhinge type BITMAPONLY | NOHEATCLOUD;
		explode beamcase type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beamhinge type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beamcase type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beamhinge type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode beamcase type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		return corpsetype;
}
