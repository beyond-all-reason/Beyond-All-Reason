
#include "../recoil_common_includes.h"

piece  base, lflare, rflare, turret, sleeve, lbarrel, rbarrel, radar;

static-var  wpn1_lasthead, restore_delay, gun_switch;

// Signal definitions
#define SIGNAL_AIM1				1
#define SIGNAL_FIRE1			2


#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"


static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
    turn sleeve to x-axis <-30> speed <25.00000>;
    spin turret around y-axis speed <25.0>;
	
	sleep restore_delay;
	wpn1_lasthead = 1000000;
	set-signal-mask 0;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide lflare;
	hide rflare;
	
	restore_delay = 6000;
	
	gun_switch = 0;
	
	SLEEP_UNTIL_UNITFINISHED;

    turn radar to x-axis <-45> speed <25.0>;
    spin radar around z-axis speed <60.0>;
	start-script ExecuteRestoreAfterDelay();
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	
	stop-spin turret around y-axis;

	turn turret to y-axis heading speed <240.0>;
	turn sleeve to x-axis <0.0> - pitch speed <120.0>;
	
	
	wpn1_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	spin lbarrel around z-axis speed <-2000.0>;
	spin rbarrel around z-axis speed <2000.0>;
	stop-spin lbarrel around z-axis decelerate <12>;
	stop-spin rbarrel around z-axis decelerate <12>;
	return (0);
}

QueryWeapon1(piecenum)
{
	piecenum = lflare + gun_switch;
	return (0);
}

Shot1(zero) //Barrel switcher so each minigun fires at the same time
{
	signal SIGNAL_FIRE1;
	set-signal-mask SIGNAL_FIRE1;
	
	
	if(gun_switch == 0)
	{
		emit-sfx 1024 + 0 from rflare;
	}
	else
	{
		emit-sfx 1024 + 0 from lflare;
	}
	
	gun_switch = !gun_switch;
	return(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode lbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type FALL | NOHEATCLOUD;
		explode lbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type SMOKE | FALL | NOHEATCLOUD;
		explode lbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rbarrel type SMOKE | FALL | NOHEATCLOUD;
		explode turret type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lbarrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}