
#include "../recoil_common_includes.h"

piece  base, dbl, dbr, dtr, dtl, dummy, turret,
greendbr, greendtr, greendtl, greendbl, orangelight;

static-var  restore_delay, missiles_stockpiled;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256


#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 8
#define MAXTILT 100
#include "../unit_hitbyweaponid_and_smoke.h"

#define TB_BASE base 
#define TB_TURNRATE <10.0> 
#define TB_TILT_X <0.15>
#define TB_BANK_Z <0.15> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"


static-var  Stunned;

Create()
{
	call-script TB_Init();
	restore_delay = 3000;
	missiles_stockpiled = 0;
	hide greendbr;
	hide greendtl;
	hide greendtr;
	hide greendbl;
	show orangelight;
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}


ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	move dbl to x-axis [0] speed [1];
	move dbl to z-axis [0] speed [1];
	move dbr to x-axis [0] speed [1];
	move dbr to z-axis [0] speed [1];
	move dtl to x-axis [0] speed [1];
	move dtl to z-axis [0] speed [1];
	move dtr to x-axis [0] speed [1];
	move dtr to z-axis [0] speed [1];
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 5000;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	move dbl to x-axis [-4] speed [8];
	move dbl to z-axis [-4] speed [8];
	move dbr to x-axis [4] speed [8];
	move dbr to z-axis [-4] speed [8];
	move dtl to x-axis [-4] speed [8];  
	move dtl to z-axis [4] speed [8];
	move dtr to x-axis [4] speed [8];
	move dtr to z-axis [4] speed [8];
	wait-for-move dtr along x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	sleep 100;
	return (0);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = dummy;
	return (0);
}

lights_orange()
{
	hide greendbr;
	hide greendtl;
	hide greendtr;
	hide greendbl;
	show orangelight;
}

lights_green()
{
	show greendbr;
	show greendtl;
	show greendtr;
	show greendbl;
	hide orangelight;
}

SetStockpile(num_stockpiled)
{
	if (num_stockpiled == 0)
	{
		start-script lights_orange();
		sleep 100;
		missiles_stockpiled = 0;
	}
	if (num_stockpiled >= 1)
	{
		start-script lights_green();
		sleep 100;
		missiles_stockpiled = 1;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dbl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dbl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dbl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode dummy type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dbl type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode dummy type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
