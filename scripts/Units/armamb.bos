#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
#include "smart_weapon_select.h"

piece  base, flare, turret, door1, door2, door3, door4, barrel, stand, aimpoint, turretmidpoint;

static-var  turretOpen, restoreDelay, stunned;

#define SIGNAL_AIM			1

openTurret()
{
	turn door1 to x-axis <0.000000> speed <227.093407>;
	turn door2 to z-axis <0.000000> speed <227.093407>;
	turn door3 to x-axis <0.000000> speed <227.093407>;
	turn door4 to z-axis <0.000000> speed <227.093407>;
	wait-for-turn door1 around x-axis;

	move door1 to y-axis [0] speed [45.000000];
	move door2 to y-axis [0] speed [45.000000];
	move door3 to y-axis [0] speed [45.000000];
	move door4 to y-axis [0] speed [45.000000];
	move stand to y-axis [0] speed [34];
	wait-for-move door1 along y-axis;
	wait-for-move stand along y-axis;
	sleep 250;

	move barrel to z-axis [0] speed [51];
	sleep 300;

	sleep 25;
	return (0);
}

closeTurret()
{
	turn stand to y-axis <0> speed <100>;
	turn turret to x-axis <0> speed <50>;
	move barrel to z-axis [-16] speed [51];
	sleep 300;
	wait-for-turn stand around y-axis;
	wait-for-turn turret around x-axis;

	move door1 to y-axis [15] speed [45.000000];
	move door2 to y-axis [15] speed [45.000000];
	move door3 to y-axis [15] speed [45.000000];
	move door4 to y-axis [15] speed [45.000000];
	move stand to y-axis [-16] speed [34];
	wait-for-move door1 along y-axis;
	wait-for-move stand along y-axis;

	turn door1 to x-axis <-90.000000> speed <227.093407>;
	turn door2 to z-axis <-90.000000> speed <227.093407>;
	turn door3 to x-axis <90.000000> speed <227.093407>;
	turn door4 to z-axis <90.000000> speed <227.093407>;
	wait-for-turn door1 around x-axis;

	sleep 17;
	return (0);
}


Go()
{
	if(!turretOpen)
	{
		call-script openTurret();
	}
	turretOpen = 1;
	set ARMORED to 0;
	return (0);
}

Stop()
{
	set ARMORED to 1;
	turretOpen = 0;
	call-script closeTurret();
	return (0);
}

ExecuteRestoreAfterDelay()
{
    if (stunned)
	{
        return (1);
    }

	//set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <100.016484>;
	turn turret to x-axis <0.000000> speed <50.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;

	start-script Stop();
}

SetStunned(state)
{
    stunned = state;
	if (!stunned)
	{
	    start-script RestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	set-signal-mask SIGNAL_AIM;
	sleep restoreDelay;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide aimpoint;
	hide flare;
	hide flare;
	turretOpen = 0;
	restoreDelay = 10000;

	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}

	start-script RestoreAfterDelay();
	return (0);
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

aimCommon(heading, pitch)
{
	while(!turretOpen)
	{
		sleep 250;
	}

	turn stand to y-axis heading speed <50.000000>;
	turn turret to x-axis <0.000000> - pitch speed <45.000000>;
	wait-for-turn stand around y-axis;
	wait-for-turn turret around x-axis;
}

AimPrimary(heading, pitch)
{
	if (AimingState != AIMING_PRIORITY)
	{
		return(0);
	}

	start-script Go();

	signal SIGNAL_AIM;
	set-signal-mask SIGNAL_AIM;

	call-script aimCommon(heading, pitch);
	start-script RestoreAfterDelay();

	// Prevent "bonus shots" while alternative weapon is reloading
	var reloading;
	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(2));
	if( reloading )
	{
		return(0);
	}

	return (1);
}

AimSecondary(heading, pitch)
{
	if (AimingState != AIMING_BACKUP)
	{
		return(0);
	}
	
	start-script Go();

	signal SIGNAL_AIM;
	set-signal-mask SIGNAL_AIM;

	call-script aimCommon(heading, pitch);
	start-script RestoreAfterDelay();

	// Prevent "bonus shots" while alternative weapon is reloading
	var reloading;
	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(1));
	if( reloading )
	{
		return(0);
	}

	return (1);
}

AimTertiary(piecenum)
{
	return (0);
}

fireCommon()
{
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [-4.500000] speed [1250.000000];
	sleep 150;
	move barrel to z-axis [0.000000] speed [7.500000];
}

FirePrimary()
{
	call-script fireCommon();
}

FireSecondary()
{
	call-script fireCommon();
}

AimFromPrimary(piecenum)
{
	piecenum = aimpoint;
}

AimFromSecondary(piecenum)
{
	piecenum = aimpoint;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

QuerySecondary(piecenum)
{
	piecenum = flare;
}

QueryTertiary(piecenum)
{
	piecenum = turretmidpoint;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type BITMAPONLY | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode stand type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FALL | NOHEATCLOUD;
		explode door2 type FALL | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode stand type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode stand type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode stand type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
