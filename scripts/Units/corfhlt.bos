
#include "../recoil_common_includes.h"


piece  flare1, flare2, base, turret1, barrel1, barrel2, turret2;

static-var  gun_1;

// Signal definitions
#define SIGNAL_AIM1 256

#define WATER_ROCK_UNITSIZE 10
#include "../floatmotion.h"


#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 200
#define RECOIL_POWER 20000
#include "../unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide flare1;
	hide flare2;
	gun_1 = 0;
	call-script CATT1_Init();
	SLEEP_UNTIL_UNITFINISHED;
	start-script FloatMotion();
}

//-------------------------------CONSTANT ACCELERATION TURRET TURNING---------------------------
// MaxVelocity and acceleration are in degrees per frame (not second!)
// Jerk is the minimum velocity of the turret
// A high precision requirement can result in overshoots if desired 
// Author Beherith mysterme@gmail.com. License: GNU GPL v2.

#define CATT1_PIECE_X turret2
#define CATT1_PIECE_Y turret1

#define CATT1_MAX_VELOCITY <9.0>
#define CATT1_ACCELERATION <0.2>
#define CATT1_JERK <1.0>
#define CATT1_PRECISION <1.2>
#define CATT1_RESTORE_SPEED <1.0>
#define CATT1_PITCH_SPEED <45>
#define CATT_DONTRESTORE

#include "../constant_acceleration_turret_turning_1.h"

AimWeapon1(heading, pitch)
{

	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	//We can do this any time
	call-script CATT1_Aim(heading,pitch);
	return (1);
}

FireWeapon1()
{
	gun_1 = !gun_1;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare1 + gun_1;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret2;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret1 type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type BITMAPONLY | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode barrel1 type BITMAPONLY | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret1 type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
