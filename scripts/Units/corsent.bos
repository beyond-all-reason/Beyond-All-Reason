
#include "../recoil_common_includes.h"

piece  lftrack, rftrack, lbtrack, rbtrack, turret, guns, base, barrel1, flare1, barrel2, flare2;

static-var  restore_delay, gun_3;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM3 1024

#define BASEPIECE base
#define HITSPEED <45.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100
#define RECOIL_POWER 10000
#include "../unit_hitbyweaponid_and_smoke.h"


#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <0.15>
#define TB_BANK_Z <0.15> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"


Create()
{
	hide flare1;
	hide flare2;
	restore_delay = 5000;
	gun_3 = turret;
	call-script TB_Init();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}


static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turret to y-axis <0.0> speed <600.0>;
	turn guns to x-axis <0.0> speed <550.0>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM3;
	set-signal-mask SIGNAL_AIM3;
	turn turret to y-axis heading speed <670.0>;
	turn guns to x-axis <0.0> - pitch speed <670.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn guns around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	if( gun_3 == 0 )
	{
	    emit-sfx 1024 + 0 from flare1;
		move barrel1 to z-axis [-4.0] now;
		sleep 100;
		move barrel1 to z-axis [0.0] speed [15.0];
	}
	if( gun_3 == 1 )
	{
	    emit-sfx 1024 + 0 from flare2;
		move barrel2 to z-axis [-4.0] now;
		sleep 100;
		move barrel2 to z-axis [0.0] speed [15.0];
	}
	sleep 50;
	++gun_3;
	if( gun_3 > 1 )
	{
		gun_3 = 0;
	}
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare1;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = turret;
}

QueryWeapon2(pieceIndex)
{
	if (gun_3 == 0)
		pieceIndex = flare1;
	else
		pieceIndex = flare2;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode guns type BITMAPONLY | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode guns type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode guns type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode guns type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
