
#include "../recoil_common_includes.h"

#define SIGNAL_BUILD 2
#define SIGNAL_MOVE 1


piece  flare1, flare2, hip, lleg, rleg, rfoot, lfoot, luparm, ruparm, rarm, larm, torso,aimy1, aimx1, corhexl, corhexl_emit;

static-var spray, animSpeed, maxSpeed, animFramesPerKeyframe, isMoving;

Walk() {//Created by https://github.com/Beherith/Skeletor_S3O from N:\animations\cornecro_anim_walk.blend 
	set-signal-mask SIGNAL_MOVE;
	if (isMoving) {
			turn hip to x-axis <3.0> speed <90.0> / animSpeed; 
			turn larm to x-axis <-0.560101> speed <16.803019> / animSpeed; 
			turn luparm to x-axis <0.242998> speed <7.289952> / animSpeed; 
			turn rarm to x-axis <-5.876015> speed <176.280455> / animSpeed; 
			turn ruparm to x-axis <-0.803352> speed <24.100567> / animSpeed; 
		sleep 98;
	}
	while(isMoving) {
		if (isMoving) {
			move hip to y-axis [-1.0] speed [30.0] / animSpeed; 
			turn hip to x-axis <0.0> speed <90.0> / animSpeed; 
			turn larm to x-axis <9.597569> speed <304.730096> / animSpeed; 
			turn lfoot to x-axis <29.633575> speed <2420.907686> / animSpeed; 
			turn lleg to x-axis <-65.287210> speed <354.353117> / animSpeed; 
			turn luparm to x-axis <25.893575> speed <769.517298> / animSpeed; 
			turn rarm to x-axis <-19.158424> speed <398.472280> / animSpeed; 
			turn rfoot to x-axis <20.826635> speed <624.799050> / animSpeed; 
			turn rleg to x-axis <33.449953> speed <1003.498599> / animSpeed; 
			turn ruparm to x-axis <-19.517030> speed <561.410330> / animSpeed; 
			turn torso to y-axis <13.899999> speed <416.999979> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) {
			turn hip to x-axis <-3.0> speed <90.0> / animSpeed; 
			turn larm to x-axis <17.195968> speed <227.951954> / animSpeed; 
			turn lfoot to x-axis <9.054714> speed <617.365815> / animSpeed; 
			turn lleg to x-axis <-55.896707> speed <281.715080> / animSpeed; 
			turn luparm to x-axis <19.688662> speed <186.147380> / animSpeed; 
			turn rarm to x-axis <-27.321836> speed <244.902341> / animSpeed; 
			turn rfoot to x-axis <60.958646> speed <1203.960331> / animSpeed; 
			turn rleg to x-axis <44.202163> speed <322.566304> / animSpeed; 
			turn ruparm to x-axis <-24.486206> speed <149.075282> / animSpeed; 
			turn torso to y-axis <6.300000> speed <227.999992> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) {
			move hip to y-axis [0.0] speed [30.0] / animSpeed; 
			turn hip to x-axis <0.0> speed <90.0> / animSpeed; 
			turn larm to x-axis <-5.876015> speed <692.159486> / animSpeed; 
			turn lfoot to x-axis <-0.0> speed <271.641430> / animSpeed; 
			turn lleg to x-axis <-0.0> speed <1676.901224> / animSpeed; 
			turn luparm to x-axis <-0.803352> speed <614.760436> / animSpeed; 
			turn rarm to x-axis <-3.907620> speed <702.426464> / animSpeed; 
			turn rfoot to x-axis <110.330498> speed <1481.155550> / animSpeed; 
			turn rleg to x-axis <-53.475440> speed <2930.328090> / animSpeed; 
			turn ruparm to x-axis <-0.550249> speed <718.078724> / animSpeed; 
			turn torso to y-axis <0.0> speed <188.999987> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) {
			move hip to y-axis [-1.0] speed [30.0] / animSpeed; 
			turn hip to x-axis <-3.0> speed <90.0> / animSpeed; 
			turn larm to x-axis <-19.158424> speed <398.472280> / animSpeed; 
			turn lfoot to x-axis <20.826635> speed <624.799050> / animSpeed; 
			turn lleg to x-axis <33.449953> speed <1003.498599> / animSpeed; 
			turn luparm to x-axis <-19.517030> speed <561.410330> / animSpeed; 
			turn rarm to x-axis <9.597569> speed <405.155688> / animSpeed; 
			turn rfoot to x-axis <29.633575> speed <2420.907686> / animSpeed; 
			turn rleg to x-axis <-65.287210> speed <354.353117> / animSpeed; 
			turn ruparm to x-axis <25.893575> speed <793.314705> / animSpeed; 
			turn torso to x-axis <9.333588> speed <280.007652> / animSpeed; 
			turn torso to y-axis <-14.599999> speed <437.999968> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) {
			turn hip to x-axis <0.0> speed <90.0> / animSpeed; 
			turn larm to x-axis <-27.321836> speed <244.902341> / animSpeed; 
			turn lfoot to x-axis <60.958646> speed <1203.960331> / animSpeed; 
			turn lleg to x-axis <44.202163> speed <322.566304> / animSpeed; 
			turn luparm to x-axis <-24.486206> speed <149.075282> / animSpeed; 
			turn rarm to x-axis <17.195968> speed <227.951954> / animSpeed; 
			turn rfoot to x-axis <9.054714> speed <617.365815> / animSpeed; 
			turn rleg to x-axis <-55.896707> speed <281.715080> / animSpeed; 
			turn ruparm to x-axis <19.688662> speed <186.147380> / animSpeed; 
			turn torso to x-axis <-0.0> speed <280.007652> / animSpeed; 
			turn torso to y-axis <-8.300000> speed <188.999975> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) {
			move hip to y-axis [0.0] speed [30.0] / animSpeed; 
			turn hip to x-axis <3.0> speed <90.0> / animSpeed; 
			turn larm to x-axis <-3.907620> speed <702.426464> / animSpeed; 
			turn lfoot to x-axis <110.330498> speed <1481.155550> / animSpeed; 
			turn lleg to x-axis <-53.475440> speed <2930.328090> / animSpeed; 
			turn luparm to x-axis <-0.550249> speed <718.078724> / animSpeed; 
			turn rarm to x-axis <-5.876015> speed <692.159486> / animSpeed; 
			turn rfoot to x-axis <-0.0> speed <271.641430> / animSpeed; 
			turn rleg to x-axis <-0.0> speed <1676.901224> / animSpeed; 
			turn ruparm to x-axis <-0.803352> speed <614.760436> / animSpeed; 
			turn torso to y-axis <0.0> speed <248.999993> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
	}
}
// Call this from StopMoving()!
StopWalking() {
	move hip to y-axis [0] speed [10.0];
	turn hip to x-axis <0> speed <30.0>;
	turn larm to x-axis <0> speed <234.142155>;
	turn lfoot to x-axis <0> speed <806.969229>;
	turn lleg to x-axis <0> speed <976.776030>;
	turn luparm to x-axis <0> speed <256.505766>;
	turn rarm to x-axis <0> speed <234.142155>;
	turn rfoot to x-axis <0> speed <806.969229>;
	turn rleg to x-axis <0> speed <976.776030>;
	turn ruparm to x-axis <0> speed <264.438235>;
	turn torso to x-axis <0> speed <93.335884>;
	turn torso to y-axis <0> speed <145.999989>;


}
UnitSpeed(){
 maxSpeed = get MAX_SPEED; // this returns cob units per frame i think
 animFramesPerKeyframe = 3; //we need to calc the frames per keyframe value, from the known animtime
 maxSpeed = maxSpeed + (maxSpeed /(2*animFramesPerKeyframe)); // add fudge
 while(TRUE){
  animSpeed = (get CURRENT_SPEED);
  if (animSpeed<1) animSpeed=1;
  animSpeed = 1 + (maxSpeed * 3) / animSpeed; // add 1 to slow it down :)
  //get PRINT(maxSpeed, animFramesPerKeyframe, animSpeed);
  if (animSpeed<2) animSpeed=2;
  if (animspeed>8) animSpeed = 8;
  sleep 132;
 }
}

#define BASEPIECE hip
#define HITSPEED <85.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "../unit_hitbyweaponid_and_smoke.h"


Create()
{
	hide flare2;
	hide flare1;
	hide aimx1;
	hide aimy1;
	//hide corhexl;
	hide corhexl_emit;
	isMoving = FALSE;
	animSpeed = 3;
	spray = flare1;
}

BuildAnim(){
	set-signal-mask SIGNAL_BUILD;
	while (TRUE){
		turn aimy1 to x-axis <-15> speed <10>;
		wait-for-turn aimy1 around x-axis;
		turn aimy1 to x-axis <15> speed <10>;
		wait-for-turn aimy1 around x-axis;
	}
}

StartBuilding(torsoing, pitch)
{
	show flare2;
	show flare1;
	signal SIGNAL_BUILD;
	turn aimy1 to y-axis torsoing speed <240.0>;
	turn aimx1 to x-axis <-55> - pitch speed <240.0>;
	wait-for-turn aimy1 around y-axis;
	set INBUILDSTANCE to 1;
	show corhexl_emit;
	start-script BuildAnim();
}

StopBuilding()
{
	hide flare2;
	hide flare1;
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;
	hide corhexl_emit;
	turn aimy1 to y-axis <0.0> speed <160.0>;
	turn aimx1 to x-axis <0> speed <240.0>;
	turn aimy1 to x-axis <0> speed <5>;
}

StartMoving(reversing)
{
	isMoving = TRUE;
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	start-script UnitSpeed();
	start-script walk();
}

StopMoving()
{
	isMoving = FALSE;
	signal SIGNAL_MOVE;
	call-script StopWalking();
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = spray;
	spray = !spray;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode hip type BITMAPONLY | NOHEATCLOUD;
		explode torso type BITMAPONLY | NOHEATCLOUD;
		explode ruparm type BITMAPONLY | NOHEATCLOUD;
		explode rarm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode luparm type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode hip type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ruparm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rarm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode luparm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode hip type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ruparm type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode rarm type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode luparm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode hip type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode ruparm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rarm type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode luparm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
