
#include "../recoil_common_includes.h"

piece  base, door, tracks, nanotower, aim, emitnano;

static-var  restore_delay, last_primary_heading;
static-var open_state;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_BUILD 2

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

#include "../unit_hitbyweaponid_and_smoke.h"

Create()
{
	restore_delay = 3000;
	open_state = 0;
	return (0);
}

static-var  Stunned;
Restore_Nano()
{
	set-signal-mask SIGNAL_BUILD;
	sleep restore_delay;

	set-signal-mask 0;
	signal SIGNAL_BUILD;
	set-signal-mask SIGNAL_BUILD;

    if (Stunned) {
        return (1);
    }
	if ( (open_state == 6) OR (open_state == 5) )
	{
		open_state = 5;
		turn aim to y-axis <0> speed <160>;
		move nanotower to y-axis [0] speed [12.75];
		wait-for-move nanotower along y-axis;
		open_state = 4;
	}
	if ( (open_state == 4) OR (open_state == 3) )
	{
		open_state = 3;
		move aim to y-axis [0] speed [16];
		move door to z-axis [-1.3125] speed [2.625];
		turn door to x-axis <-26.25> speed <52.5>;
		wait-for-move aim along y-axis;
		wait-for-move door along z-axis;
		wait-for-turn door around x-axis;
		open_state = 2;
	}
	if ( (open_state == 2) OR (open_state == 1) )
	{
		open_state = 1;
		move door to z-axis [0] speed [2.625];
		turn door to x-axis <0> speed <52.5>;
		wait-for-turn door around x-axis;
		open_state = 0;
	}
}

Deploy_Nano(heading)
{
	set-signal-mask SIGNAL_BUILD;
	if ( (open_state == 0) OR (open_state == 1) )
	{
		open_state = 1;
		move door to z-axis [-1.3125] speed [2.625];
		turn door to x-axis <-26.25> speed <52.5>;
		wait-for-turn door around x-axis;
		open_state = 2;
	}
	if ( (open_state == 2) OR (open_state == 3) )
	{
		open_state = 3;
		move door to z-axis [-2.625] speed [2.625];
		move aim to y-axis [6] speed [12];
		turn door to x-axis <-52.5> speed <52.5>;
		wait-for-move aim along y-axis;
		wait-for-move door along z-axis;
		wait-for-turn door around x-axis;
		open_state = 4;
	}
	if ( (open_state == 4) OR (open_state == 5) )
	{
		open_state = 5;
		move nanotower to y-axis [12.75] speed [12.75];
		wait-for-move nanotower along y-axis;
		open_state = 6;
	}
	if (open_state == 6)
	{
		set INBUILDSTANCE to 1;
		turn aim to y-axis heading speed <160>;
	}
}

SetStunned(State)
{
  Stunned = State;
	if (!Stunned) {
		start-script Restore_Nano();
	}
}


StartBuilding(heading, pitch)
{
	signal SIGNAL_BUILD;
	set-signal-mask SIGNAL_BUILD;
	start-script Deploy_Nano(heading);
	// set INBUILDSTANCE to 1;
}

StopBuilding()
{
	//signal SIGNAL_BUILD;
	set-signal-mask SIGNAL_BUILD;
	start-script Restore_Nano();
	set INBUILDSTANCE to 0;
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = emitnano;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door type BITMAPONLY | NOHEATCLOUD;
		explode tracks type BITMAPONLY | NOHEATCLOUD;
		explode nanotower type BITMAPONLY | NOHEATCLOUD;
		explode aim type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode tracks type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanotower type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode aim type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode tracks type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanotower type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode aim type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode tracks type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanotower type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode aim type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
