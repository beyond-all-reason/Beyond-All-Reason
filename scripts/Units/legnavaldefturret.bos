
#include "../recoil_common_includes.h"

piece
base,
turretHeadingPivot,
turretHousing,
turretCover,
turretPitchPivot,
turret,
pod1,
podFlare1,
pod2,
podFlare2,
pod3,
podFlare3,
pod4,
podFlare4;


static-var restore_delay, wpn1_lasthead, whichPod;

// Signal definitions
#define SIG_AIM				2

#define WATER_ROCK_UNITSIZE 10
#include "../floatmotion.h"


#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100
#define RECOIL_POWER 20000

#include "unit_hitbyweaponid_and_smoke.h"


Create()
{
    whichPod = 0;
	restore_delay = 2000;
	start-script FloatMotion();
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turretHeadingPivot to y-axis <0> speed <60>;
	wpn1_lasthead = 1000000;
    whichPod = 0;
	set-signal-mask 0;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turretHeadingPivot to y-axis heading speed <150>;
	turn turretPitchPivot to x-axis <0.000000> - pitch speed <80>;
	if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > 1300) AND ((get ABS(wpn1_lasthead - heading)) < 64236)))
	{
		wpn1_lasthead = 1000000;
		wait-for-turn turretHeadingPivot around y-axis;
		wait-for-turn turretPitchPivot around x-axis;
	}
	wpn1_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{

}

Shot1(zero)
{
	if(whichPod == 0){
        move pod1 to z-axis [-5] now;
        emit-sfx 1024 + 0 from podFlare1;
        sleep 10;
        move pod1 to z-axis [0] speed [5];
        whichPod = 1;
    }
	else if(whichPod == 1){
        move pod2 to z-axis [-5] now;
        emit-sfx 1024 + 0 from podFlare2;
        sleep 10;
        move pod2 to z-axis [0] speed [5];
        whichPod = 2;
    }
	else if(whichPod == 2){
        move pod3 to z-axis [-5] now;
        emit-sfx 1024 + 0 from podFlare3;
        sleep 10;
        move pod3 to z-axis [0] speed [5];
        whichPod = 3;
    }
	else if(whichPod == 3){
        move pod4 to z-axis [-5] now;
        emit-sfx 1024 + 0 from podFlare4;
        sleep 10;
        move pod4 to z-axis [0] speed [5];
        whichPod = 0;
    }
    else{
        whichPod = 0;
    }
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if(whichPod == 0){
        piecenum = pod1;
    }
	else if(whichPod == 1){
        piecenum = pod2;
    }
	else if(whichPod == 2){
        piecenum = pod3;
    }
	else if(whichPod == 3){
        piecenum = pod4;
    }
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretHeadingPivot type BITMAPONLY | NOHEATCLOUD;
		explode turretPitchPivot type BITMAPONLY | NOHEATCLOUD;
		explode pod1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode podFlare1 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretHeadingPivot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretPitchPivot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode pod1 type FALL | NOHEATCLOUD;
		explode podFlare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretHeadingPivot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretPitchPivot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode pod1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode podFlare1 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretHeadingPivot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretPitchPivot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode pod1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode podFlare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
