#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  	base,   leftATurretBase, leftAGun, leftAFlare, //4
                leftBTurretBase, leftBGun, leftBFlare, //7
                rightATurretBase, rightAGun, rightAFlare, //10
                rightBTurretBase, rightBGun, rightBFlare, //14

        turretBase, turretPivot, turret, rightFlare, midFlare, leftFlare; //18, 19, 20



static-var  restore_delay, last_gun_heading, guncount,
			wpn2_lasthead, wpn3_lasthead, wpn4_lasthead, wpn5_lasthead;


// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_AIM_4			16
#define SIG_AIM_5			32
#define SIG_FIRE1 			64
#define SIG_FIRE2 			128
#define SIG_FIRE3 			256
#define SIG_FIRE4 			512
#define SIG_FIRE5			1024

#define BASEPIECE base
#define HITSPEED <85.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 9
#define MAXTILT 100

StartMoving()
{
	turn base to x-axis <-3> speed <11>;
	wait-for-turn base around x-axis;
	turn base to x-axis <0> speed <11>;
}

StopMoving()
{
	turn base to x-axis <1> speed <5>;
	wait-for-turn base around x-axis;
	turn base to x-axis <0> speed <5>;
}

Create()
{
	hide leftAFlare;
	hide leftBFlare;
	hide rightAFlare;
	hide rightBFlare;

	hide leftFlare;
	hide rightFlare;
	hide midFlare;
	restore_delay = 3000;

	turn rightATurretBase 	to y-axis <90>	now;
	turn rightBTurretBase 	to y-axis <90> 	now;
	turn leftATurretBase 	to y-axis <-90> now;
	turn leftBTurretBase 	to y-axis <-90> now;
	guncount = 18;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;

	turn turretBase to y-axis <0> speed <45>;
	turn turretPivot to x-axis <0> speed <20>;

	turn rightATurretBase 	to y-axis <90>	speed <90>;
	turn rightBTurretBase 	to y-axis <90>  speed <90>;
	turn leftATurretBase 	to y-axis <-90>	speed <90>;
	turn leftBTurretBase 	to y-axis <-90> speed <90>;

	turn leftAGun to z-axis <0> speed <45>;
	turn rightAGun to z-axis <0> speed <45>;
	turn leftBGun to z-axis <0> speed <45>;
	turn rightBGun to z-axis <0> speed <45>;

	

	//guncount = 1;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

RestoreAfterDelay2()
{
	sleep restore_delay;
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turretBase to y-axis heading speed <30.000000>;
	turn turretPivot to x-axis <0.000000> - pitch speed <15.000000>;
	wait-for-turn turretBase around y-axis;
	wait-for-turn turretPivot around x-axis;
	start-script RestoreAfterDelay();
	//last_gun_heading = heading;
	return (1);
}

Rock_Main_Cannon()
{
	turn base to z-axis <0> - (GET KSIN(last_gun_heading)) speed <50.005495>;
	turn base to x-axis <0> - (GET KCOS(last_gun_heading)) speed <50.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

FirePrimary()
{
	call-script Rock_Main_Cannon();
	return(0);

}

Shot1(zero){
	signal SIG_FIRE5;
	set-signal-mask SIG_FIRE5;
	if(guncount == 18){
		emit-sfx 1024 + 0 from rightFlare;
		guncount = 19;
		sleep 400;
	}
	if(guncount == 19){
		emit-sfx 1024 + 0 from midFlare;
		guncount = 20;
		sleep 400;
		
	}
	if(guncount == 20){
		emit-sfx 1024 + 0 from leftFlare;
		guncount = 18;
		sleep 400;
		
	}
}

AimFromPrimary(piecenum)
{
	piecenum = midFlare;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = guncount - 2;
	return (0);
}

/////////////////////////////////////////////////////////////////////////

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;

	if ((heading + <33.02>) > <-117.5> AND (heading + <33.02>) < <117.5>){
		turn rightAGun to z-axis <0.000000> + pitch speed <50.000000>;
		turn rightATurretBase to y-axis heading + <90> speed <100.000000>;
		wait-for-turn rightAGun around x-axis;
		wait-for-turn rightATurretBase around y-axis;
		start-script RestoreAfterDelay2();
		return (1);
	}
	else return(0);

}

FireWeapon2()
{
	//spin rightAGun around x-axis speed <900.000000>;
	return (1);
}

Shot2(zero)
{
	signal SIG_FIRE1;
	set-signal-mask SIG_FIRE1;
	emit-sfx 1024 + 1 from rightAFlare;
	return(1);
}

AimFromWeapon2(piecenum)
{
	piecenum = rightAGun;
}

QueryWeapon2(piecenum)
{
	piecenum = rightAFlare;
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;

	if ((heading + <73.3>) > <-100> AND (heading + <73.3>) < <100>){
		turn rightBGun to z-axis <0.000000> + pitch speed <50.000000>;
		turn rightBTurretBase to y-axis heading + <90> speed <100.000000>;
		wait-for-turn rightBGun around x-axis;
		wait-for-turn rightBTurretBase around y-axis;
		start-script RestoreAfterDelay2();
		return (1);
	}
	else return(0);



}

FireWeapon3()
{
	//spin rightBGun around x-axis speed <-900.000000>;
	return (1);
}

Shot3(zero)
{
	signal SIG_FIRE2;
	set-signal-mask SIG_FIRE2;
	emit-sfx 1024 + 1 from rightBFlare;
	return(1);
}

AimFromWeapon3(piecenum)
{
	piecenum = rightBGun;
}

QueryWeapon3(piecenum)
{
	piecenum = rightBFlare;
}
////////////////////////////////////////////////////

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;

	if ((heading - <33.02>) > <-117.5> AND (heading - <33.02>) < <117.5>){
		turn leftAGun to z-axis <0.000000> + pitch speed <50.000000>;
		turn leftATurretBase to y-axis heading - <90> speed <100.000000>;
		wait-for-turn leftAGun around x-axis;
		wait-for-turn leftATurretBase around y-axis;
		start-script RestoreAfterDelay2();
		return (1);
	}
	else return(0);


}

FireWeapon4()
{
	//spin leftAGun around x-axis speed <-900.000000>;
	return (1);
}

Shot4(zero)
{
	signal SIG_FIRE3;
	set-signal-mask SIG_FIRE3;
	emit-sfx 1024 + 1 from leftAFlare;
	return(1);
}

AimFromWeapon4(piecenum)
{
	piecenum = leftAGun;
}

QueryWeapon4(piecenum)
{
	piecenum = leftAFlare;
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;

	if ((heading - <73.3>) > <-100> AND (heading - <73.3>) < <100>){
		turn leftBGun to z-axis <0.000000> + pitch speed <50.000000>;
		turn leftBTurretBase to y-axis heading - <90> speed <100.000000>;
		wait-for-turn leftBGun around x-axis;
		wait-for-turn leftBTurretBase around y-axis;
		start-script RestoreAfterDelay2();
		return (1);
	}
	else return(0);
}

FireWeapon5()
{
	//spin leftBGun around x-axis speed <-900.000000>;
	return (1);
}

Shot5(zero)
{
	signal SIG_FIRE4;
	set-signal-mask SIG_FIRE4;
	emit-sfx 1024 + 1 from leftBFlare;
	return(1);
}

AimFromWeapon5(piecenum)
{
	piecenum = leftBGun;
}

QueryWeapon5(piecenum)
{
	piecenum = leftBFlare;
}

// TargetCleared(Func_Var_1)
// {
// 	if( Func_Var_1 == 1 )
// 	{
// 		signal SIG_AIM_2;
// 		signal SIG_AIM_3;
// 		signal SIG_AIM_4;
// 		signal SIG_AIM_5;
// 		stop-spin leftAGun around z-axis decelerate <10.000000>;
// 		stop-spin leftBGun around z-axis decelerate <10.000000>;
// 		stop-spin rightAGun around z-axis decelerate <10.000000>;
// 		stop-spin rightBGun around z-axis decelerate <10.000000>;
// 	}
// }

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretBase type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretBase type FALL | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode leftAGun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretBase type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode leftAGun type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;

		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretBase type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode leftAGun type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}