
#include "../recoil_common_includes.h"	
#include "../factories_common.h"

piece  pad,base,nano1,nano2,nano3,nano4,fan1,fan2,doorr,doorl,doorf, cagelight, cagelight_emit;

static-var  spray;

// Signal definitions
#define SIGNAL_TURNON 4



Create()
{
	hide nano2;
	hide nano4;
	hide nano3;
	hide nano1;
	hide pad;
	hide cagelight_emit;
	spray = 0;
}


#define BASEPIECE base
#define MAXTILT 0
#include "../unit_hitbyweaponid_and_smoke.h"

QueryNanoPiece(pieceIndex)
{
	spray = (spray + 1) % 4;
	pieceIndex = nano1 + spray;
}

Activate()
{
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
	
	move doorl to x-axis [17.0] speed [17];
	move doorr to x-axis [-17.0] speed [17];
	move doorf to y-axis [-16.0] speed [16];
	wait-for-move doorl along x-axis;
	FACTORY_OPEN_BUILD;
}

Deactivate()
{
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
	sleep 5000;
	
	move doorl to x-axis [0.0] speed [17];
	move doorr to x-axis [0.0] speed [17];
	move doorf to y-axis [0.0] speed [16];
	wait-for-move doorl along x-axis;
	FACTORY_CLOSE_BUILD;
}

StartBuilding()
{
	show nano2;
	show nano4;
	show nano3;
	show nano1;
	spin fan1 around z-axis speed <200> accelerate <5>;
	spin fan2 around z-axis speed <200> accelerate <5>;
	show cagelight_emit;
	spin cagelight around y-axis speed <200> accelerate <1>;
}

StopBuilding()
{
	hide nano2;
	hide nano4;
	hide nano3;
	hide nano1;
	stop-spin fan1 around z-axis decelerate <3>;
	stop-spin fan2 around z-axis decelerate <3>;
	hide cagelight_emit;
	stop-spin cagelight around y-axis decelerate <1>;
}

QueryBuildInfo(pieceIndex)
{
	pieceIndex = pad;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorf type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fan1 type BITMAPONLY | NOHEATCLOUD;
		explode fan2 type BITMAPONLY | NOHEATCLOUD;
		explode nano1 type BITMAPONLY | NOHEATCLOUD;
		explode nano2 type BITMAPONLY | NOHEATCLOUD;
		explode nano3 type BITMAPONLY | NOHEATCLOUD;
		explode nano4 type BITMAPONLY | NOHEATCLOUD;
		explode doorr type BITMAPONLY | NOHEATCLOUD;
		explode doorl type BITMAPONLY | NOHEATCLOUD;
		explode pad type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorf type FALL | NOHEATCLOUD;
		explode fan1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fan2 type FALL | NOHEATCLOUD;
		explode nano1 type FALL | NOHEATCLOUD;
		explode nano2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorr type FALL | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode pad type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorf type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode fan1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode fan2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode nano3 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode nano4 type SMOKE | FALL | NOHEATCLOUD;
		explode doorr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type SMOKE | FALL | NOHEATCLOUD;
		explode pad type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorf type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fan1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fan2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nano2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nano3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorr type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode doorl type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode pad type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
