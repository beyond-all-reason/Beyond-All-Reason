#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, base2, base3, sauron, sauronarms, ring1, ring2, ring3, fr1, fr2, fr3, aimfromy, aimy, flare, fireline, lineflare, lightpoint, ambienttop, lp1, lp2, lp3, lp4;

static-var  restore_delay, shotcount, timer, lastfired, gameframe, state, statechg_DesiredState, statechg_StateChanging, firetime;

// Signal definitions
#define SIG_AIM				2
#define SIG_LIGHT			4
#define SIG_RESTORE			8


//-------------------------------CONSTANT maxaccTURRET TURNING---------------------------
// speed and maxaccare in degrees per frame (not second!)
// Jerk is the minimum velocity of the turret
// A high precision requirement can result in overshoots if desired 
// (c) CC BY NC ND Beherith mysterme@gmail.com
//#define MAX_AIMY1_VELOCITY <3.00>
#define AIMY1_maxacc <0.16>
//#define AIMY1_JERK <0.5>
//#define AIMY1_PRECISION <1.2>
//#define AIMY1_RESTORE_SPEED <1.0>

static-var timetozero, deceleratethreshold;
static-var Stunned;

static-var oldhead, aimy1delta, aimy1velocity, aimy1target, aimy1position, gameFrame1, targetswap, isfiring;


activatescr () {
	move base2 to y-axis [0] speed [20];
	move base3 to y-axis [0] speed [20];

	turn sauronarms to x-axis <0.000000> speed <85>;
	start-script SpinIdle();
	//show fireline;
	state=1;
}

deactivatescr() {
	signal SIG_AIM;
	state=0;
	//hide fireline;
	
	move base2 to y-axis [-10] speed [15];
	move base3 to y-axis [-16] speed [15];
	wait-for-move base2 along y-axis;
	wait-for-move base3 along y-axis;
	
	
	turn sauronarms to x-axis <-90.000000> speed <85>;
	turn sauron to y-axis <0> speed <35>;
	
	
	turn ring1 to x-axis <0.000000> speed <85>;
	turn ring2 to x-axis <0.000000> speed <85>;
	turn ring2 to y-axis <0.000000> speed <85>;
	turn ring3 to z-axis <0.000000> speed <85>;
	stop-spin ring1 around x-axis;
	stop-spin ring2 around x-axis;
	stop-spin ring2 around y-axis;
	stop-spin ring3 around z-axis;
	stop-spin fr1 around z-axis;
	stop-spin fr2 around z-axis;
	stop-spin fr3 around z-axis;
}


Go()
{

	set ARMORED to 0;
	if( !state )
	{
		call-script activatescr();
	}
	state = 1;
}

Stop()
{
	state = 0;
	call-script deactivatescr();
	set ARMORED to 1;

}




InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}



Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_AIM;
	start-script RequestState(1);
}
















lua_UnitScriptLight(lightIndex, count) {
	return 0;
}

Create()
{
	firetime = 75;
	oldhead = 0;
	targetswap = 0;
	state=1;
	call-script InitState();
	isfiring = 0;
	
	lastfired = get(GAME_FRAME)-200;
	shotcount = 0;
	restore_delay = 4000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	start-script SweepFire();
	start-script SpinIdle();
}


static-var  Stunned;
ExecuteRestoreAfterDelay()
{
	if (Stunned) {
        return (1);
    }
	
	//get PRINT(888);
    //signal SIG_AIM;

	gameframe = get(GAME_FRAME);
	
		//get PRINT(8888, lastfired+200, gameframe);
	
	//something is very wrong here, this loop seems to not sleep, and then just 'give up'.
	//while(lastfired+200>gameframe) {
		//gameframe = get(GAME_FRAME);
		//get PRINT(88881, lastfired+200, gameframe);
		//sleep 20;
	//}
	
		//get PRINT(88889);
    isfiring = 0;
	oldhead = -1000000;
	timer = 0;
	targetswap = 0;

	if(state==1) {
		turn sauronarms to x-axis <0.000000> speed <5>;
		turn sauron to y-axis <0> speed <35>;
		start-script SpinIdle();
	}
	
	
	
	//get PRINT(88888);
	
	return (0);	
}

RestoreAfterDelay()
{
	signal SIG_RESTORE;
	set-signal-mask SIG_RESTORE;

	set-signal-mask SIG_AIM;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}



SpinIdle() {
	spin ring1 around x-axis speed <90> accelerate <200>;
	spin ring2 around x-axis speed <60> accelerate <200>;
	spin ring2 around y-axis speed <30> accelerate <200>;
	spin ring3 around z-axis speed <30> accelerate <200>;
	spin fr1 around z-axis speed <30> accelerate <20>;
	spin fr2 around z-axis speed <20> accelerate <20>;
	spin fr3 around z-axis speed <10> accelerate <20>;
}
SpinFiring() {
	spin ring1 around x-axis speed <180> accelerate <200>;
	spin ring2 around x-axis speed <120> accelerate <200>;
	spin ring2 around y-axis speed <60> accelerate <200>;
	spin ring3 around z-axis speed <70> accelerate <200>;
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

//using incinerator code now, might be too laggy as it has waitforturns
AimPrimary(heading, pitch)
{
	if (state==0) return 0;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn sauron to y-axis heading speed <25>;
	turn sauronarms to x-axis -1*pitch speed <10>;
	if (get ABS(oldhead - heading) > 500)
	{
		targetswap = 1;
	}
	gameframe = get(GAME_FRAME);
	//get PRINT(1, lastfired, gameframe);
	//if (lastfired+firetime>gameframe) return (0);
	//lastfired = gameframe;
	
	if (get ABS(oldhead - heading) < 500)
	{
		//skip the wait just do it
		oldhead = heading;
		isfiring = 1;
		start-script RestoreAfterDelay();
		return (1);
	}
	
	wait-for-turn sauron around y-axis;
	wait-for-turn sauronarms around x-axis;
	start-script RestoreAfterDelay();
	isfiring = 1;
	oldhead = heading;
	return (1);
}



SweepFire()
{
	signal SIG_LIGHT;
	set-signal-mask SIG_LIGHT;
	while (TRUE)
	{
		gameframe = get(GAME_FRAME);
		//get PRINT(123, lastfired, gameframe, gameframe);
		//get PRINT(1235, targetswap, isfiring, timer);
		if (targetswap == 1 AND isfiring == 1 AND lastfired+firetime>gameframe)
		{
			emit-sfx 2048 from fireline;
			timer = timer + 1;
		}
		if (timer > 150)
		{
			//signal SIG_AIM;
			//timer = 0;
			start-script RestoreAfterDelay();
		}
		sleep 20;
	}
}




/*
AimPrimary(heading, pitch) {
	
	if (state==0) return (0);
	
	gameframe = get(GAME_FRAME);
	//get PRINT(lastfired, gameframe);
	//if (lastfired+firetime>gameframe) return (0);
	lastfired = gameframe;
	
	//get PRINT(1, heading, pitch);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn sauronarms to x-axis <0.000000> - pitch speed <85>;
	turn sauron to y-axis heading speed <35>;
	
	wait-for-turn sauron around y-axis;
	wait-for-turn sauronarms around x-axis;

	//sleep 30;		
	

	return (1);
}
//*/

FirePrimary()
{
	gameframe = get(GAME_FRAME);
	//get PRINT(1, lastfired, gameframe);
	//if (lastfired+firetime>gameframe) return (0);
	lastfired = gameframe;
	//get PRINT(11);
	start-script SpinFiring();
	timer = 0;
	//start-script Enlighten();
	//sleep 150;
	start-script RestoreAfterDelay();
	shotcount = shotcount + 1;
	call-script lua_UnitScriptLight(1, shotcount);
	return (1);
}

Shot1() {
	//get PRINT(111);
	//emit-sfx 1024 + 0 from lineflare;
}


/*

AimPrimary(heading, pitch) {

	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	//We can do this any time
	
	aimy1target = heading;
	aimy1delta = aimy1target - aimy1position;

	
	while( ( get ABS(aimy1delta) > AIMY1_PRECISION ) OR (get ABS(aimy1velocity) > AIMY1_JERK)){
		if (gameFrame1 != get(GAME_FRAME)){ //this is to make sure we dont get double-called, as previous aimweapon thread runs before new aimweaponthread can signal-kill previous one 
			gameFrame1 = get(GAME_FRAME);
	
			//Clamp aimy1position and aimy1delta between <-180>;<180>
			while (aimy1position >  <180>) aimy1position = aimy1position - <360>;
			while (aimy1position < <-180>) aimy1position = aimy1position + <360>;
			while (aimy1delta >  <180>) aimy1delta = aimy1delta - <360>;
			while (aimy1delta < <-180>) aimy1delta = aimy1delta + <360>;
		
			//number of frames required to decelerate to 0
			timetozero = get ABS(aimy1velocity) / AIMY1_maxacc;
			
			//distance from target where we should start decelerating, always 'positive'
			//pos = t * v - (t*(t-1)*a/2)
			deceleratethreshold = timetozero * (get ABS(aimy1velocity)) - (timetozero * (timetozero - 1) * AIMY1_maxacc/ 2); 
			
			//get PRINT ( aimy1delta , deceleratethreshold, aimy1velocity, timetozero );
			
			if (get ABS(aimy1delta) <= deceleratethreshold){ //we need to decelerate
				if (aimy1velocity > 0) aimy1velocity = aimy1velocity - AIMY1_maxacc;
				else 				   aimy1velocity = aimy1velocity + AIMY1_maxacc;
			}	
			else //we need to accelerate
			{
				if (aimy1delta > 0) aimy1velocity = get MIN(       MAX_AIMY1_VELOCITY, aimy1velocity + AIMY1_maxacc); 
				else                aimy1velocity = get MAX((-1) * MAX_AIMY1_VELOCITY, aimy1velocity - AIMY1_maxacc);
			}
			
			//Apply jerk at very low velocities
			if (get ABS(aimy1velocity) < AIMY1_JERK){
				if ((aimy1delta >        AIMY1_JERK)) aimy1velocity =        AIMY1_JERK;
				if ((aimy1delta < (-1) * AIMY1_JERK)) aimy1velocity = (-1) * AIMY1_JERK;
			}
			
			aimy1position = aimy1position + aimy1velocity; 
			turn sauron to y-axis aimy1position now;
			aimy1delta = aimy1target - aimy1position ; 	
			
			
			turn sauronarms to x-axis 0-pitch now;
		}
		sleep 30;		
	}
	
	start-script RestoreAfterDelay();

	aimy1velocity = 0;
	return (1);
}//*/





AimFromPrimary(piecenum)
{
	piecenum = aimfromy;
}


QueryPrimary(piecenum)
{
	piecenum = lineflare;
}




SweetSpot(piecenum)
{
	piecenum = aimy;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode flare type BITMAPONLY;
		explode sauron type BITMAPONLY;
		explode sauronarms type BITMAPONLY;
		explode flare type BITMAPONLY;
		explode fireline type BITMAPONLY;
		explode lineflare type BITMAPONLY;
		explode fr1 type BITMAPONLY;
		explode fr2 type BITMAPONLY;
		explode fr3 type BITMAPONLY;
		explode ring1 type FIRE | SMOKE | FALL;;
		explode ring2 type FIRE | SMOKE | FALL;;
		explode ring3 type FIRE | SMOKE | FALL;
		explode lightpoint type BITMAPONLY;
		explode ambienttop type BITMAPONLY;
		explode aimfromy type BITMAPONLY;
		explode aimy type BITMAPONLY;
		explode lp1 type BITMAPONLY;
		explode lp2 type BITMAPONLY;
		explode lp3 type BITMAPONLY;
		explode lp4 type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode flare type FIRE | SMOKE | FALL;
		explode sauron type FIRE | SMOKE | FALL;
		explode sauronarms type FIRE | SMOKE | FALL;
		explode flare type FIRE | SMOKE | FALL;
		explode fireline type FALL;
		explode lineflare type FIRE | SMOKE | FALL;
		explode fr1 type FIRE | SMOKE | FALL;
		explode fr2 type FIRE | SMOKE | FALL;
		explode fr3 type FIRE | SMOKE | FALL;
		explode ring1 type FIRE | SMOKE | FALL;
		explode ring2 type FIRE | SMOKE | FALL;
		explode ring3 type FIRE | SMOKE | FALL;
		explode lightpoint type FALL;
		explode ambienttop type FIRE | SMOKE | FALL;
		explode aimfromy type FIRE | SMOKE | FALL;
		explode aimy type FALL;
		explode lp1 type FIRE | SMOKE | FALL;
		explode lp2 type FALL;
		explode lp3 type FIRE | SMOKE | FALL;
		explode lp4 type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode sauron type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode sauronarms type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode fireline type EXPLODE_ON_HIT | SMOKE | FALL;
		explode lineflare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode fr1 type FIRE | SMOKE | FALL;
		explode fr2 type FIRE | SMOKE | FALL;
		explode fr3 type FIRE | SMOKE | FALL;
		explode ring1 type FIRE | SMOKE | FALL;
		explode ring2 type FIRE | SMOKE | FALL;
		explode ring3 type FIRE | SMOKE | FALL;
		explode lightpoint type FIRE | SMOKE | FALL;
		explode ambienttop type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode aimfromy type FIRE | SMOKE | FALL;
		explode aimy type FIRE | SMOKE | FALL;
		explode lp1 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode lp2 type SMOKE | FALL;
		explode lp3 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode lp4 type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL;
		explode sauron type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode sauronarms type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL;
		explode fireline type EXPLODE_ON_HIT | FIRE | FALL;
		explode lineflare type EXPLODE_ON_HIT | FIRE | FALL;
		explode fr1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode fr2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode fr3 type EXPLODE_ON_HIT | FIRE | FALL;
		explode ring1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode ring2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode ring3 type EXPLODE_ON_HIT | FIRE | FALL;
		explode lightpoint type EXPLODE_ON_HIT | FIRE | FALL;
		explode ambienttop type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode aimfromy type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode aimy type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lp1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode lp2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode lp3 type EXPLODE_ON_HIT | FIRE | FALL;
		explode lp4 type EXPLODE_ON_HIT | FIRE | FALL;
		return(corpsetype);

}
