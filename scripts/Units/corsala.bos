
#include "../recoil_common_includes.h"

piece  flare1, flare2, turret, base, sleeve, barrel1, barrel2,
       wake1, wake2, exhaust1, exhaust2, exhaust3, aimpoint;

static-var  restore_delay, gun_1;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_MOVE 1


#define VD_PIECE1 wake1
#define VD_PIECE2 wake2
#define VD_AMPHIBIOUS
#define VD_DIRTCEG 1024 + 1
#include "../vehicle_dirt_cegs.h"

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100
#define RECOIL_POWER 10000
#include "../unit_hitbyweaponid_and_smoke.h"


#define TB_BASE base 
#define TB_TURNRATE <20.0> 
#define TB_TILT_X <0.15>
#define TB_BANK_Z <0.15> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"

Create()
{
	hide wake2;
	hide wake1;
	hide flare2;
	hide flare1;
	gun_1 = 0;
	restore_delay = 3000;
	turn exhaust1 to x-axis <-45> now;
	turn exhaust2 to x-axis <-90> now;
	turn exhaust3 to x-axis <-135> now;
	call-script TB_Init();
	SLEEP_UNTIL_UNITFINISHED;
}


SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.0> speed <65.0>;
	turn sleeve to x-axis <0.0> speed <35.0>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	start-script Vehicle_Dirt_Ceg();
	START_TILTBANK;
}

StopMoving()
{
  	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <150.0>; //<75.0>
	turn sleeve to x-axis <0.0> - pitch speed <45.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FlameLight()
{

	turn exhaust2 to x-axis <0> now;
	emit-sfx 1024 + 2 from exhaust2;
	sleep 32;
	turn exhaust2 to x-axis <-20> now;
	emit-sfx 1024 + 2 from exhaust2;
	sleep 32;
	turn exhaust2 to x-axis <-40> now;
	emit-sfx 1024 + 2 from exhaust2;
	sleep 32;
	turn exhaust2 to x-axis <-60> now;
	emit-sfx 1024 + 2 from exhaust2;
	sleep 32;
	turn exhaust2 to x-axis <-80> now;
	emit-sfx 1024 + 2 from exhaust2;
	sleep 32;
	turn exhaust2 to x-axis <-100> now;
	emit-sfx 1024 + 2 from exhaust2;
	sleep 32;
	turn exhaust2 to x-axis <-120> now;
	emit-sfx 1024 + 2 from exhaust2;
	sleep 32;
	turn exhaust2 to x-axis <-140> now;
	emit-sfx 1024 + 2 from exhaust2;
	sleep 32;
	turn exhaust2 to x-axis <-160> now;
	emit-sfx 1024 + 2 from exhaust2;
	sleep 32;
	turn exhaust2 to x-axis <-180> now;
	emit-sfx 1024 + 2 from exhaust2;
	sleep 32;

}

FireWeapon1()
{

	if( gun_1 == 0 )
	{
		//move barrel1 to z-axis [-3] speed [9];
		start-script FlameLight();
		//emit-sfx 1024 + 0 from flare1;
		//sleep 334;
		//wait-for-move barrel1 along z-axis;
		//move barrel1 to z-axis [0.0] speed [4.5];
	}
	if( gun_1 == 1 )
	{
		//move barrel2 to z-axis [-3] speed [9];
		start-script FlameLight();
		//emit-sfx 1024 + 0 from flare2;
		//sleep 334;
		//wait-for-move barrel2 along z-axis;
		//move barrel2 to z-axis [0.0] speed [4.5];
	}
	//sleep 234;
	gun_1 = !gun_1;

}

QueryWeapon1(pieceIndex)
{
	pieceIndex = gun_1;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimpoint;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
