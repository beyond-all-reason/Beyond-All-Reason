#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, triparent, x, z, lthrust, llthrust, rthrust, rrthrust, ring1, ring2, ring3, ringlight, fireline, lineflare, wingr, wingl, wingbr, wingbl;
static-var maxSpeed, currentSpeed, shotcount, timer, isfiring;



//fakeupright
#define FAKE_UPRIGHT_REFERENCE		1
#define FAKE_UPRIGHT_TARGET_triparent	2
#define FAKE_UPRIGHT_TARGET_CHILD	3	//piece to make upright
#define FAKE_UPRIGHT_X				4
#define FAKE_UPRIGHT_Z				5





#define BASEPIECE base
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#define SIG_STRAFE 2










//todo: can empties be used for z and x?

//move linefire into child obj / unify to reduce piece bloat


FakeUprightInit() {
	move x to z-axis [1] now;
	move z to x-axis [-1] now;
	turn lineflare to x-axis <-90> now;
}

FakeUprightTurn() {
	var angle_x, angle_z, dy_x, dy_z;
	dy_x = GET PIECE_Y(x) - GET PIECE_Y(base);
	dy_z = GET PIECE_Y(z) - GET PIECE_Y(base);
	angle_x = GET ATAN(dy_x, GET POW(65536 - GET POW(dy_x, 131072), 32768));
	angle_z = GET ATAN(dy_z, GET POW(65536 - GET POW(dy_z, 131072), 32768));
	turn triparent to x-axis angle_x now;
	turn triparent to z-axis angle_z now;
}

DoBarrelRoll() {
	turn base to z-axis <240.054945> speed <120.027473>;
	wait-for-turn base around z-axis;
	turn base to z-axis <120.027473> speed <180.043956>;
	wait-for-turn base around z-axis;
	turn base to z-axis <0.000000> speed <120.027473>;
}

lua_UnitScriptLight(lightIndex, count)
{
	return 0;
}


Create()
{
	call-script FakeUprightInit();
	turn fireline to x-axis <115> now;
	shotcount = 0;
	timer = 0;
	isfiring = 0;
	//hide lthrust;
	//hide llthrust;
	//hide rthrust;
	//hide rrthrust;

}

Activate()
{
	show rthrust;
	show rrthrust;
	show lthrust;
	show llthrust;
	spin ring1 around x-axis speed <60> accelerate <200>;
	spin ring2 around x-axis speed <40> accelerate <200>;
	spin ring2 around y-axis speed <30> accelerate <200>;
	spin ring3 around z-axis speed <20> accelerate <200>;
	
	turn wingr to z-axis <-25> speed <30>;
	turn wingl to z-axis <25> speed <30>;

}

Deactivate()
{
	hide rthrust;
	hide rrthrust;
	hide lthrust;
	hide llthrust;
	stop-spin ring1 around x-axis;
	stop-spin ring2 around x-axis;
	stop-spin ring2 around y-axis;
	stop-spin ring3 around z-axis;
	move wingr to z-axis [0] speed [30];
	move wingl to z-axis [0] speed [30];
	move wingbr to z-axis [0] speed [30];
	move wingbl to z-axis [0] speed [30];
	
	turn wingr to z-axis <0> speed <30>;
	turn wingl to z-axis <0> speed <30>;


	
	turn ring1 to x-axis <0> speed <60>;
	turn ring2 to x-axis <0> speed <60>;
	turn ring2 to y-axis <0> speed <60>;
	turn ring3 to z-axis <0> speed <60>;
	
}

StrafeFire() {

	signal SIG_STRAFE;
	set-signal-mask SIG_STRAFE;
	
	
	//emit-sfx 1024 + 0 from lineflare;
	shotcount = shotcount + 1;
	call-script lua_UnitScriptLight(1, shotcount);


	call-script FakeUprightTurn();

	while (isfiring == 1) {
		timer = timer + 1;
		if (timer<65) {
			
			//this might need a modulus type limiter for only running every X frames?
			emit-sfx 2048+1 from fireline;
			call-script FakeUprightTurn();
			//get PRINT(timer);
			sleep 1;
		} else {
			spin ring1 around x-axis speed <90> accelerate <200>;
			spin ring2 around x-axis speed <60> accelerate <200>;
			spin ring2 around y-axis speed <30> accelerate <200>;
			spin ring3 around z-axis speed <30> accelerate <200>;
			timer = 0;
			isfiring = 0;
		}
	}
}



FirePrimary() {

	//signal SIG_STRAFE;
	isfiring = 1;
	start-script StrafeFire();

	move wingr to z-axis [5] speed [15];
	move wingl to z-axis [5] speed [15];
	move wingbr to z-axis [-8] speed [15];
	move wingbl to z-axis [-8] speed [15];
	turn wingr to y-axis <10> speed <15>;
	turn wingbr to y-axis <-20> speed <15>;
	turn wingbr to z-axis <-10> speed <15>;
	turn wingl to y-axis <-10> speed <15>;
	turn wingbl to y-axis <20> speed <15>;
	turn wingbl to z-axis <10> speed <15>;


	spin ring1 around x-axis speed <180> accelerate <200>;
	spin ring2 around x-axis speed <120> accelerate <200>;
	spin ring2 around y-axis speed <60> accelerate <200>;
	spin ring3 around z-axis speed <70> accelerate <200>;
	emit-sfx 4096 + 2 from base;
	sleep 2900;

	move wingr to z-axis [0] speed [20];
	move wingl to z-axis [0] speed [20];
	move wingbr to z-axis [0] speed [20];
	move wingbl to z-axis [0] speed [20];
	turn wingr to y-axis <0> speed <20>;
	turn wingbr to y-axis <0> speed <20>;
	turn wingl to y-axis <0> speed <20>;
	turn wingbl to y-axis <0> speed <20>;
	wait-for-turn wingr around y-axis;
	turn wingbr to z-axis <0> speed <20>;
	turn wingbl to z-axis <0> speed <20>;
	
	if (Rand(0,20)==20) {
		start-script DoBarrelRoll();
	}


	return 0;

}
Shot1(){
	return 0;
}

AimPrimary() {
	return 0;
}
QueryPrimary(piecenum)
{
	piecenum = fireline;
}

QuerySecondary(piecenum)
{
	piecenum = fireline;
}
AimSecondary(h,p) {
	return (0);
}

/*
FireSecondary() {
	signal SIG_STRAFE;
//deny reaiming during firing?
//barrel roll?
	isfiring = 1;

	spin ring1 around x-axis speed <90> accelerate <200>;
	spin ring2 around x-axis speed <60> accelerate <200>;
	spin ring2 around y-axis speed <30> accelerate <200>;
	spin ring3 around z-axis speed <30> accelerate <200>;
	//light
	emit-sfx 1024 + 1 from coneflare;
	
	
	
	shotcount = shotcount + 1;
	emit-sfx 1024 + 0 from coneflare;
	call-script lua_UnitScriptLight(1, shotcount);

	return (1);
}

Shot2() {
	//start-script StrafeFire();
}

AimSecondary(heading, pitch)
{
	if (isfiring==0 OR TRUE) {

		//turn firecone to x-axis 0 - pitch speed <500>;
		//turn firecone to y-axis heading speed <500>;
		//wait-for-turn firecone around x-axis;
		//wait-for-turn firecone around y-axis;
		return (1);
	} else {
		return (0);
	}
}

QuerySecondary(piecenum)
{
	piecenum = firecone;
}
//*/


SweetSpot(piecenum)
{
	piecenum = base;
}






//vtol only?
MoveRate0()
{
//0
	spin ring1 around x-axis speed <60> accelerate <200>;
	spin ring2 around x-axis speed <40> accelerate <200>;
	spin ring2 around y-axis speed <30> accelerate <200>;
	spin ring3 around z-axis speed <20> accelerate <200>;

}

MoveRate1()
{
//1/3rds

	spin ring1 around x-axis speed <60> accelerate <200>;
	spin ring2 around x-axis speed <40> accelerate <200>;
	spin ring2 around y-axis speed <20> accelerate <200>;
	spin ring3 around z-axis speed <20> accelerate <200>;

}

MoveRate2()
{
//2/3rds
	spin ring1 around x-axis speed <60> accelerate <200>;
	spin ring2 around x-axis speed <40> accelerate <200>;
	spin ring2 around y-axis speed <20> accelerate <200>;
	spin ring3 around z-axis speed <20> accelerate <200>;

}

MoveRate3()
{
//landing?
	spin ring1 around x-axis speed <60> accelerate <200>;
	spin ring2 around x-axis speed <40> accelerate <200>;
	spin ring2 around y-axis speed <20> accelerate <200>;
	spin ring3 around z-axis speed <20> accelerate <200>;

}








Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
	corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
	corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return corpsetype;
}
