#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, bturret, bsleeve, blbarrel, brbarrel, fturret, fsleeve, flbarrel, frbarrel, fin, blflare, brflare, flflare, frflare, wake1;

static-var  gun_1, gun_2, restore_delay, oldheading;


// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8
#define SIG_STEER			16


#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*5;
			turn base to z-axis rockAng speed rockSpeed*5;
			wait-for-turn base around x-axis;
			wait-for-turn base around z-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

Steering(heading, steery, currentspeed)
{
	//signal SIG_MOVE;
	//set-signal-mask SIG_MOVE;
	while(1)
	{
		heading = get HEADING;
		steery = (oldheading - heading)*2;
		turn fin to y-axis steery speed <60>;
		sleep 100;
		oldheading = heading;
	}
}



Create()
{
	hide wake1;
	hide flflare;
	hide frflare;
	hide blflare;
	hide brflare;
	gun_1 = 0;
	gun_2 = 0;
	restore_delay = 3000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script RockOnWaves();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn fturret to y-axis <0.> speed <90.>;
	turn bturret to y-axis <0.> speed <90.>;
	turn fturret to x-axis <0.> speed <90.>;
	turn bturret to x-axis <0.> speed <90.>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script Steering();
	var waketime;
	while( TRUE )
	{
		emit-sfx 1024 + 0 from wake1;
		waketime = (get CURRENT_SPEED) * 80 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 7500 / waketime;
	}
}

boatposition(speedCurrent, maxSpeed)
{
	speedCurrent = (get CURRENT_SPEED);
	maxSpeed = (get MAX_SPEED);
	speedCurrent = speedCurrent * 100 / maxSpeed;
	if (speedCurrent > 50) turn base to x-axis <45> speed <30>;
	if (speedCurrent < 50) turn base to x-axis <0> speed <30>;
}


StopMoving()
{
	signal SIG_MOVE;
	return (0);
	
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn fturret to y-axis heading speed <270.>;
	turn fturret to x-axis -1*pitch speed <150.>;
	wait-for-turn fturret around y-axis;
	wait-for-turn fturret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move flbarrel to z-axis [-1.] speed [500.];
		wait-for-move flbarrel along z-axis;
		move flbarrel to z-axis [0.] speed [5.];
		show flflare;
		sleep 150;
		hide flflare;
	}
	if( gun_1 == 1 )
	{
		move frbarrel to z-axis [-1.] speed [500.];
		wait-for-move frbarrel along z-axis;
		move frbarrel to z-axis [0.] speed [5.];
		show frflare;
		sleep 150;
		hide frflare;
	}
	++gun_1;
	if( gun_1 == 2 )
	{
		gun_1 = 0;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = fsleeve;
	return (0);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn bturret to y-axis heading speed <270.>;
	turn bturret to x-axis -1*pitch speed <150.>;
	wait-for-turn bturret around y-axis;
	wait-for-turn bturret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		move blbarrel to z-axis [-1.] speed [500.];
		wait-for-move blbarrel along z-axis;
		move blbarrel to z-axis [0.] speed [5.];
		show blflare;
		sleep 150;
		hide blflare;
	}
	if( gun_2 == 1 )
	{
		move brbarrel to z-axis [-1.] speed [500.];
		wait-for-move brbarrel along z-axis;
		move brbarrel to z-axis [0.] speed [5.];
		show brflare;
		sleep 150;
		hide brflare;
	}
	++gun_2;
	if( gun_2 == 2 )
	{
		gun_2 = 0;
	}
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = bsleeve;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flflare;
	}
	if( gun_1 == 1 )
	{
		piecenum = frflare;
	}
	return (0);
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = blflare;
	}
	if( gun_2 == 1 )
	{
		piecenum = brflare;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode fturret type BITMAPONLY | NOHEATCLOUD;
		explode flbarrel type BITMAPONLY | NOHEATCLOUD;
		explode frbarrel type BITMAPONLY | NOHEATCLOUD;
		explode bturret type BITMAPONLY | NOHEATCLOUD;
		//explode flare21 type BITMAPONLY | NOHEATCLOUD;
		//explode flare22 type BITMAPONLY | NOHEATCLOUD;
		//explode turret1 type BITMAPONLY | NOHEATCLOUD;
		//explode abarrela type BITMAPONLY | NOHEATCLOUD;
		//explode flare11 type BITMAPONLY | NOHEATCLOUD;
		//explode abarrelb type BITMAPONLY | NOHEATCLOUD;
		//explode flare12 type BITMAPONLY | NOHEATCLOUD;
		//explode flare3 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode fturret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode frbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare21 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare22 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bturret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode abarrela type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare11 type FALL | NOHEATCLOUD;
		//explode abarrelb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare12 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode fturret type SMOKE | FALL | NOHEATCLOUD;
		explode flbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare21 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode frbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare22 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bturret type SMOKE | FALL | NOHEATCLOUD;
		//explode abarrela type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare11 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode abarrelb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare12 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode wake1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare3 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode fturret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode frbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare21 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare22 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bturret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode abarrela type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare11 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode abarrelb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare12 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode wake1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
