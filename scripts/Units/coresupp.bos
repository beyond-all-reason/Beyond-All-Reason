
#include "../recoil_common_includes.h"

piece  base, bturret, bsleeve, blbarrel, brbarrel, fturret, fsleeve, flbarrel, frbarrel, fin, blflare, brflare, flflare, frflare, wake1;

static-var  gun_1, gun_2, restore_delay, oldheading;


// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512
#define SIGNAL_MOVE 1


#define RB_MASS 10
#define RB_LENGTH 5
#define RB_WIDTH 3
#define RB_PITCH_ACCELERATION 10
#define RB_ROLL_ACCELERATION 8
#define RB_RECOIL_ENERGY_2 500
#define RB_WAKE_PIECE wake1
#define RB_WAKE_CEG 1024 + 0
#define RB_IDLE_KICK 10000

#include "../bar_ships_common.h"


Steering(heading, steery, currentspeed)
{
	//signal SIGNAL_MOVE;
	//set-signal-mask SIGNAL_MOVE;
	while(1)
	{
		heading = get HEADING;
		steery = (oldheading - heading)*2;
		turn fin to y-axis steery speed <60>;
		sleep 100;
		oldheading = heading;
	}
}



Create()
{
	hide wake1;
	hide flflare;
	hide frflare;
	hide blflare;
	hide brflare;
	gun_1 = 0;
	gun_2 = 0;
	restore_delay = 3000;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn fturret to y-axis <0.> speed <90.>;
	turn bturret to y-axis <0.> speed <90.>;
	turn fturret to x-axis <0.> speed <90.>;
	turn bturret to x-axis <0.> speed <90.>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	start-script Steering();
}



StopMoving()
{
	signal SIGNAL_MOVE;
	return (0);
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn fturret to y-axis heading speed <270.>;
	turn fturret to x-axis -1*pitch speed <150.>;
	wait-for-turn fturret around y-axis;
	wait-for-turn fturret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	if( gun_1)
	{
		move frbarrel to z-axis [-1.] speed [500.];
		wait-for-move frbarrel along z-axis;
		move frbarrel to z-axis [0.] speed [5.];
	}
	else
	{
		move flbarrel to z-axis [-1.] speed [500.];
		wait-for-move flbarrel along z-axis;
		move flbarrel to z-axis [0.] speed [5.];
	}
	gun_1 = !gun_1;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = fsleeve;
	return (0);
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	turn bturret to y-axis heading speed <270.>;
	turn bturret to x-axis -1*pitch speed <150.>;
	wait-for-turn bturret around y-axis;
	wait-for-turn bturret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	if( gun_2)
	{
		move brbarrel to z-axis [-1.] speed [500.];
		wait-for-move brbarrel along z-axis;
		move brbarrel to z-axis [0.] speed [5.];
	}
	else
	{
		move blbarrel to z-axis [-1.] speed [500.];
		wait-for-move blbarrel along z-axis;
		move blbarrel to z-axis [0.] speed [5.];
	}
	gun_2 = !gun_2;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = bsleeve;
	return (0);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flflare + gun_1;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = blflare + gun_2;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode fturret type BITMAPONLY | NOHEATCLOUD;
		explode flbarrel type BITMAPONLY | NOHEATCLOUD;
		explode frbarrel type BITMAPONLY | NOHEATCLOUD;
		explode bturret type BITMAPONLY | NOHEATCLOUD;
		
		
		
		
		
		
		
		
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode fturret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode frbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		
		explode bturret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		
		
		
		
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode fturret type SMOKE | FALL | NOHEATCLOUD;
		explode flbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		explode frbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		explode bturret type SMOKE | FALL | NOHEATCLOUD;
		
		
		
		
		
		
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode fturret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode frbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		
		explode bturret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		
		
		
		
		
		
	return corpsetype;
}
