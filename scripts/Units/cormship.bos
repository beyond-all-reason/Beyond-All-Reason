
#include "../recoil_common_includes.h"

piece  base, doorl, doorr, launcher, flare1, wake, bow, turret, sleeve, flare2, dish ;

static-var  restore_delay, gun_1, oldHead;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM3 1024


#define RB_MASS 40
#define RB_LENGTH 8
#define RB_WIDTH 3
#define RB_PITCH_ACCELERATION 10
#define RB_ROLL_ACCELERATION 8
#define RB_RECOIL_ENERGY_1 700
#define RB_RECOIL_ENERGY_3 250
#define RB_WAKE_PIECE wake
#define RB_WAKE_CEG 1024 + 0
#define RB_BOWSPLASH_PIECE bow
#define RB_BOWSPLASH_CEG 1024 + 1

#include "../bar_ships_common.h"


Create()
{
	hide bow;
	hide wake;
	hide flare2;
	hide flare1;
	gun_1 = flare1;
	restore_delay = 3000;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
	spin dish around y-axis speed <150.0>;
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 3;
}

abaim()
{
	sleep 4000;
	signal SIGNAL_AIM3;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.0> speed <70.0>;
	turn sleeve to x-axis <0.0> speed <30.0>;

	turn launcher to x-axis <0> speed <90>;
	wait-for-turn launcher around x-axis;

	turn doorr to z-axis <0> speed <180>;
	turn doorl to z-axis <0> speed <180>;
	wait-for-turn doorr around z-axis;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

Activate()
{
	spin dish around y-axis speed <150.0>;
}

Deactivate()
{
	spin dish around y-axis speed <0.0>;
}



StartMoving(reversing)
{
}

StopMoving()
{
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;

	turn doorr to z-axis <-90> speed <180>;
	turn doorl to z-axis <90> speed <180>;
	wait-for-turn doorr around z-axis;
	turn launcher to x-axis <0> - pitch speed <90>;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM3;
	set-signal-mask SIGNAL_AIM3;
	turn turret to y-axis heading speed <170.0>;
	turn sleeve to x-axis <0.0> - pitch speed <130.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script abaim();
	return (1);
}
/*
FireWeapon2()
{
	return (1);
}
*/

FireWeapon1()
{
	gun_1 = flare1;
	sleep 100;
	RB_RECOILBOAT(0, RB_RECOIL_ENERGY_1);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = launcher;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = sleeve;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare1;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flare2;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode launcher type BITMAPONLY | NOHEATCLOUD;
		explode dish type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type FALL | NOHEATCLOUD;
		explode launcher type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode launcher type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode launcher type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
