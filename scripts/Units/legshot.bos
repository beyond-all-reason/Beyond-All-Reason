#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  

legThighR,
legTibiaR,
footR,
legShinR,
legTopPlateR,
legBottomPlateR,
hip,
torso,
gunSleeve,
topBarrel,
rightPlate,
leftPlate,
bottomBarrel,
logoPlate,
legThighL,
legTibiaL,
footL,
legShinL,
legTopPlateL,
legBottomPlateL,
topFlare,
bottomFlare,
torsoPivot;

static-var  bMoving, bAiming, restore_delay, wpn1_lasthead, currentSpeed, movespeed, tdamage, shieldup, whichBarrel;

static-var  animSpeed, maxSpeed, animFramesPerKeyframe, isMoving;
// Signal definitions
#define SIG_AIM				4
#define SIG_WALK			2
#define SIGNAL_REPAIR		16

#define SIGNAL_MOVE 1
Walk() {
	set-signal-mask SIGNAL_MOVE;
	if (isMoving) { //Frame:1
			turn footL to x-axis <-5.895280> speed <14.507078> / animSpeed; 
			turn footR to x-axis <9.359024> speed <49.413567> / animSpeed; 
			turn hip to y-axis <5.006438> speed <17.066850> / animSpeed; 
			turn legShinL to x-axis <2.684752> speed <34.687640> / animSpeed; 
			turn legShinR to x-axis <6.606368> speed <41.006108> / animSpeed; 
			turn legThighL to x-axis <16.336235> speed <36.996744> / animSpeed; 
			turn legThighR to x-axis <-10.417921> speed <50.579250> / animSpeed; 
			turn legTibiaL to x-axis <11.992794> speed <10.712341> / animSpeed; 
			turn legTibiaR to x-axis <-10.172156> speed <51.733483> / animSpeed; 
			turn torso to x-axis <5.423766> speed <32.937640> / animSpeed; 
			turn torso to y-axis <-7.522961> speed <25.771934> / animSpeed;
			turn legThighL to y-axis <0> speed <24.939443> / animSpeed;
			turn legThighR to y-axis <0> speed <19.974545> / animSpeed; 
		sleep ((33*animSpeed) -1);
	}
	while(isMoving) {
		if (isMoving) { //Frame:3
			turn footL to x-axis <-4.928141> speed <29.014170> / animSpeed; 
			turn footR to x-axis <6.064787> speed <98.827108> / animSpeed; 
			turn hip to y-axis <3.868648> speed <34.133700> / animSpeed; 
			turn legShinL to x-axis <4.997262> speed <69.375286> / animSpeed; 
			turn legShinR to x-axis <3.872627> speed <82.012229> / animSpeed; 
			turn legThighL to x-axis <18.802684> speed <73.993488> / animSpeed; 
			turn legThighR to x-axis <-7.045971> speed <101.158512> / animSpeed; 
			turn legTibiaL to x-axis <12.706950> speed <21.424681> / animSpeed; 
			turn legTibiaR to x-axis <-6.723258> speed <103.466954> / animSpeed; 
			turn torso to x-axis <3.227924> speed <65.875273> / animSpeed; 
			turn torso to y-axis <-5.804831> speed <51.543895> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:6
			turn footL to x-axis <-23.898760> speed <569.118584> / animSpeed; 
			turn footR to x-axis <2.591741> speed <104.191379> / animSpeed; 
			turn gunSleeve to x-axis <1.149728> speed <89.393491> / animSpeed; 
			turn hip to y-axis <0.808544> speed <91.803100> / animSpeed; 
			turn legShinL to x-axis <-10.138208> speed <454.064086> / animSpeed; 
			turn legShinR to x-axis <1.478013> speed <71.838428> / animSpeed; 
			turn legThighL to x-axis <24.122384> speed <159.590990> / animSpeed; 
			turn legThighR to x-axis <-3.143027> speed <117.088309> / animSpeed; 
			turn legTibiaL to x-axis <22.223774> speed <285.504733> / animSpeed; 
			turn legTibiaR to x-axis <-2.945557> speed <113.331030> / animSpeed; 
			turn torso to x-axis <0.166361> speed <91.846883> / animSpeed; 
			turn torso to y-axis <-1.212794> speed <137.761105> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:9
			turn footL to x-axis <-28.234586> speed <130.074788> / animSpeed; 
			turn footR to x-axis <-0.346323> speed <88.141922> / animSpeed; 
			turn gunSleeve to x-axis <-1.104232> speed <67.618806> / animSpeed; 
			turn hip to y-axis <-2.535041> speed <100.307573> / animSpeed; 
			turn legShinL to x-axis <-25.335369> speed <455.914845> / animSpeed; 
			turn legShinR to x-axis <-0.135598> speed <48.408332> / animSpeed; 
			turn legThighL to x-axis <12.638264> speed <344.523612> / animSpeed; 
			turn legThighR to x-axis <0.506925> speed <109.498546> / animSpeed; 
			turn legTibiaL to x-axis <12.537940> speed <290.575022> / animSpeed; 
			turn legTibiaR to x-axis <0.445432> speed <101.729664> / animSpeed; 
			turn torso to x-axis <1.266167> speed <32.994186> / animSpeed; 
			turn torso to y-axis <3.802252> speed <150.451380> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:12
			turn footL to x-axis <-5.370492> speed <685.922823> / animSpeed; 
			turn footR to x-axis <-3.216047> speed <86.091711> / animSpeed; 
			turn gunSleeve to x-axis <0.242071> speed <40.389088> / animSpeed; 
			turn hip to y-axis <-4.990602> speed <73.666830> / animSpeed; 
			turn legShinL to x-axis <-13.670301> speed <349.952050> / animSpeed; 
			turn legShinR to x-axis <-1.156648> speed <30.631496> / animSpeed; 
			turn legThighL to x-axis <-11.631131> speed <728.081833> / animSpeed; 
			turn legThighR to x-axis <4.659167> speed <124.567262> / animSpeed; 
			turn legTibiaL to x-axis <-4.025281> speed <496.896646> / animSpeed; 
			turn legTibiaR to x-axis <4.123014> speed <110.327456> / animSpeed; 
			turn torso to x-axis <5.111095> speed <115.347849> / animSpeed; 
			turn torso to y-axis <7.494948> speed <110.780896> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:15
			turn footL to x-axis <18.225924> speed <707.892502> / animSpeed; 
			turn footR to x-axis <-5.691166> speed <74.253578> / animSpeed; 
			turn gunSleeve to x-axis <3.471716> speed <96.889364> / animSpeed; 
			turn hip to y-axis <-5.702890> speed <21.368640> / animSpeed; 
			turn legShinL to x-axis <15.005360> speed <860.269839> / animSpeed; 
			turn legShinR to x-axis <-0.990888> speed <4.972808> / animSpeed; 
			turn legThighL to x-axis <-19.098239> speed <224.013232> / animSpeed; 
			turn legThighR to x-axis <9.663627> speed <150.133825> / animSpeed; 
			turn legTibiaL to x-axis <-19.487916> speed <463.879042> / animSpeed; 
			turn legTibiaR to x-axis <8.173347> speed <121.509987> / animSpeed; 
			turn torso to x-axis <6.825493> speed <51.431914> / animSpeed; 
			turn torso to y-axis <8.576081> speed <32.433981> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:18
			turn footL to x-axis <11.446158> speed <203.392985> / animSpeed; 
			turn footR to x-axis <-6.315988> speed <18.744669> / animSpeed; 
			turn gunSleeve to x-axis <4.465990> speed <29.828215> / animSpeed; 
			turn hip to y-axis <-4.425413> speed <38.324315> / animSpeed; 
			turn legShinL to x-axis <8.384791> speed <198.617094> / animSpeed; 
			turn legShinR to x-axis <1.623132> speed <78.420581> / animSpeed; 
			turn legThighL to x-axis <-12.547007> speed <196.536943> / animSpeed; 
			turn legThighR to x-axis <15.278807> speed <168.455389> / animSpeed; 
			turn legTibiaL to x-axis <-12.369116> speed <213.564016> / animSpeed; 
			turn legTibiaR to x-axis <11.649417> speed <104.282107> / animSpeed; 
			turn torso to x-axis <4.517180> speed <69.249371> / animSpeed; 
			turn torso to y-axis <6.644345> speed <57.952076> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:21
			turn footL to x-axis <4.254114> speed <215.761322> / animSpeed; 
			turn footR to x-axis <-20.698943> speed <431.488642> / animSpeed; 
			turn gunSleeve to x-axis <1.956907> speed <75.272503> / animSpeed; 
			turn hip to y-axis <-1.600829> speed <84.737525> / animSpeed; 
			turn legShinL to x-axis <2.571060> speed <174.411907> / animSpeed; 
			turn legShinR to x-axis <-7.861254> speed <284.531569> / animSpeed; 
			turn legThighL to x-axis <-5.061444> speed <224.566887> / animSpeed; 
			turn legThighR to x-axis <23.246166> speed <239.020780> / animSpeed; 
			turn legTibiaL to x-axis <-4.780516> speed <227.658004> / animSpeed; 
			turn legTibiaR to x-axis <21.013045> speed <280.908827> / animSpeed; 
			turn torso to x-axis <0.715614> speed <114.046980> / animSpeed; 
			turn torso to y-axis <2.401141> speed <127.296120> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:24
			turn footL to x-axis <-1.598092> speed <175.566198> / animSpeed; 
			turn footR to x-axis <-32.776640> speed <362.330915> / animSpeed; 
			turn gunSleeve to x-axis <-0.855736> speed <84.379277> / animSpeed; 
			turn hip to y-axis <1.784859> speed <101.570626> / animSpeed; 
			turn legShinL to x-axis <-0.669406> speed <97.213977> / animSpeed; 
			turn legShinR to x-axis <-25.558421> speed <530.915010> / animSpeed; 
			turn legThighL to x-axis <2.211452> speed <218.186893> / animSpeed; 
			turn legThighR to x-axis <18.161497> speed <152.540083> / animSpeed; 
			turn legTibiaL to x-axis <1.982919> speed <202.903042> / animSpeed; 
			turn legTibiaR to x-axis <16.804760> speed <126.248534> / animSpeed; 
			turn torso to x-axis <0.608733> speed <3.206434> / animSpeed; 
			turn torso to y-axis <-2.677092> speed <152.347004> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:27
			turn footL to x-axis <-5.403501> speed <114.162268> / animSpeed; 
			turn footR to x-axis <-16.441831> speed <490.044268> / animSpeed; 
			turn gunSleeve to x-axis <-0.385019> speed <14.121510> / animSpeed; 
			turn hip to y-axis <4.544997> speed <82.804141> / animSpeed; 
			turn legShinL to x-axis <-1.123346> speed <13.618215> / animSpeed; 
			turn legShinR to x-axis <-21.624295> speed <118.023773> / animSpeed; 
			turn legThighL to x-axis <8.854719> speed <199.297996> / animSpeed; 
			turn legThighR to x-axis <-1.158249> speed <579.592363> / animSpeed; 
			turn legTibiaL to x-axis <7.581402> speed <167.954497> / animSpeed; 
			turn legTibiaR to x-axis <3.497015> speed <399.232346> / animSpeed; 
			turn torso to x-axis <4.216747> speed <108.240434> / animSpeed; 
			turn torso to y-axis <-6.822291> speed <124.355974> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:30
			turn footL to x-axis <-6.474430> speed <32.127852> / animSpeed; 
			turn footR to x-axis <8.013029> speed <733.645816> / animSpeed; 
			turn gunSleeve to x-axis <2.768758> speed <94.613297> / animSpeed; 
			turn hip to y-axis <5.716487> speed <35.144704> / animSpeed; 
			turn legShinL to x-axis <0.836306> speed <58.789564> / animSpeed; 
			turn legShinR to x-axis <4.006847> speed <768.934261> / animSpeed; 
			turn legThighL to x-axis <14.076632> speed <156.657407> / animSpeed; 
			turn legThighR to x-axis <-12.130552> speed <329.169095> / animSpeed; 
			turn legTibiaL to x-axis <11.116818> speed <106.062482> / animSpeed; 
			turn legTibiaR to x-axis <-10.193215> speed <410.706897> / animSpeed; 
			turn torso to x-axis <6.796920> speed <77.405181> / animSpeed; 
			turn torso to y-axis <-8.596228> speed <53.218115> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
	}
}
// Call this from StopMoving()!
StopWalking() {
	animSpeed = 20; // tune restore speed here, higher values are slower restore speeds
	turn footL to x-axis <0> speed <2359.641674> / animSpeed;
	turn footR to x-axis <0> speed <2445.486053> / animSpeed;
	turn gunSleeve to x-axis <0> speed <322.964548> / animSpeed;
	turn hip to y-axis <0> speed <338.568753> / animSpeed;
	turn legShinL to x-axis <0> speed <2867.566131> / animSpeed;
	turn legShinR to x-axis <0> speed <2563.114205> / animSpeed;
	turn legThighL to x-axis <0> speed <2426.939443> / animSpeed;
	turn legThighR to x-axis <0> speed <1931.974545> / animSpeed;
	turn legThighL to y-axis <10> speed <2000.939443> / animSpeed;
	turn legThighR to y-axis <-10> speed <2000.974545> / animSpeed;
	turn legTibiaL to x-axis <0> speed <1656.322154> / animSpeed;
	turn legTibiaR to x-axis <0> speed <1369.022990> / animSpeed;
	turn torso to x-axis <0> speed <384.492831> / animSpeed;
	turn torso to y-axis <-8.382025> speed <507.823348> / animSpeed;
	turn torso to z-axis <0> speed <-5.114343> / animSpeed;
}
// REMEMBER TO animspeed = 2 in Create() !!
UnitSpeed(){
	maxSpeed = get MAX_SPEED; // this returns cob units per frame i think
	animFramesPerKeyframe = 2; //we need to calc the frames per keyframe value, from the known animtime
	maxSpeed = maxSpeed + (maxSpeed /(2*animFramesPerKeyframe)); // add fudge
	while(TRUE){
		animSpeed = (get CURRENT_SPEED);
		if (animSpeed<1) animSpeed=1;
		animSpeed = (maxSpeed * 2) / animSpeed; 
		//get PRINT(maxSpeed, animFramesPerKeyframe, animSpeed); //how to print debug info from bos
		if (animSpeed<1) animSpeed=1;
		if (animspeed>5) animSpeed = 5;
		sleep 94;
	}
}
StartMoving(){
	signal SIGNAL_MOVE;
	animspeed = 3;
	isMoving=TRUE;
	start-script Walk();
}
StopMoving(){
	signal SIGNAL_MOVE;
	isMoving=FALSE;
	call-script StopWalking();
}


#define BASEPIECE hip
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

//#include "unit_hitbyweaponid_and_smoke.h"

HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}

// Disable armored state when 2000 damage is taken
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	signal SIGNAL_REPAIR;
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	tdamage = dmg + tdamage;
	start-script repairShield();
	if ((tdamage > 40000) AND (shieldup == 1))
	{
		// Start Animation: Break Shield; Only explode 2 pieces to reduce clutter
		explode leftPlate type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rightPlate type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode logoPlate type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		hide leftPlate;
		hide rightPlate;
		hide logoPlate;
		hide legTopPlateR;
		hide legTopPlateL;
		hide legBottomPlateL;
		hide legBottomPlateR;
		// End Animation
		
		set ARMORED to 0;
		shieldup = 0;
	}
	return (100); //return damage percent
}

// Restore this units hume shield after 20000ms / 20 seconds, restore armored state
repairShield()
{
	set-signal-mask SIGNAL_REPAIR;
	sleep 14000;
	
	// Start Animation: 5 second countdown
	show legBottomPlateR;
	emit-sfx 1024 + 1 from legBottomPlateR;
	sleep 1000;
	
	show legBottomPlateL;
	emit-sfx 1024 + 1 from legBottomPlateL;
	sleep 1000;
	
	show legTopPlateL;
	emit-sfx 1024 + 1 from legTopPlateL;
	sleep 1000;
	
	show legTopPlateR;
	emit-sfx 1024 + 1 from legTopPlateR;
	sleep 1000;
	
	show leftPlate;
	emit-sfx 1024 + 1 from leftPlate;
	sleep 1000;

	show rightPlate;
	emit-sfx 1024 + 1 from rightPlate;
	sleep 1000;

	show logoPlate;
	emit-sfx 1024 + 1 from logoPlate;
	// End Animation
	
	// Reset shield status 
	shieldup = 1;
	set ARMORED to 1;
	tdamage = 0;
}


/////////////////
// HitByWeaponId(anglex, anglez, weaponid, dmg)	// angle[x|z] is always [-500;500], damage is multiplied by 100
// {
// 	tdamage = dmg + tdamage;
// 	if ((tdamage > 50000) AND (shieldup == 1))
// 	{
// 		explode leftPlate type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;	
// 		explode rightPlate type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;	
// 		explode logoPlate type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;	
// 		hide leftPlate;
// 		hide rightPlate;
// 		hide logoPlate;
// 		set ARMORED to 0;
// 		shieldup = 0;
// 	}
// 	return (100);
// }

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	currentSpeed = 200;
	moveSpeed = get MAX_SPEED;
	animSpeed = 9;
	restore_delay = 10000;
	tdamage = 0;
	shieldup = 1;
	set ARMORED to 1;
	whichBarrel = 0;
	turn legThighL to y-axis <10> speed <2426.939443> / animSpeed;
	turn legThighR to y-axis <-10> speed <1931.974545> / animSpeed;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = 10000;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn torsoPivot to y-axis <0.000000> speed <90.000000>;
	turn gunSleeve to x-axis <0.000000> speed <90.000000>;
	wait-for-turn torsoPivot around y-axis;
	wait-for-turn gunSleeve around x-axis;
	// show leftPlate;
	// show rightPlate;
	// show logoPlate;
	tdamage = 0;	
	// set ARMORED to 1;
	// shieldup = 1;
	bAiming = FALSE;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

QueryPrimary(piecenum)
{
	piecenum = topFlare;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	bAiming = TRUE;
	turn torsoPivot to y-axis heading speed <200.000000>;
	turn gunSleeve to x-axis <0.000000> - pitch speed <90.000000>;
	wait-for-turn torsoPivot around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary(){
	if (whichBarrel == 0){
 		emit-sfx 1024 + 0 from topFlare;
		move topBarrel to z-axis [-5] speed [100];
		turn torso to y-axis <-10> speed <300>;
		wait-for-turn torso around y-axis;
		move topBarrel to z-axis [0] speed [3];
		turn torso to y-axis <0> speed <20>;
		whichBarrel = 1;
		return (0);
    }
    if (whichBarrel == 1){
 		emit-sfx 1024 + 0 from bottomFlare;
		move bottomBarrel to z-axis [-5] speed [100];
		turn torso to y-axis <-10> speed <300>;
		wait-for-turn torso around y-axis;
		move bottomBarrel to z-axis [0] speed [3];
		turn torso to y-axis <0> speed <20>;
		whichBarrel = 0;
		return (0);
    }
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode hip type BITMAPONLY | NOHEATCLOUD;
		explode legThighR type BITMAPONLY | NOHEATCLOUD;
		//explode rleg type BITMAPONLY | NOHEATCLOUD;
		//explode rfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type BITMAPONLY | NOHEATCLOUD;
		//explode lleg type BITMAPONLY | NOHEATCLOUD;
		//explode lfoot type BITMAPONLY | NOHEATCLOUD;
		explode torso type BITMAPONLY | NOHEATCLOUD;
		//explode luparm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode legThighL type BITMAPONLY | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode hip type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode legThighR type FALL | NOHEATCLOUD;
		//explode rleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type FALL | NOHEATCLOUD;
		//explode lleg type FALL | NOHEATCLOUD;
		//explode lfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type FALL | NOHEATCLOUD;
		//explode luparm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode legThighL type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode hip type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode legThighR type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lleg type SMOKE | FALL | NOHEATCLOUD;
		//explode lfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode luparm type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode legThighL type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode hip type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode legThighR type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rleg type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode rfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode lleg type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode lfoot type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode torso type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode legShinR type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode legThighL type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
