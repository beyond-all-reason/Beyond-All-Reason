
#include "../recoil_common_includes.h"

piece  base, turret, sleeve, rtbarrel, ltbarrel, lempslv, lempbarrel, rempslv, rempbarrel, rlauncher, llauncher,
flare1, flare2, flare3, flare4, flare5, flare7, spark_emit1, spark_emit2;

static-var  moveSpeed, currentSpeed, animSpeed, restore_delay, currentBarrel, currentLauncher, missiles_stockpiled;

static-var last_lempslv_heading,last_rempslv_heading;

#define SIGNAL_MOVE 1
#define SIGNAL_AIM1			2
#define SIGNAL_AIM2 512
#define SIGNAL_AIM3 1024
#define SIGNAL_AIM4 2048
#define SIGNAL_AIM5 4096

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED) * 20 / moveSpeed;
		if (currentSpeed < 4) currentSpeed = 4;
		animSpeed = 1800 / currentSpeed;
		sleep 142;
	}
}

#define BASEPIECE base
#define HITSPEED <45.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 10
#define MAXTILT 100
#include "../unit_hitbyweaponid_and_smoke.h"


#define TB_BASE base 
#define TB_TURNRATE <8.0> 
#define TB_TILT_X <0.15>
#define TB_BANK_Z <0.05> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"


static-var  Stunned;

#define KT1_PIECE_Y turret 
#define KT1_PIECE_X sleeve
#define KT1_PRECISION <3>
#define KT1_HAS_STUNNED
//#define KT1_DEBUG
#include "../kinematic_turret_1.h"

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare5;
	hide flare7;
	hide spark_emit1;
	hide spark_emit2;
	moveSpeed = get (MAX_SPEED);
	animSpeed = 100;
	currentBarrel = 0;
	missiles_stockpiled = 0;
	restore_delay = 3000;
	//large negative values to let wait-for-turn happen on first target
	last_lempslv_heading = -1000000;
	last_rempslv_heading = -1000000;
	call-script TB_Init();
	start-script KT1_Aim();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	start-script UnitSpeed();
	START_TILTBANK;
}

StopMoving()
{
  signal SIGNAL_MOVE;
	STOP_TILTBANK;
}

SetMaxReloadTime(time)
{
	restore_delay = time * 2;
}

// Stun logic needs to be looked at, the restore is usually set to unstoppable mask 0,
// which can cause problems if the unit gets a target while doing the restore animation
// not relevant for unparalyzable thor, but might be needed for other units


RestoreAfterDelay_EMP_missile()
{
	set-signal-mask SIGNAL_AIM2; //ensures restore animation is killed if this weapon is aimed
	sleep 6000; // allows the emp missile to be deployed for 6 seconds, can be adjusted for balance reasons
	turn rlauncher to x-axis <0> speed <30>;
}

RestoreAfterDelay_lEMP()
{
	set-signal-mask SIGNAL_AIM3; //ensures restore animation is killed if this weapon is aimed
	sleep restore_delay;
	//large negative values to let wait-for-turn happen on first target
	last_lempslv_heading = -1000000;
	turn lempslv to y-axis <0> speed <90>;
}

RestoreAfterDelay_rEMP()
{
	set-signal-mask SIGNAL_AIM4; //ensures restore animation is killed if this weapon is aimed
	sleep restore_delay;
	//large negative values to let wait-for-turn happen on first target
	last_lempslv_heading = -1000000;
	turn rempslv to y-axis <0> speed <90>;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned)
	{
		start-script RestoreAfterDelay_EMP_missile();
		start-script RestoreAfterDelay_lEMP();
		start-script RestoreAfterDelay_rEMP();
	}
}



//Weapon 1: Double Heavy Tesla Cannon
//===================================
AimWeapon1(heading, pitch)
{
	KT1_SET_TARGET(heading,pitch, restore_delay);
	if (KT1_CAN_FIRE) return (1);
	return (0);

}

Rock_Main_Cannon()
{
	turn base to z-axis <0> - (GET KSIN(KT1heading)) speed <50.005495>;
	turn base to x-axis <0> - (GET KCOS(KT1heading)) speed <50.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.0> speed <20.0>;
	turn base to x-axis <0.0> speed <20.0>;
}

FireSparks1()
{
		show spark_emit1;
		sleep 225;
		hide spark_emit1;
		return (1);
}

FireSparks2()
{
		show spark_emit2;
		sleep 225;
		hide spark_emit2;
		return (1);
}

FireWeapon1()
{
	start-script Rock_Main_Cannon();
	if( currentBarrel == 0 )
	{
		//show spark_emit2;
		move ltbarrel to z-axis [-2.400000] speed [500.0];
		spin ltbarrel around z-axis speed <360> accelerate <120>;
		emit-sfx 1024 + 0 from flare2;
		start-script FireSparks2();
		sleep 100;
		//hide spark_emit2;
		wait-for-move ltbarrel along z-axis;
		move ltbarrel to z-axis [0.0] speed [3.0];
		wait-for-move ltbarrel along z-axis;
		stop-spin ltbarrel around z-axis decelerate <15>;

	}
	if( currentBarrel == 1 )
	{
		//show spark_emit1;
		move rtbarrel to z-axis [-2.400000] speed [500.0];
		spin rtbarrel around z-axis speed <360> accelerate <120>;
		emit-sfx 1024 + 0 from flare1;
		start-script FireSparks1();
		sleep 100;
		//hide spark_emit1;
		wait-for-move rtbarrel along z-axis;
		move rtbarrel to z-axis [0.0] speed [3.0];
		wait-for-move rtbarrel along z-axis;
		stop-spin rtbarrel around z-axis decelerate <15>;
	}
	currentBarrel = !currentBarrel;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}

QueryWeapon1(pieceIndex)
{
	if (currentBarrel) pieceIndex = flare1;
	if (!currentBarrel) pieceIndex = flare2;
}

//Weapon 2: EMP Missile Launcher
//===================================

//functions to animate the missile tubes
//separated out to make sure signals work correctly
retract_rlauncher()
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	turn rlauncher to x-axis <0.0> speed <60.0>;
}

retract_llauncher()
{
	signal SIGNAL_AIM5;
	set-signal-mask SIGNAL_AIM5;
	turn llauncher to x-axis <0.0> speed <60.0>;
}

deploy_rlauncher()
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	turn rlauncher to x-axis <0.0> - <90.0> speed <60.0>;
}

deploy_llauncher()
{
	signal SIGNAL_AIM5;
	set-signal-mask SIGNAL_AIM5;
	turn llauncher to x-axis <0.0> - <90.0> speed <60.0>;
}

//called from gadget unit_stockpile_script.lua
//seems to get called right before the weapon fires,
// so sleep and delay the update of missiles_stockpiled variable
SetStockpile(num_stockpiled)
{
	if (num_stockpiled == 0)
	{
		start-script retract_rlauncher();
		start-script retract_llauncher();
		sleep 100;
		missiles_stockpiled = 0;
	}
	if (num_stockpiled == 1)
	{
		start-script deploy_rlauncher();
		start-script retract_llauncher();
		sleep 100;
		missiles_stockpiled = 1;
	}
	if (num_stockpiled == 2)
	{
		start-script deploy_rlauncher();
		start-script deploy_llauncher();
		sleep 100;
		missiles_stockpiled = 2;
	}
}

AimWeapon2(heading, pitch)
{
	if (missiles_stockpiled == 2)
	{
		signal SIGNAL_AIM5;
		set-signal-mask SIGNAL_AIM5;
		turn llauncher to x-axis <0.0> - <90.0> speed <60.0>;
		wait-for-turn llauncher around x-axis;
		return (1);
	}
	if (missiles_stockpiled == 1)
	{
		signal SIGNAL_AIM2;
		set-signal-mask SIGNAL_AIM2;
		turn rlauncher to x-axis <0.0> - <90.0> speed <60.0>;
		wait-for-turn rlauncher around x-axis;
		return (1);
	}
}

FireWeapon2()
{
	if (missiles_stockpiled == 2)
	{
		emit-sfx 1024 + 0 from flare3;
	}
	if (missiles_stockpiled == 1)
	{
		emit-sfx 1024 + 0 from flare4;
	}
}

AimFromWeapon2(pieceIndex)
{
	if (missiles_stockpiled == 2)
	{
		pieceIndex = flare3;
	}
	else
	{
		pieceIndex = flare4;
	}
}

QueryWeapon2(pieceIndex)
{
	if (missiles_stockpiled == 2)
	{
		pieceIndex = flare3;
	}
	else
	{
		pieceIndex = flare4;
	}
}

//Weapon 3: Left EMP
//===================================
AimWeapon3(heading, pitch)
{
	signal SIGNAL_AIM3;
	set-signal-mask SIGNAL_AIM3;

	// logic to restrict turret rotation due to unitdef maxangledif
	// maxangledif=180 = 0 to 180 degrees = 0 to 32,768
	// does no turn animation if the target heading is out of firing arc
	// out of firing arc aim calls happen during "preaiming" logic
	if ( (heading<0) )
	{
		return (0);
	}

	// values in <> are degrees per second
	// otherwise angles are in COB angular unit (cau) - There are 65536 cau in a circle
	// In general, 6 cau per frame ~= 1 degree per second
	turn lempslv to y-axis heading speed <120>;
	// if weapon will take more than 1 frame to turn to new angle, wait for turn
	if ( (get ABS(last_lempslv_heading - heading) > 720) )
	{
		// seems to take 3 frames for wait-for-turn to process
		wait-for-turn lempslv around y-axis;
	}
	last_lempslv_heading = heading;
	start-script RestoreAfterDelay_lEMP();
	return (1);
}

FireWeapon3()
{
	move lempbarrel to z-axis [-1.0] speed [100.0];
	emit-sfx 1024 + 0 from flare5;
	sleep 100;
	wait-for-move lempbarrel along z-axis;
	move lempbarrel to z-axis [0.0] speed [3.0];
	wait-for-move lempbarrel along z-axis;
}

AimFromWeapon3(pieceIndex)
{
	pieceIndex = lempslv;
}

QueryWeapon3(pieceIndex)
{
	pieceIndex = flare5;
}

//Weapon 3: Right EMP
//===================================
AimWeapon4(heading, pitch)
{
	signal SIGNAL_AIM4;
	set-signal-mask SIGNAL_AIM4;

	// logic to restrict turret rotation due to unitdef maxangledif
	// maxangledif=180 = -180 to 0 degrees = -32,768 to 0
	// does no turn animation if the target heading is out of firing arc
	// out of firing arc aim calls happen during "preaiming" logic
	if ( (heading>0) )
	{
		return (0);
	}

	// values in <> are degrees per second
	// otherwise angles are in COB angular unit (cau) - There are 65536 cau in a circle
	// In general, 6 cau per frame ~= 1 degree per second
	turn rempslv to y-axis heading speed <120>;
	// if weapon will take more than 1 frame to turn to new angle, wait for turn
	if ( (get ABS(last_rempslv_heading - heading)>720) )
	{
		// seems to take 3 frames for wait-for-turn to process
		wait-for-turn rempslv around y-axis;
	}
	last_rempslv_heading=heading;

	start-script RestoreAfterDelay_rEMP();
	return (1);
}

FireWeapon4()
{
	move rempbarrel to z-axis [-2.400000] speed [100.0];
	emit-sfx 1024 + 0 from flare7;
	sleep 100;
	wait-for-move rempbarrel along z-axis;
	move rempbarrel to z-axis [1.0] speed [3.0];
	wait-for-move rempbarrel along z-axis;
}

AimFromWeapon4(pieceIndex)
{
	pieceIndex = rempslv;
}

QueryWeapon4(pieceIndex)
{
	pieceIndex = flare7;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode ltbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rtbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ltbarrel type FALL | NOHEATCLOUD;
		explode rtbarrel type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type SMOKE | FALL | NOHEATCLOUD;
		explode ltbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rtbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ltbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rtbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
