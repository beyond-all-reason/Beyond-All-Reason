
#include "../recoil_common_includes.h"

//piece  base, dish, turret, eye, fwheel, rwheel;
piece 	chassis, dishBase, lTrack, rTrack, trackGuards, dishA, dishB, dishC, dishD, cloaklight, pointlight1, pointlight2;

static-var recently_damaged, desired_activation;

#define SIGNAL_MOVE 1
#define SIGNAL_TURNON 4
#define SIGNAL_OFF 8

#define BASEPIECE chassis
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100
#include "../unit_hitbyweaponid_and_smoke.h"


#define TB_BASE chassis 
#define TB_TURNRATE <20.0> 
#define TB_TILT_X <0.15>
#define TB_BANK_Z <0.15> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"

Create()
{
    hide cloaklight;
    hide pointlight1;
    hide pointlight2;

    move dishA to x-axis [1] now;
    move dishA to z-axis [-1] now;
    move dishB to x-axis [1] now;
    move dishB to z-axis [1] now;
    move dishC to x-axis [-1] now;
    move dishC to z-axis [1] now;
    move dishD to x-axis [-1] now;
    move dishD to z-axis [-1] now; 
    
	recently_damaged = 0;
	desired_activation = 1;
	call-script TB_Init();
	SLEEP_UNTIL_UNITFINISHED;
	start-script DamagedSmoke();

    show cloaklight;
    show pointlight1;
    show pointlight2;

    move dishA to x-axis [0] speed [3];
    move dishA to z-axis [0] speed [3];
    move dishB to x-axis [0] speed [3];
    move dishB to z-axis [0] speed [3];
    move dishC to x-axis [0] speed [3];
    move dishC to z-axis [0] speed [3];
    move dishD to x-axis [0] speed [3];
    move dishD to z-axis [0] speed [3]; 

    spin dishBase around y-axis speed <75> accelerate <1>;

}
StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}


Activate()
{
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
	desired_activation = 1;
	// if we are in this function, the unit is already on
	// implied set ACTIVATION to 1;
	// turn off if unit is in the recently_damaged state
	// this turn off action calls the Deactivate function
	if( recently_damaged == 1)
	{
		set ACTIVATION to 0;
		return(0);
	}
    spin dishBase around y-axis speed <75> accelerate <1>;
    show cloaklight;
    show pointlight1;
    show pointlight2;
	return (0);
}

Deactivate()
{
    // get PRINT(0, desired_activation,desired_activation,get GAME_FRAME);
	// no easy way to tell if an on-off action is 
	// script/gadget controlled or user controlled
	// assume a deactivate command is a user command 
	// if the unit has not been recently damaged
	// However, we need to wait a few frames, 
	// unit_paralyze_on_off deactivates this unit before it is 
	// stunned, so it is actually turned off, but we need to wait to see if the
	// unit is "damaged" by stun.
	sleep 100;
	if (recently_damaged == 0)
	{
		//set desired state if deactivated and not recently damaged
		desired_activation = 0;
	}
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
    hide cloaklight;
    hide pointlight1;
    hide pointlight2;
    stop-spin dishBase around y-axis decelerate <2>;
	return (0);
}

static-var  Stunned;
SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    start-script Deactivate();
	} else {
	    set ACTIVATION to desired_activation;
	}
}

OffOnHit()
{
	signal SIGNAL_OFF;
	set-signal-mask SIGNAL_OFF;
	recently_damaged = 1;
	set ACTIVATION to 0; // turn off unit
	sleep 8000; //hardcoded time to stay off after being hit
	recently_damaged = 0;
	set ACTIVATION to desired_activation;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode chassis     type BITMAPONLY | NOHEATCLOUD;
		explode dishA       type BITMAPONLY | NOHEATCLOUD;
		explode dishB       type BITMAPONLY | NOHEATCLOUD;
		explode dishBase   type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode chassis        type BITMAPONLY | NOHEATCLOUD;
		explode dishA      type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dishB      type FALL | NOHEATCLOUD;
		explode dishC      type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dishBase        type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode chassis type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dishA type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dishB type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode dishC type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dishBase type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode chassis type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dishA type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode dishB type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode dishC type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode dishBase type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
