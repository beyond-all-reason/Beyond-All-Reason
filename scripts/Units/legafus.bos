#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, arm1b, arm1m, arm1t, arm2b, arm2m, arm2t, arm3b, arm3m, arm3t, arm4b, arm4m, arm4t, piston1, piston2, piston3, piston4, emit;

static-var  statechg_DesiredState, statechg_StateChanging;
static-var  Stunned;


InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}


#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"
//#define ARMSPEED <8>
//#define ARMSPEED2 <8>

ArmSwing() {
  signal 4;
  set-signal-mask 4;
//  var turnAngle;
  while(TRUE) {
//    turnAngle = rand(0, <1.2>);
//	turnAngle = turnAngle +<15>;
//    turn arm1t to z-axis (0-turnAngle) speed ARMSPEED;
//	turn arm2t to x-axis (0-turnAngle) speed ARMSPEED;
//  turn arm3t to z-axis turnAngle speed ARMSPEED;
//	turn arm4t to x-axis turnAngle speed ARMSPEED;
//	turn arm1t to x-axis rand(0, <1.2>) speed ARMSPEED2;
//	turn arm2t to z-axis rand(0, <1.2>) speed ARMSPEED2;
//  turn arm3t to x-axis rand(0, <1.2>) speed ARMSPEED2;
//	turn arm4t to z-axis rand(0, <1.2>) speed ARMSPEED2;
//	wait-for-turn arm1t around z-axis;
//	wait-for-turn arm1t around x-axis;
// move away from orb
	turn arm1b to x-axis <-5> speed <15>;
	turn arm1m to x-axis <5> speed <10>;
	turn piston1 to x-axis <-5> speed <10>;
	turn arm1t to z-axis <2> speed <15>;
	turn arm2b to z-axis <-5> speed <15>;
	turn arm2m to z-axis <5> speed <10>;
	turn piston2 to z-axis <-5> speed <10>;
	turn arm2t to x-axis <2> speed <15>;
	turn arm3b to x-axis <5> speed <15>;
	turn arm3m to x-axis <-5> speed <10>;
	turn piston3 to x-axis <5> speed <10>;
	turn arm3t to z-axis <-2> speed <15>;
	turn arm4b to z-axis <5> speed <15>;
	turn arm4m to z-axis <-5> speed <10>;
	turn piston4 to z-axis <5> speed <10>;
	turn arm4t to x-axis <-2> speed <15>;
	sleep(2600);
// move towards orb
	turn arm1b to x-axis <5> speed <10>;
	turn arm1m to x-axis <-5> speed <15>;
	turn piston1 to x-axis <5> speed <12>;
	turn arm1t to z-axis <-2> speed <15>;
	turn arm2b to z-axis <5> speed <10>;
	turn arm2m to z-axis <-5> speed <15>;
	turn piston2 to z-axis <5> speed <12>;
	turn arm2t to x-axis <-2> speed <15>;
	turn arm3b to x-axis <-5> speed <10>;
	turn arm3m to x-axis <5> speed <15>;
	turn piston3 to x-axis <-5> speed <12>;
	turn arm3t to z-axis <2> speed <15>;
	turn arm4b to z-axis <-5> speed <10>;
	turn arm4m to z-axis <5> speed <15>;
	turn piston4 to z-axis <-5> speed <12>;
	turn arm4t to x-axis <2> speed <15>;
	sleep(2600);
// reset
	turn arm1b to x-axis <0> speed <10>;
	turn arm1m to x-axis <0> speed <10>;
	turn piston1 to x-axis <0> speed <10>;
	turn arm1t to z-axis <0> speed <15>;
	turn arm2b to z-axis <0> speed <10>;
	turn arm2m to z-axis <0> speed <10>;
	turn piston2 to z-axis <0> speed <10>;
	turn arm2t to x-axis <0> speed <15>;
	turn arm3b to x-axis <0> speed <10>;
	turn arm3m to x-axis <0> speed <10>;
	turn piston3 to x-axis <0> speed <10>;
	turn arm3t to z-axis <0> speed <15>;
	turn arm4b to z-axis <0> speed <10>;
	turn arm4m to z-axis <0> speed <10>;
	turn piston4 to z-axis <0> speed <10>;
	turn arm4t to x-axis <0> speed <15>;
	sleep(2600);
  }
}


Go()
{
	start-script ArmSwing();
	set ARMORED to 1;
	return (0);
}

Stop()
{
	signal 4;
	spin arm1t around y-axis speed <0.000000>;
	spin arm2t around y-axis speed <0.000000>;
	spin arm3t around y-axis speed <0.000000>;
	spin arm4t around y-axis speed <0.000000>;
	move arm1t to z-axis [0] speed [0];
	move arm2t to x-axis [0] speed [0];
    move arm3t to z-axis [0] speed [0];
	move arm4t to x-axis [0] speed [0];
	set ARMORED to 0;
	return (0);
}
Create()
{
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	call-script Go();
	return (0);

}

SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
		hide emit;
	    call-script Stop();
	} else {
		show emit;
	    call-script Go();
	}
}


RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 12 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		return (corpsetype);
	}
	corpsetype = 3;
	explode arm1t type SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode arm2t type SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
	explode arm3t type SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
	explode arm4t type SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
	return (corpsetype);
}
