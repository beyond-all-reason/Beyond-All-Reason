#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, vent, turret, sleeve, barrel1, flare1, barrel2, flare2,
       barrel3, flare3;

static-var reloading_barrel_1, reloading_barrel_2;

// Signal definitions
#define SIG_AIM_1				2
#define SIG_AIM_2				4
#define SIG_AIM_3				8

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

//-------------------------------CONSTANT ACCELERATION TURRET TURNING---------------------------
// MaxVelocity and acceleration are in degrees per frame (not second!)
// Jerk is the minimum velocity of the turret
// A high precision requirement can result in overshoots if desired 
// (c) CC BY NC ND Beherith mysterme@gmail.com
// adjustments by Itanthias
#define MAX_AIMY1_VELOCITY <1.20>
#define AIMY1_ACCELERATION <0.10>
#define AIMY1_SNAP_TOLERANCE <0.5>
#define AIMY1_PRECISION <0.5>
#define AIMY1_RESTORE_SPEED <1.0>

static-var aimy1delta, timetozero, deceleratethreshold;
static-var aimy1velocity, aimy1target, aimy1position;
static-var deltaheading, newchassisheading, chassisheading, restore_position;
static-var  Stunned;

AimControl()
{
	
	//-------------------------------CONSTANT ACCELERATION TURRET TURNING---------------------------
	while( TRUE  ){
		// only turn when not stunned
		if (Stunned == 0){

			// apply correction for chassis turning
			newchassisheading = GET 82; //get heading
			deltaheading = newchassisheading - chassisheading;
			chassisheading = newchassisheading;
			aimy1target = aimy1target - deltaheading;

			// apply aimy1target for neutral, restored, position
			if (restore_position == 1)
			{
				aimy1target = 0;
			}
	
			aimy1delta = aimy1target - aimy1position ; 	
			//Clamp angles between <-180>;<180>
			while (aimy1target >  <180>) aimy1target = aimy1target - <360>;
			while (aimy1target < <-180>) aimy1target = aimy1target + <360>;
			while (aimy1position >  <180>) aimy1position = aimy1position - <360>;
			while (aimy1position < <-180>) aimy1position = aimy1position + <360>;
			while (aimy1delta >  <180>) aimy1delta = aimy1delta - <360>;
			while (aimy1delta < <-180>) aimy1delta = aimy1delta + <360>;
			
			// Snap turret exactly to aimy1target if within snap tolerance
			if (get ABS(aimy1delta) < AIMY1_SNAP_TOLERANCE) {
				aimy1position = aimy1target;
				turn turret to y-axis aimy1position now;	

				// velocity match to chassis heading change
				if ( (restore_position == 0) ){
					aimy1velocity = (-1)*deltaheading;
					// clamp velocity to max value
					aimy1velocity = get MIN(       MAX_AIMY1_VELOCITY, aimy1velocity); 
					aimy1velocity = get MAX((-1) * MAX_AIMY1_VELOCITY, aimy1velocity);
				}
				else
				{
					aimy1velocity = 0;
				}
			}
			else
			{

				//number of frames required to decelerate to 0
				//account for chassis rotation speed
				timetozero = get ABS(aimy1velocity - deltaheading) / AIMY1_ACCELERATION;
			
				//distance from target where we should start decelerating, always 'positive'
				//pos = t * v - (t*(t-1)*a/2)
				deceleratethreshold = timetozero * (get ABS(aimy1velocity)) - (timetozero * (timetozero - 1) * AIMY1_ACCELERATION / 2); 
			
				if (get ABS(aimy1delta) <= deceleratethreshold){ //we need to decelerate
					if (aimy1velocity > 0) aimy1velocity = aimy1velocity - AIMY1_ACCELERATION;
					else 				   aimy1velocity = aimy1velocity + AIMY1_ACCELERATION;
			
				}	
				else //we need to accelerate
				{
					if (aimy1delta > 0) aimy1velocity = get MIN(       MAX_AIMY1_VELOCITY, aimy1velocity + AIMY1_ACCELERATION); 
					else                aimy1velocity = get MAX((-1) * MAX_AIMY1_VELOCITY, aimy1velocity - AIMY1_ACCELERATION);
				}

				if (get ABS(aimy1velocity) < (2 * AIMY1_SNAP_TOLERANCE) ){
					if (get ABS(aimy1delta) < AIMY1_SNAP_TOLERANCE) aimy1velocity = aimy1delta;
					//if ((aimy1delta >        AIMY1_JERK)) aimy1velocity =        AIMY1_JERK;
					//if ((aimy1delta < (-1) * AIMY1_JERK)) aimy1velocity = (-1) * AIMY1_JERK;
				}
			
				aimy1position = aimy1position + aimy1velocity; 
				turn turret to y-axis aimy1position now;
			}

		}
		sleep 30;
	}
}


static-var  Stunned;
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script RestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep 12000;
	while (Stunned) {
		sleep 1;
    }
	turn sleeve to x-axis <0.000000> speed <25.000000>;
	//restore_position = 1;
}

SmokeVents()
{
	signal 16;
	set-signal-mask 16;
	while( TRUE )
	{
		emit-sfx 257 from vent;
		sleep 100;
	}
}

Create()
{
	hide vent;
	hide flare1;
	hide flare2;
	hide flare3;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	start-script AimControl();
	start-script SmokeVents();
	//call-script InitState();
}

AimWeapon1(heading, pitch)
{

	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;

	//We can do this any time
	restore_position = 0;
	turn sleeve to x-axis <0.000000> - pitch speed <25.000000>;
	start-script RestoreAfterDelay();

	// let AimControl know what to aim at
	aimy1target = heading;
	while ( TRUE )
	{
		// condition 1, is aim good?
		aimy1delta = aimy1target - aimy1position ; 	
		if (get ABS(aimy1delta) < AIMY1_PRECISION) {
			return (1); 
		}
		sleep 1;
	}
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	aimy1target = heading;
	while ( TRUE )
	{
		// condition 1, is aim good?
		aimy1delta = aimy1target - aimy1position ; 	
		if (get ABS(aimy1delta) < AIMY1_PRECISION) {
			// condition 2, is barrel 1 reloading?
			reloading_barrel_1 = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(1));
			if (reloading_barrel_1) {
				return (1); 
			}
		}
		sleep 2;
	}
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	aimy1target = heading;
	while ( TRUE )
	{
		// condition 1, is aim good?
		aimy1delta = aimy1target - aimy1position; 	
		if (get ABS(aimy1delta) < AIMY1_PRECISION) {
			// condition 2, are barrels 1 and 2 reloading?
			reloading_barrel_1 = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(1));
			reloading_barrel_2 = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(2));
			if (reloading_barrel_1 AND reloading_barrel_2) {
				return (1);
			}
		}
		sleep 3;
	}
}

FireWeapon1()
{
	//delays other barrels from firing for 15 frames
	get WEAPON_RELOADSTATE(-2,get MAX(get GAME_FRAME + 15,get WEAPON_RELOADSTATE(2)));
	get WEAPON_RELOADSTATE(-3,get MAX(get GAME_FRAME + 15,get WEAPON_RELOADSTATE(3)));

	emit-sfx 1024 + 0 from flare1;
	move barrel1 to z-axis [-3.001648] now;
	sleep 100;
	move barrel1 to z-axis [0.000000] speed [1.000549];

}

FireWeapon2()
{
	//delays other barrels from firing for 15 frames
	get WEAPON_RELOADSTATE(-1,get MAX(get GAME_FRAME + 15,get WEAPON_RELOADSTATE(1)));
	get WEAPON_RELOADSTATE(-3,get MAX(get GAME_FRAME + 15,get WEAPON_RELOADSTATE(3)));

	emit-sfx 1024 + 0 from flare2;
	move barrel2 to z-axis [-3.001648] now;
	sleep 100;
	move barrel2 to z-axis [0.000000] speed [1.000549];

}

FireWeapon3()
{
	//delays other barrels from firing for 15 frames
	get WEAPON_RELOADSTATE(-1,get MAX(get GAME_FRAME + 15,get WEAPON_RELOADSTATE(1)));
	get WEAPON_RELOADSTATE(-2,get MAX(get GAME_FRAME + 15,get WEAPON_RELOADSTATE(2)));

	emit-sfx 1024 + 0 from flare3;
	move barrel3 to z-axis [-3.001648] now;
	sleep 100;
	move barrel3 to z-axis [0.000000] speed [1.000549];

}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

AimFromWeapon1(piecenum)
{
	piecenum = sleeve;
}

QueryWeapon1(piecenum)
{
	piecenum = flare1;
}

AimFromWeapon2(piecenum)
{
	piecenum = sleeve;
}

QueryWeapon2(piecenum)
{
	piecenum = flare2;
}

AimFromWeapon3(piecenum)
{
	piecenum = sleeve;
}

QueryWeapon3(piecenum)
{
	piecenum = flare3;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode barrel3 type BITMAPONLY | NOHEATCLOUD;
		explode flare3 type BITMAPONLY | NOHEATCLOUD;
		explode barrel1 type BITMAPONLY | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode vent type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type FALL | NOHEATCLOUD;
		explode barrel3 type FALL | NOHEATCLOUD;
		explode flare3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode vent type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode vent type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode vent type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
