
#include "../recoil_common_includes.h"

piece  ground, base, anti, antiflare, dbl, dbr, dtl, dtr, radar, blink, wake1, wake2, greendbl, greendbr, orangelight;

static-var  Stunned, oldHead, restore_delay, missiles_stockpiled;

// Signal definitions
#define SIGNAL_MOVE 1

#define SIGNAL_AIM2 512



#define RB_MASS 40
#define RB_LENGTH 8
#define RB_WIDTH 3
#define RB_PITCH_ACCELERATION 10
#define RB_ROLL_ACCELERATION 8
#define RB_WAKE_PIECE wake1
#define RB_WAKE_CEG 1024 + 1
#define RB_BOWSPLASH_PIECE wake2
#define RB_BOWSPLASH_CEG 1024 + 2

#include "../bar_ships_common.h"

Lights()
{
	while( TRUE )
	{
	    if (!Stunned) {
		    emit-sfx 1024 + 0 from blink;
		}
		sleep 2500;
	}
}


Go()
{
	spin radar around y-axis speed <-50.043956> accelerate <2>;
	return (0);
}

Stop()
{
	spin radar around y-axis speed <0.0>;
	return (0);
}

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	move dtl to x-axis [0] speed [5];
	move dbl to x-axis [0] speed [5];
	move dtr to x-axis [0] speed [5];
	move dbr to x-axis [0] speed [5];
	wait-for-move dtl along x-axis;
}
SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    call-script Stop();
	} else {
	    call-script Go();
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 3000;
	start-script ExecuteRestoreAfterDelay();
}


Create()
{
	hide wake1;
	hide wake2;
	hide blink;
	hide antiflare;
	hide ground;
	restore_delay = 3000;
	missiles_stockpiled = 0;
	hide greendbl;
	hide greendbr;
	show orangelight;

	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
	start-script Activate();
}

Activate()
{
	start-script Lights();
	start-script Go();
}

Deactivate()
{
	start-script Stop();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

StartMoving(reversing)
{

}

StopMoving()
{
}



AimWeapon1(heading, pitch)
{

	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	move dtl to x-axis [-10] speed [5];
	move dbl to x-axis [-10] speed [5];
	move dtr to x-axis [10] speed [5];
	move dbr to x-axis [10] speed [5];
	wait-for-move dtl along x-axis;
	start-script RestoreAfterDelay();
	return(1);
}



FireWeapon1()
{
	sleep 150;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = antiflare;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = antiflare;
}

lights_orange()
{
	hide greendbl;
	hide greendbr;
	show orangelight;
}

lights_green()
{
	show greendbl;
	show greendbr;
	hide orangelight;
}

SetStockpile(num_stockpiled)
{
	if (num_stockpiled == 0)
	{
		start-script lights_orange();
		sleep 100;
		missiles_stockpiled = 0;
	}
	if (num_stockpiled >= 1)
	{
		start-script lights_green();
		sleep 100;
		missiles_stockpiled = 1;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
