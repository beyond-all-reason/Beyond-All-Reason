
#include "../recoil_common_includes.h"

piece  base, ground, wake1, wake2, turret1, sleeve1, barrel11, flare11, flare12, barrel12, turret2, sleeve2, barrel21, flare21, flare22, barrel22;
		
static-var  gun_1, gun_2, restore_delay;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512
#define SIGNAL_MOVE 1


#define RB_MASS 23
#define RB_LENGTH 6
#define RB_WIDTH 3
#define RB_PITCH_SPEED 100
#define RB_PITCH_ACCELERATION 20
#define RB_ROLL_ACCELERATION 8
#define RB_WAKE_PIECE wake1
#define RB_WAKE_CEG 1024 + 0
#define RB_IDLE_KICK 10000

#define RB_BOWSPLASH_PIECE wake2
#define RB_BOWSPLASH_CEG 1024 + 1

#define RB_ROCKUNIT 60

#include "../bar_ships_common.h"

Create()
{
	hide wake2;
	hide wake1;
	hide flare22;
	hide flare21;
	hide sleeve2;
	hide flare12;
	hide flare11;
	hide sleeve1;
	hide ground;
	hide flare11;
	hide flare12;
	hide flare21;
	hide flare22;
	gun_1 = flare11;
	gun_2 = flare21;
	restore_delay = 3000;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turret1 to y-axis <0.0> speed <180.0>;
	turn sleeve1 to x-axis <0.0> speed <90.0>;

	turn turret2 to y-axis <0.0> speed <180.0>;
	turn sleeve2 to x-axis <0.0> speed <90.0>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}


StartMoving(reversing)
{
}

StopMoving()
{

}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret1 to y-axis heading speed <180.0>;
	turn sleeve1 to x-axis RB_AIMPITCHCORRECTION(heading) - pitch speed <90.0>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	if( gun_1 )
	{
		move barrel12 to z-axis [-2.0] now;
		move barrel12 to z-axis [0.0] speed [3.0];
		emit-sfx 1024 + 0 from flare12;
	}
	else
	{
		move barrel11 to z-axis [-2.0] now;
		move barrel11 to z-axis [0.0] speed [3.0];
		emit-sfx 1024 + 0 from flare11;
	}
	gun_1 = !gun_1;
}


AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret1;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare11 + gun_1;
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	turn turret2 to y-axis heading speed <180.0>;
	turn sleeve2 to x-axis RB_AIMPITCHCORRECTION(heading) - pitch speed <90.0>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Shot2()
{
	if( gun_2 )
	{
		move barrel22 to z-axis [-2.0] now;
		move barrel22 to z-axis [0.0] speed [3.0];
		emit-sfx 1024 + 0 from flare22;
	}
	else
	{
		move barrel21 to z-axis [-2.0] now;
		move barrel21 to z-axis [0.0] speed [3.0];
		emit-sfx 1024 + 0 from flare21;
	}
	gun_2 = !gun_2;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = turret2;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flare21 + gun_2;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel11 type BITMAPONLY | BITMAP1 | NOHEATCLOUD;
		explode turret1 type BITMAPONLY | BITMAP1 | NOHEATCLOUD;
		explode wake2 type BITMAPONLY | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel11 type FALL | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode barrel12 type FALL | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode barrel12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	return corpsetype;
}
