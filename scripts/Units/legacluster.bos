#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
#include "smart_weapon_select.h"


//piece base, turret, sleeve, barrel, flare;
//piece  flare1, flare2, base, turret, barrel1, barrel2, sleeves;

//pieces below
piece base,
door1Pivot,
door2Pivot,
door3Pivot,
door4Pivot,
door5Pivot,
door6Pivot,
door1,
door2,
door3,
door4,
door5,
door6,
mainStrut, supportStrut, housingStrut, sleeveHousing, sleeveBottom, sleeveTop, barrelBottom, barrelTop, flareBottom, flareTop, turretmidpoint;

static-var  turretOpen, nextBarrel, lastHeading, stunned, restoreDelay;

#define SIGNAL_AIM			1

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Create()
{
    hide flareBottom;
	hide flareTop;

	/**turn sleeveHousing to x-axis <-123> now;
	turn housingStrut to x-axis <-57> now;
	turn supportStrut to x-axis <90> now;
	move mainStrut to y-axis [-75] now;**/

	move door1Pivot to y-axis [30] now;
	move door2Pivot to y-axis [30] now;
	move door3Pivot to y-axis [30] now;
	move door4Pivot to y-axis [30] now;
	move door5Pivot to y-axis [30] now;
	move door6Pivot to y-axis [30] now;

	turn door2Pivot to y-axis <-60> now;
	turn door3Pivot to y-axis <-120> now;
	turn door4Pivot to y-axis <180> now;
	turn door5Pivot to y-axis <120> now;
	turn door6Pivot to y-axis <60> now;
	turn door1 to x-axis <90> now;
	turn door2 to x-axis <90> now;
	turn door3 to x-axis <90> now;
	turn door4 to x-axis <90> now;
	turn door5 to x-axis <90> now;
	turn door6 to x-axis <90> now;

	nextBarrel = 0;

	turretOpen = 0;
	restoreDelay = 10000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
	return (0);
	
}

openTurret(){

	turn door1 to x-axis <90> speed <250>;
	sleep 10;
	turn door2 to x-axis <90> speed <250>;
	sleep 10;
	turn door3 to x-axis <90> speed <250>;
	sleep 10;
	turn door4 to x-axis <90> speed <250>;
	sleep 10;
	turn door5 to x-axis <90> speed <250>;
	sleep 10;
	turn door6 to x-axis <90> speed <250>;
	wait-for-turn door6 around x-axis;
	//sleep 100;

	move mainStrut to y-axis [0] speed [100];
	//spin mainStrut around y-axis speed [1.25];
	
	/**turn mainStrut to y-axis <180> speed <720>;
	wait-for-turn mainStrut around y-axis;
	sleep 1;
	turn mainStrut to y-axis <0> speed <720>;
	//wait-for-turn mainStrut around y-axis;**/

	wait-for-move mainStrut along y-axis;
	//stop-spin mainStrut around y-axis;

	turn supportStrut to x-axis <0> speed <220>;
	turn housingStrut to x-axis <0> speed <140>;
	turn sleeveHousing to x-axis <0> speed <300>;
	wait-for-turn sleeveHousing around x-axis;

}

closeTurret(){
	turn sleeveHousing to x-axis <-123> speed <300>;
	turn housingStrut to x-axis <-57> speed <140>;
	turn supportStrut to x-axis <90> speed <220>;
	wait-for-turn supportStrut around x-axis;
	//sleep 100;
	move mainStrut to y-axis [-75] speed [35];
	wait-for-move mainStrut along y-axis;
	turn door1 to x-axis <0> speed <250>;
	sleep 10;
	turn door2 to x-axis <0> speed <250>;
	sleep 10;
	turn door3 to x-axis <0> speed <250>;
	sleep 10;
	turn door4 to x-axis <0> speed <250>;
	sleep 10;
	turn door5 to x-axis <0> speed <250>;
	sleep 10;
	turn door6 to x-axis <0> speed <250>;
}

Go(){
	if( !turretOpen )
	{
		call-script openTurret();
	}
	turretOpen = 1;
	set ARMORED to 0;
	return (0);
}

Stop(){
	set ARMORED to 1;
	turretOpen = 0;
	call-script closeTurret();
	return (0);	
}

ExecuteRestoreAfterDelay()
{
    if (stunned)
	{
        return (1);
    }
	set-signal-mask 0;
	turn mainStrut to y-axis <0.000000> speed <100.016484>;
	turn sleeveHousing to x-axis <0.000000> speed <50.005495>;
	wait-for-turn mainStrut around y-axis;
	wait-for-turn sleeveHousing around x-axis;
	
	start-script Stop();
}

SetStunned(State)
{
    stunned = State;
	if (!stunned)
	{
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	set-signal-mask SIGNAL_AIM;
	sleep restoreDelay;
	start-script ExecuteRestoreAfterDelay();
}

aimCommon(heading, pitch)
{
	while( turretOpen == 0 )
	{
		sleep 250;
	}
	turn supportStrut to x-axis <0> speed <50>;
	turn housingStrut to x-axis <0> speed <50>;
	turn mainStrut to y-axis heading speed <30.000000>;
	turn sleeveHousing to x-axis <0.000000> - pitch speed <90.000000>;
	wait-for-turn mainStrut around y-axis;
	wait-for-turn sleeveHousing around x-axis;
}

aimCommonHigh(heading, pitch)
{
	while( turretOpen == 0 )
	{
		sleep 250;
	}

	turn mainStrut to y-axis heading speed <30.000000>;
	turn sleeveHousing to x-axis <50.000000> - pitch speed <90.000000>;
	turn supportStrut to x-axis <-25> speed <50>;
	turn housingStrut to x-axis <-25> speed <50>;
	wait-for-turn mainStrut around y-axis;
	wait-for-turn sleeveHousing around x-axis;
}

AimPrimary(heading, pitch)
{
	start-script Go();
	
	if (AimingState != AIMING_PRIORITY)
	{
		return(0);
	}

	signal SIGNAL_AIM;
	set-signal-mask SIGNAL_AIM;
	call-script aimCommon(heading, pitch);
	start-script RestoreAfterDelay();

	// Prevent "bonus shots" while alternative weapon is reloading
	var reloading;
	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(2));
	if( reloading )
	{
		return(0);
	}

	return (1);
}

AimSecondary(heading, pitch)
{
	start-script Go();

	if (AimingState != AIMING_BACKUP)
	{
		return(0);
	}

	signal SIGNAL_AIM;
	set-signal-mask SIGNAL_AIM;

	call-script aimCommonHigh(heading, pitch);
	start-script RestoreAfterDelay();

	// Prevent "bonus shots" while alternative weapon is reloading
	var reloading;
	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(1));
	if( reloading )
	{
		return(0);
	}

	return (1);
}

AimTertiary(piecenum)
{
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = sleeveHousing;
}

AimFromSecondary(piecenum)
{
	piecenum = sleeveHousing;
}

fireCommon()
{
	if( nextBarrel == 0 )
		{
			emit-sfx 1024 + 0 from flareTop;
			move barrelTop to z-axis [-6.250000] now;
			sleep 100;
			move barrelTop to z-axis [0.000000] speed [2.500000];
		}
		if( nextBarrel == 1 )
		{
			emit-sfx 1024 + 0 from flareBottom;
			move barrelBottom to z-axis [-6.250000] now;
			sleep 100;
			move barrelBottom to z-axis [0.000000] speed [2.500000];
		}
		nextBarrel = !nextBarrel;
}

FirePrimary()
{
	call-script fireCommon();
}

FireSecondary()
{
	call-script fireCommon();
}

QueryPrimary(piecenum)
{
	if( nextBarrel == 0 )
	{
		piecenum = flareTop;
	}
	if( nextBarrel == 1 )
	{
		piecenum = flareBottom;
	}
}

QuerySecondary(piecenum)
{
	if( nextBarrel == 0 )
	{
		piecenum = flareTop;
	}
	if( nextBarrel == 1 )
	{
		piecenum = flareBottom;
	}
}

QueryTertiary(piecenum)
{
	piecenum = turretmidpoint;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode mainStrut type BITMAPONLY | NOHEATCLOUD;
		explode sleeveHousing type BITMAPONLY | NOHEATCLOUD;
		explode barrelTop type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flareTop type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode mainStrut type FALL | NOHEATCLOUD;
		explode sleeveHousing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelTop type FALL | NOHEATCLOUD;
		explode flareTop type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode mainStrut type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeveHousing type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrelTop type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flareTop type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode mainStrut type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeveHousing type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelTop type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flareTop type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
