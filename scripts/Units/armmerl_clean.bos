
#include "../recoil_common_includes.h"

piece  base, door, turret, flare;

static-var  OpenedState, restore_delay;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256
#define SIGNAL_IDLE 8


#define BASEPIECE base
#define HITSPEED <45.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 6
#define MAXTILT 100
#define RECOIL_POWER 100000
#include "../unit_hitbyweaponid_and_smoke.h"

#define TB_BASE base 
#define TB_TURNRATE <11.0> 
#define TB_TILT_X <0.15>
#define TB_BANK_Z <0.15> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"


Create()
{
	hide flare;
	OpenedState = 0;
	restore_delay = 3000;
	set ARMORED to 0;
	call-script TB_Init();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
	set-signal-mask SIGNAL_IDLE;
    if (Stunned) {
        return (1);
    }
	if (OpenedState){
		OpenedState = 0;
		set ARMORED to 0;
		turn turret to y-axis <0> speed <90>;
		wait-for-turn turret around y-axis;
		turn door to z-axis <0> speed <90>;
		wait-for-turn door around z-axis;
	}
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	signal SIGNAL_IDLE;
	set-signal-mask SIGNAL_IDLE;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;

	if (!OpenedState){
		signal SIGNAL_IDLE;
		set ARMORED to 1;
		turn door to z-axis <90> speed <90>;
		wait-for-turn door around z-axis;
		turn turret to y-axis <-90> speed <90>;
		wait-for-turn turret around y-axis;
		OpenedState = 1;
	}
	

	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
