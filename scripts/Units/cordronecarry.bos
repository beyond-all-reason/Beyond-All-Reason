
#include "../recoil_common_includes.h"

piece  ground, base, radar, nano1, nano2, wake1, wake2, blink, drone1, drone2, drone3, drone4, drone5, drone6, drone7, drone8, drone9, drone10,
		turret, launcher, flare1, flare2, flare3;

static-var  oldHead, gun_1;
static-var  Stunned;

// Signal definitions
#define SIGNAL_MOVE 1

#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512



#define RB_MASS 40
#define RB_LENGTH 8
#define RB_WIDTH 3
#define RB_PITCH_ACCELERATION 10
#define RB_ROLL_ACCELERATION 8
#define RB_WAKE_PIECE wake1
#define RB_WAKE_CEG 1024 + 1
#define RB_BOWSPLASH_PIECE wake2
#define RB_BOWSPLASH_CEG 1024 + 2

#include "../bar_ships_common.h"


Lights()
{
	while( TRUE )
	{
	    if (!Stunned) {
		    emit-sfx 1024 + 0 from blink;
		}
		sleep 2500;
	}
	sleep 50;
	start-script Lights();
}


Go()
{
	spin radar around y-axis speed <-50.043956> accelerate <2>;
	return (0);
}

Stop()
{
	spin radar around y-axis speed <0.0>;
	return (0);
}

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
}

SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    call-script Stop();
	} else {
	    call-script Go();
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep 3000;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide blink;
	hide wake1;
	hide wake2;
	gun_1 = 1;
	hide flare1;
	hide flare2;
	hide flare3;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}

Activate()
{
	start-script Lights();
	start-script Go();
}

Deactivate()
{
	start-script Stop();
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-1.0> speed <1.0>;
		move base to y-axis [0.23] speed [0.17];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <1.0>;
		move base to y-axis [0.0] speed [0.17];
		wait-for-turn base around x-axis;
	}
}

StartMoving(reversing)
{

}

StopMoving()
{

}



AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	start-script RestoreAfterDelay();
	return (0);
}

FireWeapon1()
{
	sleep 150;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = radar;
	return (0);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = radar;
	return (0);
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	turn turret to y-axis heading speed <300.0>;
	turn launcher to x-axis <0> - pitch speed <300>;  //?
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = 1;
	}
	return (0);
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = launcher;
	return (0);
}

QueryWeapon2(pieceIndex)
{
	if( gun_1 == 1 )
	{
		pieceIndex = flare1;
	}
	if( gun_1 == 2 )
	{
		pieceIndex = flare2;
	}
	if( gun_1 == 3 )
	{
		pieceIndex = flare3;
	}
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		return(corpsetype);
	}
	corpsetype = 3 ;
	return corpsetype;
}
