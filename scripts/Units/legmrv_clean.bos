#include "../recoil_common_includes.h"

// piece  base, steer, turret, fwheel, bwheel, gunr, sleever, barrelr, flarer, gunr2, sleever2, barrelr2, flarer2,
// 		gunl, sleevel, barrell, flarel, gunl2, sleevel2, barrell2, flarel2;

piece base, flWheel, frWheel, rrTrack, rlTrack, turret, aimfrom, sleeveTop, sleeveBottom, flareTop, flareBottom, barrelTop, barrelBottom, flTyre, frTyre;
static-var  restore_delay, moveSpeed, wheelSpeed, whichGun, oldHeading, timeLeft, Stunned;


// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_FIRE1 1024
#define SIGNAL_MOVE 1


//#define DEBUG
#include "../debug.h"

#define TB_BASE base 
#define TB_TURNRATE <30.0> 
#define TB_TILT_X <0.1>
#define TB_BANK_Z <0.18> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"



#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100
#define RECOIL_POWER 1000000
#include "../unit_hitbyweaponid_and_smoke.h"



//#include "unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide flareTop;
	hide flareBottom;
	whichGun = 9;
	oldheading = get HEADING;
	restore_delay = 3000;
	call-script TB_Init();
}



StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
    start-script Steering();

	spin flTyre around x-axis speed <140.0> accelerate <5.0>;
	spin frTyre around x-axis speed <140.0> accelerate <5.0>;
	START_TILTBANK;
}

StopMoving()
{
	//dbg();
    stop-spin flTyre around x-axis;
    stop-spin frTyre around x-axis;
	signal SIGNAL_MOVE;

	STOP_TILTBANK;
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
	return (0);
}


Steering(heading, steery, currentSpeed)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	while(1)
	{
		heading = get HEADING;
		steery = (heading - oldheading)*3;
		turn flWheel to y-axis steery speed <180>;
		//turn flCover to y-axis steery speed <180>;	
		turn frWheel to y-axis steery speed <180>;
		//turn frCover to y-axis steery speed <180>;		
		currentSpeed = <2.5> *((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if (currentSpeed < <100>) currentSpeed = <100>;
		spin flTyre around x-axis speed (currentSpeed*4.0);
		spin frTyre around x-axis speed (currentSpeed*4.0);
		sleep 66;
		oldheading = heading;
	}
}





TimeToRestore(addTime){
    // This function may not be signal terminated
    // If it has to be, it _must_ be immediately restarted
    // PROBLEM: the time that is slept depends on number of aim calls.
    while((timeLeft > 1) || Stunned){
		//get PRINT(timeLeft, get GAME_FRAME);
        addTime = timeLeft;
        timeLeft = 1;
        sleep addTime;
    }
    // The restore section must be atomic :/
    timeLeft = 0;

	whichGun = 9;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn sleeveTop to x-axis <0.000000> speed <50.000000>;
	turn sleeveBottom to x-axis <0.000000> speed <50.000000>;
}


AimWeapon1(heading, pitch)
{
	
	if (timeLeft == 0)
    {
        start-script TimeToRestore();
    }
    timeLeft = restore_delay;
	
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <200.000000>;
	turn sleeveTop to x-axis <0.000000> - pitch speed <200.000000>;
	turn sleeveBottom to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeveBottom around x-axis;
	return (1);
}


///////////////////

Shot1(zero) {//unsure you need signals here tbh?
	signal SIGNAL_FIRE1;
	set-signal-mask SIGNAL_FIRE1;
	if (whichGun == 9){
		emit-sfx 1024 + 0 from flareTop;
		move barrelTop to z-axis [-5] now;
		move barrelTop to z-axis [0] speed [10];
		whichGun = 10;
		sleep 150;
	}
	if (whichGun == 10){
		emit-sfx 1024 + 0 from flareBottom;
		move barrelBottom to z-axis [-5] now;
		move barrelBottom to z-axis [0] speed [10];
		whichGun = 9;
		sleep 150;
	}
	return(0);
}

FireWeapon1()
{
	
	// if (whichGun == 0){

	// 	whichGun = 1;
	// 	return(0);
	// }

	// if (whichGun == 1){

	// 	whichGun = 0;
	// 	return(0);
	// }
	//sleep 150;
	return (0);
}

AimFromWeapon1(piecenum)
{
	piecenum = aimfrom;
	return (0);
}

QueryWeapon1(piecenum)
{
	piecenum = whichGun;
	return (0);
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode frWheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flWheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rrTrack type BITMAPONLY | NOHEATCLOUD;
		explode rlTrack type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode frWheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flWheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rrTrack type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rlTrack type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode frWheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flWheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rrTrack type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rlTrack type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode frWheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flWheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rrTrack type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rlTrack type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
