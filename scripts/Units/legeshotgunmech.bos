#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

///

piece 

hip,
rFrontFoot,
rBackFoot,
rLowerLeg,
rUpperLeg,
rFootPivot,
clusterBarrel,
clusterSleeve,
clusterHeadingPivot,
missileBattery,
clusterPitchPivot,
rArmUpper,
rArmGun,
rArmPump,
rArmPin,
lArmUpper,
lArmGun,
lArmPump,
lArmPin,
torso,
lFrontFoot,
lBackFoot,
lLowerLeg,
lUpperLeg,
lFootPivot,
aaMinigunBase,
aaMinigunTurret,
aaMinigunBarrel,

aaMinigunFlare,
fronthipFlare,
fronttorsoFlare,
rArmFlare,
lArmFlare,
clusterFlare,
missileFlare1,
missileFlare2,
missileFlare3,
batteryPivotFlare;

///

static-var 	torsoaim, movespeed, wpn1_lasthead, wpn2_lasthead, wpn3_lasthead, wpn4_lasthead, wpn5_lasthead, InMotion, 
			missile_count, shottieArm, Delay, deployed, animSpeed, maxSpeed, animFramesPerKeyframe, isMoving, aimingPose;
///

// Signal definitions
#define SIGNAL_MOVE 1
#define SIG_AIM_1	2
#define SIG_AIM_2 	4
#define SIG_AIM_3 	8
#define SIG_AIM_4 	16
#define SIG_RESTORE 32
#define SIG_AIM_5 	64
#define SIG_WALK	128
#define SIG_FIRE2 	256
#define SIG_FIRE3 	512
#define SIG_TRANS 	1024

Walk() {// For C:\Users\Siam\Desktop\BAR Development\Unit Modelling\Models\Bots\Tier 3\legpraet8.blend Created by https://github.com/Beherith/Skeletor_S3O V((0, 4, 2)) 
	set-signal-mask SIGNAL_MOVE;
	if (isMoving) { //Frame:1

            turn rUpperLeg to y-axis <0> speed <100>;
            turn lUpperLeg to y-axis <0> speed <100>;
			turn lFootPivot to x-axis <-47.494789> speed <77.377506> / animSpeed; 
			turn lFootPivot to z-axis <-3.278511> speed <18.928776> / animSpeed; 
			turn lLowerLeg to x-axis <24.915591> speed <232.897942> / animSpeed; 
			turn lUpperLeg to x-axis <22.712459> speed <153.759374> / animSpeed; 

			turn rFootPivot to x-axis <11.546414> speed <67.569106> / animSpeed; 
			turn rLowerLeg to x-axis <-17.318474> speed <59.731285> / animSpeed; 
			turn rUpperLeg to x-axis <6.033432> speed <7.632391> / animSpeed; 


            if(!aimingPose){		
            move torso to y-axis [-1.110559] speed [3.574723] / animSpeed;
            }
			
			if(!InMotion){
			turn lArmGun to x-axis <2.588210> speed <18.050820> / animSpeed; 
			turn lArmUpper to y-axis <1.714872> speed <6.524504> / animSpeed; 			
            turn rArmGun to x-axis <2.588210> speed <18.050820> / animSpeed; 
			turn rArmUpper to y-axis <1.714872> speed <6.524504> / animSpeed; 			
            }


		sleep ((33*animSpeed) -1);
	}
	while(isMoving) {
		if (isMoving) { //Frame:5

			turn lFootPivot to x-axis <-37.177795> speed <309.509817> / animSpeed; 
			turn lFootPivot to z-axis <-0.754674> speed <75.715112> / animSpeed; 
			turn lFootPivot to y-axis <-9.262542> speed <8.072976> / animSpeed; 
			turn lLowerLeg to x-axis <-6.137471> speed <931.591857> / animSpeed; 
			turn lUpperLeg to x-axis <43.213709> speed <615.037498> / animSpeed; 

			turn rFootPivot to x-axis <2.537199> speed <270.276464> / animSpeed; 
			turn rFootPivot to z-axis <0.101447> speed <11.707318> / animSpeed; 
			turn rFootPivot to y-axis <-7.585626> speed <5.606373> / animSpeed; 
			turn rLowerLeg to x-axis <-9.354300> speed <238.925217> / animSpeed; 
			turn rUpperLeg to x-axis <7.051083> speed <30.529537> / animSpeed; 


            if(!aimingPose){		
            move torso to y-axis [-1.587189] speed [14.298888] / animSpeed; 
			move torso to z-axis [-0.217341] speed [4.691424] / animSpeed;
            }
			
			if(!InMotion){
			turn lArmGun to x-axis <4.994986> speed <72.203266> / animSpeed; 
			turn lArmUpper to y-axis <2.584806> speed <26.098023> / animSpeed; 			
            turn rArmGun to x-axis <4.994986> speed <72.203266> / animSpeed; 
			turn rArmUpper to y-axis <2.584806> speed <26.098023> / animSpeed; 			
            }

		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:10

			turn lFootPivot to x-axis <-16.174648> speed <630.094428> / animSpeed; 
			turn lFootPivot to z-axis <1.475774> speed <66.913424> / animSpeed; 
			turn lFootPivot to y-axis <-6.415985> speed <85.396694> / animSpeed; 
			turn lLowerLeg to x-axis <-35.484994> speed <880.425706> / animSpeed; 
			turn lUpperLeg to x-axis <51.645751> speed <252.961281> / animSpeed; 

			turn rFootPivot to x-axis <-3.077262> speed <168.433835> / animSpeed; 
			turn rFootPivot to z-axis <0.315366> speed <6.417581> / animSpeed; 
			turn rFootPivot to y-axis <-5.281533> speed <69.122791> / animSpeed; 
			turn rLowerLeg to x-axis <-10.479661> speed <33.760823> / animSpeed; 
			turn rUpperLeg to x-axis <13.741886> speed <200.724063> / animSpeed; 


            if(!aimingPose){
			turn hip to y-axis <2.556190> speed <37.940783> / animSpeed;		
            move torso to y-axis [-1.251717] speed [10.064163] / animSpeed; 
			move torso to z-axis [-0.865512] speed [19.445133] / animSpeed;
            }
			
			if(!InMotion){
			turn lArmGun to x-axis <5.483378> speed <14.651767> / animSpeed; 
			turn lArmUpper to y-axis <2.840910> speed <7.683124> / animSpeed; 			
            turn rArmGun to x-axis <5.483378> speed <14.651767> / animSpeed; 
			turn rArmUpper to y-axis <2.840910> speed <7.683124> / animSpeed; 			
            }

		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:15
 
			turn lFootPivot to x-axis <5.047130> speed <636.653343> / animSpeed; 
			turn lFootPivot to z-axis <-0.233797> speed <51.287112> / animSpeed; 
			turn lFootPivot to y-axis <-0.769145> speed <169.405197> / animSpeed; 
			turn lLowerLeg to x-axis <-51.185865> speed <471.026101> / animSpeed; 
			turn lUpperLeg to x-axis <46.369693> speed <158.281745> / animSpeed; 
 
			turn rFootPivot to x-axis <-11.888159> speed <264.326912> / animSpeed; 
			turn rFootPivot to y-axis <-1.040126> speed <127.242211> / animSpeed; 
			turn rLowerLeg to x-axis <-7.752336> speed <81.819758> / animSpeed; 
			turn rUpperLeg to x-axis <19.860100> speed <183.546436> / animSpeed; 


            if(!aimingPose){
			turn hip to y-axis <0.466550> speed <62.689199> / animSpeed; 			
            move torso to y-axis [-0.381851] speed [26.095963] / animSpeed; 
			move torso to z-axis [-1.199576] speed [10.021906] / animSpeed;
            }
			
			if(!InMotion){
			turn lArmGun to x-axis <2.873913> speed <78.283944> / animSpeed; 
			turn lArmUpper to y-axis <2.183334> speed <19.727287> / animSpeed;			
            turn rArmGun to x-axis <2.873913> speed <78.283944> / animSpeed; 
			turn rArmUpper to y-axis <2.183334> speed <19.727287> / animSpeed;			
            }

		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:20
 
			turn lFootPivot to x-axis <25.675649> speed <618.855569> / animSpeed; 
			turn lFootPivot to z-axis <-1.734864> speed <45.032019> / animSpeed; 
			turn lFootPivot to y-axis <3.964605> speed <142.012497> / animSpeed; 
			turn lLowerLeg to x-axis <-55.389911> speed <126.121390> / animSpeed; 
			turn lUpperLeg to x-axis <29.886288> speed <494.502144> / animSpeed; 
 
			turn rFootPivot to x-axis <-25.168499> speed <398.410194> / animSpeed; 
			turn rFootPivot to z-axis <0.669479> speed <10.322929> / animSpeed; 
			turn rFootPivot to y-axis <3.879213> speed <147.580175> / animSpeed; 
			turn rLowerLeg to x-axis <2.509378> speed <307.851420> / animSpeed; 
			turn rUpperLeg to x-axis <22.875002> speed <90.447055> / animSpeed; 


            if(!aimingPose){
			turn hip to y-axis <-1.774251> speed <67.224005> / animSpeed;		
            move torso to y-axis [-0.006668] speed [11.255493] / animSpeed; 
			move torso to z-axis [-0.824326] speed [11.257485] / animSpeed;
            } 
			
			if(!InMotion){
			turn lArmGun to x-axis <0.253653> speed <78.607811> / animSpeed; 
			turn lArmUpper to y-axis <0.823564> speed <40.793108> / animSpeed;			
            turn rArmGun to x-axis <0.253653> speed <78.607811> / animSpeed; 
			turn rArmUpper to y-axis <0.823564> speed <40.793108> / animSpeed;			
            } 
			
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:25

			turn lFootPivot to x-axis <21.427593> speed <127.441699> / animSpeed; 
			turn lFootPivot to z-axis <-1.225308> speed <15.286690> / animSpeed; 
			turn lFootPivot to y-axis <6.541539> speed <77.308043> / animSpeed; 
			turn lLowerLeg to x-axis <-32.833348> speed <676.696894> / animSpeed; 
			turn lUpperLeg to x-axis <11.637714> speed <547.457224> / animSpeed; 

			turn rFootPivot to x-axis <-41.907541> speed <502.171251> / animSpeed; 
			turn rFootPivot to z-axis <2.536557> speed <56.012357> / animSpeed; 
			turn rFootPivot to y-axis <7.791846> speed <117.378974> / animSpeed; 
			turn rLowerLeg to x-axis <21.886018> speed <581.299183> / animSpeed; 
			turn rUpperLeg to x-axis <20.200964> speed <80.221135> / animSpeed; 


            if(!aimingPose){
			turn hip to y-axis <-3.441245> speed <50.009808> / animSpeed;			
            move torso to y-axis [-0.570015] speed [16.900406] / animSpeed; 
			move torso to z-axis [-0.183693] speed [19.218997] / animSpeed;
            } 
			
			if(!InMotion){
			turn lArmGun to x-axis <0.722431> speed <14.063350> / animSpeed; 
			turn lArmUpper to y-axis <-0.801077> speed <48.739230> / animSpeed; 			
            turn rArmGun to x-axis <0.722431> speed <14.063350> / animSpeed; 
			turn rArmUpper to y-axis <-0.801077> speed <48.739230> / animSpeed; 			
            } 

		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:30

			turn lFootPivot to x-axis <4.831425> speed <497.885034> / animSpeed; 
			turn lFootPivot to z-axis <0.038033> speed <37.900207> / animSpeed; 
			turn lFootPivot to y-axis <7.810957> speed <38.082514> / animSpeed; 
			turn lLowerLeg to x-axis <-8.614274> speed <726.572216> / animSpeed; 
			turn lUpperLeg to x-axis <4.059140> speed <227.357228> / animSpeed; 

			turn rFootPivot to x-axis <-45.818135> speed <117.317822> / animSpeed; 
			turn rFootPivot to z-axis <2.732568> speed <5.880306> / animSpeed; 
			turn rFootPivot to y-axis <9.497118> speed <51.158160> / animSpeed; 
			turn rLowerLeg to x-axis <12.600466> speed <278.566550> / animSpeed; 
			turn rUpperLeg to x-axis <33.268711> speed <392.032402> / animSpeed; 


            if(!aimingPose){
			turn hip to y-axis <-4.001350> speed <16.803175> / animSpeed;			
            move torso to y-axis [-1.405441] speed [25.062790] / animSpeed; 
			move torso to z-axis [-0.035562] speed [4.443941] / animSpeed;
            }
			
			if(!InMotion){
			turn lArmGun to x-axis <3.725673> speed <90.097262> / animSpeed; 
			turn lArmUpper to y-axis <-2.168079> speed <41.010070> / animSpeed; 			
            turn rArmGun to x-axis <3.725673> speed <90.097262> / animSpeed; 
			turn rArmUpper to y-axis <-2.168079> speed <41.010070> / animSpeed; 			
            }

		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:35

			turn lFootPivot to x-axis <-0.921367> speed <172.583764> / animSpeed; 
			turn lFootPivot to z-axis <-0.204803> speed <7.285061> / animSpeed; 
			turn lFootPivot to y-axis <6.650703> speed <34.807609> / animSpeed; 
			turn lLowerLeg to x-axis <-10.061916> speed <43.429271> / animSpeed; 
			turn lUpperLeg to x-axis <11.179181> speed <213.601244> / animSpeed; 
 
			turn rFootPivot to x-axis <-24.492218> speed <639.777502> / animSpeed; 
			turn rFootPivot to z-axis <-1.164570> speed <116.914129> / animSpeed; 
			turn rFootPivot to y-axis <8.220776> speed <38.290237> / animSpeed; 
			turn rLowerLeg to x-axis <-25.735840> speed <1150.089194> / animSpeed; 
			turn rUpperLeg to x-axis <50.079797> speed <504.332596> / animSpeed; 


            if(!aimingPose){
			turn hip to y-axis <-3.277776> speed <21.707234> / animSpeed;		
            move torso to y-axis [-1.524612] speed [3.575134] / animSpeed; 
			move torso to z-axis [-0.555175] speed [15.588410] / animSpeed;
            }
			
			if(!InMotion){
			turn lArmGun to x-axis <5.710465> speed <59.543771> / animSpeed; 
			turn lArmUpper to y-axis <-2.837794> speed <20.091443> / animSpeed; 			
            turn rArmGun to x-axis <5.710465> speed <59.543771> / animSpeed; 
			turn rArmUpper to y-axis <-2.837794> speed <20.091443> / animSpeed;			
            }

		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:40
 
			turn lFootPivot to x-axis <-7.373806> speed <193.573149> / animSpeed; 
			turn lFootPivot to z-axis <-0.307446> speed <3.079308> / animSpeed; 
			turn lFootPivot to y-axis <3.179913> speed <104.123702> / animSpeed; 
			turn lLowerLeg to x-axis <-9.720464> speed <10.243568> / animSpeed; 
			turn lUpperLeg to x-axis <17.293725> speed <183.436299> / animSpeed; 

			turn rFootPivot to x-axis <-3.436912> speed <631.659196> / animSpeed; 
			turn rFootPivot to z-axis <-0.739691> speed <12.746366> / animSpeed; 
			turn rFootPivot to y-axis <3.454384> speed <142.991780> / animSpeed; 
			turn rLowerLeg to x-axis <-46.271120> speed <616.058389> / animSpeed; 
			turn rUpperLeg to x-axis <49.886855> speed <5.788278> / animSpeed; 


            if(!aimingPose){
			turn hip to y-axis <-1.499168> speed <53.358238> / animSpeed;		
            move torso to y-axis [-0.786552] speed [22.141800] / animSpeed; 
			move torso to z-axis [-1.127817] speed [17.179264] / animSpeed;
            }
			
			if(!InMotion){
			turn lArmGun to x-axis <4.328753> speed <41.451381> / animSpeed; 
			turn lArmUpper to y-axis <-2.594830> speed <7.288917> / animSpeed;			
            turn rArmGun to x-axis <4.328753> speed <41.451381> / animSpeed; 
			turn rArmUpper to y-axis <-2.594830> speed <7.288930> / animSpeed; 			
            }


		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:45

			turn lFootPivot to x-axis <-19.592056> speed <366.547515> / animSpeed; 
			turn lFootPivot to y-axis <-1.633120> speed <144.390978> / animSpeed; 
			turn lLowerLeg to x-axis <-2.548249> speed <215.166442> / animSpeed; 
			turn lUpperLeg to x-axis <22.369865> speed <152.284207> / animSpeed; 

			turn rFootPivot to x-axis <17.850366> speed <638.618344> / animSpeed; 
			turn rFootPivot to z-axis <1.309630> speed <61.479630> / animSpeed; 
			turn rFootPivot to y-axis <-2.109116> speed <166.904989> / animSpeed; 
			turn rLowerLeg to x-axis <-55.172861> speed <267.052234> / animSpeed; 
			turn rUpperLeg to x-axis <37.517590> speed <371.077928> / animSpeed; 


            if(!aimingPose){
			turn hip to y-axis <0.764559> speed <67.911809> / animSpeed;			
            move torso to y-axis [-0.064400] speed [21.664581] / animSpeed;
            }
			
			if(!InMotion){
			turn lArmGun to x-axis <1.215132> speed <93.408631> / animSpeed; 
			turn lArmUpper to y-axis <-1.517328> speed <32.325061> / animSpeed; 			
            turn rArmGun to x-axis <1.215132> speed <93.408631> / animSpeed; 
			turn rArmUpper to y-axis <-1.517328> speed <32.325048> / animSpeed; 			
            }

		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:50

			turn lFootPivot to x-axis <-34.614593> speed <450.676099> / animSpeed; 
			turn lFootPivot to z-axis <-1.462187> speed <32.724249> / animSpeed; 
			turn lFootPivot to y-axis <-6.199245> speed <136.983753> / animSpeed; 
			turn lLowerLeg to x-axis <12.597248> speed <454.364926> / animSpeed; 
			turn lUpperLeg to x-axis <22.202754> speed <5.013325> / animSpeed; 

			turn rFootPivot to x-axis <28.335178> speed <314.544350> / animSpeed; 
			turn rFootPivot to z-axis <1.667402> speed <10.733174> / animSpeed; 
			turn rFootPivot to y-axis <-5.440215> speed <99.932972> / animSpeed; 
			turn rLowerLeg to x-axis <-45.309812> speed <295.891479> / animSpeed; 
			turn rUpperLeg to x-axis <17.176561> speed <610.230872> / animSpeed; 


            if(!aimingPose){
			turn hip to y-axis <2.780623> speed <60.481895> / animSpeed;		
            move torso to y-axis [-0.212486] speed [4.442596] / animSpeed; 
			move torso to z-axis [-0.461094] speed [18.448336] / animSpeed;
            }
			
			if(!InMotion){
			turn lArmGun to x-axis <0.053097> speed <34.861028> / animSpeed; 
			turn lArmUpper to y-axis <0.048169> speed <46.964919> / animSpeed; 			
            turn rArmGun to x-axis <0.053097> speed <34.861028> / animSpeed; 
			turn rArmUpper to y-axis <0.048169> speed <46.964919> / animSpeed; 			
            }


		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:55

			turn lFootPivot to x-axis <-51.400746> speed <503.584588> / animSpeed; 
			turn lFootPivot to z-axis <-4.013503> speed <76.539483> / animSpeed; 
			turn lFootPivot to y-axis <-9.133439> speed <88.025826> / animSpeed; 
			turn lLowerLeg to x-axis <30.766369> speed <545.073608> / animSpeed; 
			turn lUpperLeg to x-axis <20.808081> speed <41.840202> / animSpeed; 

			turn rFootPivot to x-axis <9.751624> speed <557.506618> / animSpeed; 
			turn rFootPivot to z-axis <0.211583> speed <43.674583> / animSpeed; 
			turn rFootPivot to y-axis <-7.483421> speed <61.296175> / animSpeed; 
			turn rLowerLeg to x-axis <-12.755174> speed <976.639127> / animSpeed; 
			turn rUpperLeg to x-axis <3.287829> speed <416.661968> / animSpeed; 


            if(!aimingPose){
			turn hip to y-axis <3.899984> speed <33.580845> / animSpeed;		
            move torso to y-axis [-1.055618] speed [25.293961] / animSpeed; 
			move torso to z-axis [-0.010479] speed [13.518457] / animSpeed;
            }
			
			if(!InMotion){
			turn lArmGun to x-axis <2.217365> speed <64.928020> / animSpeed; 
			turn lArmUpper to y-axis <1.598174> speed <46.500135> / animSpeed; 			
            turn rArmGun to x-axis <2.217365> speed <64.928020> / animSpeed; 
			turn rArmUpper to y-axis <1.598175> speed <46.500186> / animSpeed; 			
            }

		sleep ((33*animSpeed) -1);
		}
	}
}
// Call this from StopMoving()!
StopWalking() {
	animSpeed = 10; // tune restore speed here, higher values are slower restore speeds
	move torso to y-axis [0.000000] speed [48.383546] / animSpeed;
	move torso to z-axis [0.000000] speed [38.890266] / animSpeed;
	turn hip to y-axis <0> speed <271.647238> / animSpeed;
	turn lArmGun to x-axis <0> speed <186.817262> / animSpeed;
	turn lArmUpper to y-axis <0> speed <97.478461> / animSpeed;
	turn lFootPivot to x-axis <0> speed <1657.175877> / animSpeed;
	turn lFootPivot to y-axis <0> speed <320.127520> / animSpeed;
	turn lLowerLeg to x-axis <0> speed <2357.151310> / animSpeed;
	turn lUpperLeg to x-axis <0> speed <1520.627503> / animSpeed;
	turn lUpperLeg to z-axis <0> speed <114.706988> / animSpeed;
	turn rArmGun to x-axis <0> speed <186.817262> / animSpeed;
	turn rArmUpper to y-axis <0> speed <97.478461> / animSpeed;
	turn rFootPivot to x-axis <0> speed <1621.619978> / animSpeed;
	turn rFootPivot to y-axis <0> speed <299.700522> / animSpeed;
	turn rLowerLeg to x-axis <0> speed <1944.440289> / animSpeed;
	turn rUpperLeg to x-axis <0> speed <1688.428654> / animSpeed;
	turn rUpperLeg to z-axis <0> speed <125.703468> / animSpeed;
	turn rUpperLeg to y-axis <-15> speed <50>;
    turn lUpperLeg to y-axis <15> speed <50>;
}
// REMEMBER TO animspeed = 4 in Create() !!
UnitSpeed(){
	maxSpeed = get MAX_SPEED; // this returns cob units per frame i think
	animFramesPerKeyframe = 4; //we need to calc the frames per keyframe value, from the known animtime
	maxSpeed = maxSpeed + (maxSpeed /(2*animFramesPerKeyframe)); // add fudge
	while(TRUE){
		animSpeed = (get CURRENT_SPEED);
		if (animSpeed<1) animSpeed=1;
		animSpeed = (maxSpeed * 4) / animSpeed; 
		//get PRINT(maxSpeed, animFramesPerKeyframe, animSpeed); //how to print debug info from bos
		if (animSpeed<2) animSpeed=2;
		if (animspeed>9) animSpeed = 9;
		sleep 161;
	}
}
StartMoving(){
	signal SIGNAL_MOVE;
	isMoving=TRUE;
    animSpeed = 4;
	start-script Walk();
}
StopMoving(){
	signal SIGNAL_MOVE;
	isMoving=FALSE;
	call-script StopWalking();
}

Open()
{
	if( !aimingPose )
	{
		signal SIG_TRANS;
		set-signal-mask SIG_TRANS;
		signal SIG_RESTORE;
		start-script RestoreAfterDelay();
		aimingPose = 1;
		
        move missileBattery to y-axis [0] speed [20];
        move clusterSleeve to y-axis [4] speed [10];

        move clusterHeadingPivot to y-axis [0] speed [50];
        move clusterHeadingPivot to z-axis [0] speed [20];
        wait-for-move clusterPitchPivot along z-axis;
        turn clusterPitchPivot to x-axis <0> speed <90>;
		wait-for-move missileBattery along y-axis;
		
		deployed = 1;
        
	}
}

Close()
{
	if( aimingPose )
	{
		signal SIG_TRANS;
		set-signal-mask SIG_TRANS;
		aimingPose = 0;
		deployed = 0;
        
        move missileBattery to y-axis [-8.5] speed [10];
        move clusterSleeve to y-axis [0] speed [5];
		turn clusterHeadingPivot to y-axis <0> speed <90>;

        turn clusterPitchPivot to x-axis <-90> speed <90>;
        wait-for-turn clusterPitchPivot around x-axis;
		wait-for-turn clusterHeadingPivot around y-axis;
        move clusterHeadingPivot to z-axis [-10] speed [10];
        move clusterHeadingPivot to y-axis [-5] speed [5];
	}
}

Create()
{
	torsoaim = 0;
    aimingPose = 1;
	deployed = 1;
    InMotion = 0;
	missile_count=0;
    shottieArm =  0;
	moveSpeed = get MAX_SPEED;
	animSpeed = 4;
	wpn1_lasthead = 1000000;
    wpn2_lasthead = 0;
    wpn3_lasthead = 0;
    wpn4_lasthead = 0;
    wpn5_lasthead = 0;
	Delay = 0;

    turn batteryPivotFlare to z-axis <65> now;
	
    hide fronthipFlare;
    hide fronttorsoFlare;
    hide rArmFlare;
    hide lArmFlare;
    hide clusterFlare;
    hide missileFlare1;
    hide missileFlare2;
    hide missileFlare3;
    while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
    turn rArmGun to z-axis <15> speed <50>;
    turn lArmGun to z-axis <-15> speed <50>;
    turn rUpperLeg to y-axis <-15> speed <50>;
    turn lUpperLeg to y-axis <15> speed <50>;

    move aaMinigunBase to y-axis [4] speed [10];
    turn aaMinigunTurret to x-axis <-45> speed <10>;
    spin aaMinigunBase around y-axis speed <20> accelerate <0.5>;

}

RestoreAfterDelay(){
	set-signal-mask SIG_RESTORE;
	sleep 3000;
    start-script Close();
	turn torso to y-axis <0> speed <50>;
	turn rArmGun to y-axis <0> speed <50>;
	turn lArmGun to y-axis <0> speed <50>;
	
	turn lArmGun to x-axis <0> speed <186.817262> / animSpeed;
	turn lArmUpper to y-axis <0> speed <97.478461> / animSpeed;
	
    turn rArmGun to x-axis <0> speed <186.817262> / animSpeed;
    turn rArmUpper to y-axis <0> speed <97.478461> / animSpeed;
    

    turn rArmUpper to x-axis <0> speed <20>;
    turn lArmUpper to x-axis <0> speed <20>;

    turn rArmGun to z-axis <15> speed <50>;
    turn lArmGun to z-axis <-15> speed <50>;

    move aaMinigunBase to y-axis [4] speed [10];
    turn aaMinigunTurret to x-axis <-45> speed <10>;
    spin aaMinigunBase around y-axis speed <20> accelerate <0.5>;
	torsoaim = 0;
	wpn1_lasthead = 1000000;
    wpn2_lasthead = 0;
    wpn3_lasthead = 0;
    wpn4_lasthead = 0;
    wpn5_lasthead = 0;
	Delay = 0;
	wait-for-turn rArmGun around x-axis;
    wait-for-turn rArmUpper around y-axis;
	wait-for-turn lArmGun around x-axis;
    wait-for-turn lArmUpper around y-axis;
	InMotion = 0;
    // start-script Close();
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return (0);
}

QueryWeapon1(piecenum) //Hull Rotation
{

    piecenum = torso;
	// if(missile_count==0)
	// {
	// 	piecenum=mis1;	
	// }
	// if(missile_count==1)
	// {
	// 	piecenum=mis2;
	// }
	// if(missile_count==2)
	// {
	// 	piecenum=mis3;
	// }
	// if(missile_count==3)
	// {
	// 	piecenum=mis4;
	// }
}

AimFromWeapon1(piecenum)
{
	piecenum = torso;
	return (0);
}

AimWeapon1(heading, pitch)
{
	if( !aimingPose )
	{
		start-script Open();
	}
	signal SIG_AIM_1;
	signal SIG_RESTORE;
	set-signal-mask SIG_AIM_1;
	turn torso to y-axis heading speed <90.0000> ; //-- Turn(torso, y-axis, heading, math.rad(300))
	var gun_xz;
    gun_xz = get PIECE_XZ(torso);                                //get packed gun coordinates
    var gun_x;
    gun_x = (gun_xz & 0xffff0000) / 0x00010000;                //unpack x coordinates of gun (credit for unpack code goes to Beherith)
    var gun_z;
    gun_z = (gun_xz & 0x0000ffff);                            //unpack z coordinates of gun
    
    var turret_xz;
    turret_xz = get PIECE_XZ(fronttorsoFlare);                        //get packed turret coordinates
    var turret_x;
    turret_x = (turret_xz & 0xffff0000) / 0x00010000;        //unpack x coordinates of turret
    var turret_z;
    turret_z = (turret_xz & 0x0000ffff);                    //unpack z coordinates of turret
    
    var aim_x;
    var aim_z;
    aim_x = gun_x - turret_x;                                //calculate relative coordinates of the gun to the turret (how far away it is in each direction)
    aim_z = gun_z - turret_z;
    
    
    var hull_xz;
    hull_xz = get PIECE_XZ(hip);                            //get packed hull coordinates
    var hull_x;
    hull_x = (hull_xz & 0xffff0000) / 0x00010000;            //unpack x coordinates of hull
    var hull_z;
    hull_z = (hull_xz & 0x0000ffff);                        //unpack z coordinates of hull
    
    var smoke_xz;
    smoke_xz = get PIECE_XZ(fronthipFlare);                            //get packed smoke coordinates
    var smoke_x;
    smoke_x = (smoke_xz & 0xffff0000) / 0x00010000;            //unpack x coordinates of smoke
    var smoke_z;
    smoke_z = (smoke_xz & 0x0000ffff);                        //unpack z coordinates of smoke
    
    var face_x;
    var face_z;
    face_x = hull_x - smoke_x;                                //calculate relative coordinates of the hull to the smoke (how far away it is in each direction)
    face_z = hull_z - smoke_z;
	
	var cauaim;
    var cauface;
    cauaim = get ATAN(aim_z, aim_x);                        //use arctan (ATAN) to calculate the angle of the turret. The result is in cau, which is the unit this code format uses for angles. Its up to 32768 (180 degrees), positive or negative depending on direction
    cauface = get ATAN(face_z, face_x);                        //use arctan (ATAN) to calculate the angle of the hull. The result is in cau, which is the unit this code format uses for angles. Its up to 32768 (180 degrees), positive or negative depending on direction
    
    //var torsoaim;
    torsoaim = cauface - cauaim;                                //calculate angle of turret relative to the hull
	//torsoaim = heading;
	if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > 1300) AND ((get ABS(wpn1_lasthead - heading)) < 64236)))
	{
		wpn1_lasthead = 1000000;
		wait-for-turn torso around y-axis;
	}
	wpn1_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	return (1);
}

QueryWeapon2(piecenum) //R Shotgun
{
	if(shottieArm==1)
	{
		piecenum=rArmFlare;	
		return(0);	
	}
	if(shottieArm==0)
	{
		piecenum=lArmFlare;
		return(0);	
	}
}

AimFromWeapon2(piecenum)
{
	if(shottieArm==0)
	{
		piecenum=rArmFlare;
        return(0);	
	}
	if(shottieArm==1)
	{
		piecenum=lArmFlare;
        return(0);	
	}

    //piecenum = torso;
    // return(0);


}

AimWeapon2(heading, pitch) //pew pew
{
	signal SIG_AIM_2;
	signal SIG_RESTORE;
	set-signal-mask SIG_AIM_2;
	InMotion = 1;
    if (Delay==1)
	{
		return (0);
	}
	if(shottieArm==0)
	{
		turn rArmGun to y-axis heading - torsoaim speed <95.0000>;
		turn rArmUpper to x-axis -1*pitch speed <100.0000>;
	}
	if(shottieArm==1)
	{
		turn lArmGun to y-axis heading - torsoaim speed <95.0000>;
		turn lArmUpper to x-axis -1*pitch speed <100.0000>;
	}
	if (((get ABS(wpn2_lasthead - heading)) > 65536) OR(((get ABS(wpn2_lasthead - heading)) > <10>) AND ((get ABS(wpn2_lasthead - heading)) < 65536 - <10>)))
	{
		wpn2_lasthead = 1000000;
		//wait-for-turn torso around y-axis;
		wait-for-turn rArmGun around x-axis;
		wait-for-turn rArmGun around y-axis;
		wait-for-turn lArmGun around x-axis;
		wait-for-turn lArmGun around y-axis;
	}
	wpn2_lasthead = heading;
	return (1);
}

FireWeapon2()
{
    Delay = 1;
	shottieArm = !shottieArm;
	if(shottieArm==1)
	{
        emit-sfx 1024 from rArmFlare;
        move rArmPump to z-axis [-5.5] speed [27.5];
        move rArmPin to z-axis [-5.5] speed [27.5];
        sleep 200;
        move rArmPin to z-axis [0] speed [4.4];
        sleep 300;
		Delay = 0;
        move rArmPump to z-axis [2] speed [20];
        wait-for-move rArmPump along z-axis;
        move rArmPump to z-axis [0] speed [8];
        return (1);
	}
	if(shottieArm==0)
	{
        emit-sfx 1024 from lArmFlare;
        move lArmPump to z-axis [-5.5] speed [27.5];
        move lArmPin to z-axis [-5.5] speed [27.5];
        sleep 200;
        move lArmPin to z-axis [0] speed [4.4];
        sleep 300;
		Delay = 0;
        move lArmPump to z-axis [2] speed [20];
        wait-for-move lArmPump along z-axis;
        move lArmPump to z-axis [0] speed [8];
        return (1);
	}
}


Shot2(zero)
{

	return(1);
}


QueryWeapon3(piecenum) //L Railgun
{
	piecenum = clusterFlare;
	// return (0);
}

AimFromWeapon3(piecenum)
{
	piecenum = torso;
	// return (0);
}

AimWeapon3(heading, pitch) //pew pew
{
	if( !aimingPose )
	{
        start-script Open();
	}
	if( !deployed )
	{
		return (0);
	}
	signal SIG_AIM_3;
	signal SIG_RESTORE;
	set-signal-mask SIG_AIM_3;
	turn clusterHeadingPivot to y-axis heading - torsoaim speed <90.0000>; //-- Turn(torso, y-axis, heading, math.rad(300))
	turn clusterPitchPivot to x-axis -1*pitch speed <90.0000>;
	if (((get ABS(wpn3_lasthead - heading)) > 65536) OR(((get ABS(wpn3_lasthead - heading)) > 2500) AND ((get ABS(wpn3_lasthead - heading)) < 64236)))
	{
		wpn3_lasthead = 1000000;
		wait-for-turn clusterHeadingPivot around y-axis;
		wait-for-turn clusterPitchPivot around x-axis;
        
	}
	wpn3_lasthead = heading;
    start-script RestoreAfterDelay();
	return (1);
}

FireWeapon3()
{
	//emit-sfx 1024 from clusterFlare;
	move clusterBarrel to z-axis [-5.5] speed [27.5];
	sleep 200;
	move clusterBarrel to z-axis [0] speed [4.4];
	return (1);
}

QueryWeapon4(piecenum) //Mid Guns
{
	if(missile_count == 0)
	{
		piecenum = missileFlare1;
	}
	if(missile_count == 1)
	{
		piecenum = missileFlare2;
	}
	if(missile_count == 2)
	{
		piecenum = missileFlare3;
	}
	// return (0);
}

AimFromWeapon4(piecenum)
{
	piecenum = missileBattery;
	// return (0);
}

AimWeapon4(heading, pitch)
{
	if( !deployed )
	{
		return (0);
	}
	signal SIG_AIM_4;
	signal SIG_RESTORE;
	set-signal-mask SIG_AIM_4;
	if (((get ABS(wpn4_lasthead - heading)) > 65536) OR(((get ABS(wpn4_lasthead - heading)) > 1300) AND ((get ABS(wpn4_lasthead - heading)) < 64236)))
	{
		wait-for-turn torso around y-axis;
		wpn4_lasthead = 1000000;
	}
	wpn4_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon4()
{

	return (1);

}

Shot4(zero)
{
	signal SIG_FIRE3;
	set-signal-mask SIG_FIRE3;
	sleep 32;
	++missile_count;
	if(missile_count>3)
	{
		missile_count=0;
	}
	return(1);
}



QueryWeapon5(piecenum) 
{
	piecenum = aaMinigunFlare;
	// return (0);
}

AimFromWeapon5(piecenum)
{
	piecenum = aaMinigunBase;
	// return (0);
}

AimWeapon5(heading, pitch) //pew pew
{
	signal SIG_AIM_5;
	signal SIG_RESTORE;
	set-signal-mask SIG_AIM_5;
    stop-spin aaMinigunBase around y-axis;
	turn aaMinigunBase to y-axis heading - torsoaim speed <90.0000>; //-- Turn(torso, y-axis, heading, math.rad(300))
	turn aaMinigunTurret to x-axis -1*pitch speed <90.0000>;
	if (((get ABS(wpn5_lasthead - heading)) > 65536) OR(((get ABS(wpn5_lasthead - heading)) > 2500) AND ((get ABS(wpn5_lasthead - heading)) < 64236)))
	{
		wpn5_lasthead = 1000000;
		wait-for-turn aaMinigunBase around y-axis;
		wait-for-turn aaMinigunTurret around x-axis;
	}
	wpn5_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon5()
{
	spin aaMinigunBarrel around z-axis speed <-2000.0>;

	stop-spin aaMinigunBarrel around z-axis decelerate <12>;
}



//-----------------------------------------------------------------------
//-- death stuffs
//-----------------------------------------------------------------------

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode hip 			type BITMAPONLY | NOHEATCLOUD;
		explode lUpperLeg 		type BITMAPONLY | NOHEATCLOUD;
		explode lLowerLeg 		type BITMAPONLY | NOHEATCLOUD;
		explode lFrontFoot 		type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rUpperLeg 		type BITMAPONLY | NOHEATCLOUD;
		explode rLowerLeg 		type BITMAPONLY | NOHEATCLOUD;
		explode rFrontFoot 		type BITMAPONLY | NOHEATCLOUD;
		explode rArmGun 		type BITMAPONLY | NOHEATCLOUD;
		explode torso 			type BITMAPONLY | NOHEATCLOUD;
		explode clusterBarrel 	type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode hip 				type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lUpperLeg 			type FALL | NOHEATCLOUD;
		explode lLowerLeg 			type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lFrontFoot 			type FALL | NOHEATCLOUD;
		explode rUpperLeg 			type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rLowerLeg 			type FALL | NOHEATCLOUD;
		explode rFrontFoot 			type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rArmGun 			type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso 				type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode clusterBarrel 		type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rBackFoot 			type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode hip 		type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lUpperLeg 	type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lLowerLeg 	type BITMAPONLY | NOHEATCLOUD;
		explode lFrontFoot	type SMOKE | FALL | NOHEATCLOUD;
		explode rUpperLeg 		type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rLowerLeg 		type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode rFrontFoot 		type BITMAPONLY | NOHEATCLOUD;
		explode rArmGun 		type SMOKE | FALL | NOHEATCLOUD;
		explode torso 			type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode clusterBarrel 	type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode hip 				type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lUpperLeg 			type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lLowerLeg 			type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lFrontFoot 			type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rUpperLeg 			type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rLowerLeg 			type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rFrontFoot 			type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rArmGun 			type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso 				type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode clusterBarrel 		type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rBackFoot 			type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
