
#include "../recoil_common_includes.h"

piece  base, door1, door2, barrel,flare, greenlight, orangelight;

static-var  gun_1, restore_delay, isOpen, missiles_stockpiled;

// Signal definitions
#define SIGNAL_AIM1 256

Create()
{
	hide flare;
	gun_1 = base;
	isOpen = FALSE;
	restore_delay = 3000;
	missiles_stockpiled = 0;
	hide greenlight;
	show orangelight;
}

#define BASEPIECE base
#define MAXTILT 0
#include "../unit_hitbyweaponid_and_smoke.h"

Activate()
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	if (!isOpen){
		move door1 to x-axis [-13] speed [13];
		move door2 to x-axis [13] speed [13];
		wait-for-move door1 along x-axis;

		move barrel to y-axis [10] speed [20];
		wait-for-move barrel along y-axis;
		isOpen = TRUE;
	}
}

Deactivate()
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	if (isOpen){
		move barrel to y-axis [0] speed [20];
		wait-for-move barrel along y-axis;

		move door1 to x-axis [0] speed [13];
		move door2 to x-axis [0] speed [13];
		wait-for-move door1 along x-axis;

		isOpen = FALSE;
	}
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	start-script Deactivate();
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	start-script Activate();
	return (1);
}

FireWeapon1()
{
	start-script Deactivate(1);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}

lights_orange()
{
	hide greenlight;
	show orangelight;
}

lights_green()
{
	show greenlight;
	hide orangelight;
}

SetStockpile(num_stockpiled)
{
	if (num_stockpiled == 0)
	{
		start-script lights_orange();
		sleep 100;
		missiles_stockpiled = 0;
	}
	if (num_stockpiled >= 1)
	{
		start-script lights_green();
		sleep 100;
		missiles_stockpiled = 1;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | BITMAPONLY | NOHEATCLOUD;
		explode barrel type BITMAPONLY | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type BITMAPONLY | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
