
#include "../recoil_common_includes.h"

piece  base, top, bore, barrel, flare, aimpoint, firepoint;

static-var  isOpen, restore_delay;

// Signal definitions
#define SIGNAL_AIM1 256

#include "../opencloseanim.h"


Open()
{
	set ARMORED to 0;
	move top to y-axis [8.0] speed [19.989014];
	wait-for-move top along y-axis;
	move bore to z-axis [0.0] speed [19.989014];
	move barrel to z-axis [0.0] speed [19.989014];
	isOpen = 1;
}

Close()
{
	set ARMORED to 1;
	isOpen = 0;
	turn top to y-axis <0.0> speed <300.0>;
	move bore to z-axis [-6] speed [19.989014];
	move barrel to z-axis [-6.5] speed [19.989014];
	wait-for-move barrel along z-axis;
	wait-for-move bore along z-axis;
	move top to y-axis [-11.9] speed [48];
	wait-for-move top along y-axis;
}


Create()
{
	hide aimpoint;
	hide firepoint;
	hide flare;
	hide flare;
	restore_delay = 2000;
	isOpen = 0;
	start-script OpenCloseAnim(1);
	SLEEP_UNTIL_UNITFINISHED;
	move aimpoint to y-axis [8] now;
	start-script OpenCloseAnim(0);
}

Activate()
{
	start-script OpenCloseAnim(1);
}

Deactivate()
{
	start-script OpenCloseAnim(0);
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 3;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	start-script OpenCloseAnim(0);
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	start-script OpenCloseAnim(1);
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	while( !isOpen )
	{
		sleep 250;
	}
	turn top to y-axis heading speed <300.0>;
	turn firepoint to x-axis <0.0> - pitch speed <110.0>;
	wait-for-turn top around y-axis;
	wait-for-turn firepoint around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	emit-sfx 1024 + 0 from firepoint;
	return (TRUE);
}

FireWeapon1()
{
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = firepoint;
}



AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimpoint;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode top type BITMAPONLY | NOHEATCLOUD;
		explode bore type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode top type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bore type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FALL | NOHEATCLOUD;
		explode flare type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode top type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bore type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode top type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bore type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}