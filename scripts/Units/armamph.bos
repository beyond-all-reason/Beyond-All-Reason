
#include "../recoil_common_includes.h"

piece  pelvis, torso, rthigh, rleg, rfoot, lthigh, lleg, lfoot, prop, barrel, flare, turret, misbarrel, lmisflare, rmisflare;

static-var  isMoving, isAiming, inWaterForm, gun_3,
            restore_delay, isInWater, wpn1_lasthead, wpn3_lasthead;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256
#define SIGNAL_AIM3 1024


walk()
{
	if( TRUE )
	{
		
		turn rthigh to x-axis <0> speed <555.0>;
		turn rleg to x-axis <0> speed <382.500000>;
		turn rfoot to x-axis <0> speed <127.500000>;
		
		
		turn lthigh to x-axis <56> speed <420.0>;
		turn lleg to x-axis <-29> speed <217.500000>;
		turn lfoot to x-axis <-60> speed <450.0>;
		
		move pelvis to y-axis [0] now;
		sleep 120;
		
		turn rthigh to x-axis <35> speed <262.500000>;
		turn rleg to x-axis <8> speed <60.0>;
		turn rfoot to x-axis <-38> speed <285.0>;
		
		
		turn lthigh to x-axis <-44> speed <750.0>;
		turn lleg to x-axis <11> speed <300.0>;
		turn lfoot to x-axis <-19> speed <307.500000>;
		move pelvis to y-axis [0.5] speed [3.750000];
		sleep 120;
		
		turn rthigh to x-axis <41> speed <45.0>;
		turn rleg to x-axis <20> speed <90.0>;
		turn rfoot to x-axis <-47> speed <67.500000>;
		
		turn lthigh to x-axis <-74> speed <225.0>;
		turn lleg to x-axis <51> speed <300.0>;
		turn lfoot to x-axis <17> speed <270.0>;
		
		move pelvis to y-axis [-0.5] speed [7.500000];
		sleep 120;
		
		
		turn rthigh to x-axis <56> speed <112.500000>;
		turn rleg to x-axis <-29> speed <367.500000>;
		turn rfoot to x-axis <-60> speed <97.500000>;
		
		turn lthigh to x-axis <0> speed <555.0>;
		turn lleg to x-axis <0> speed <382.500000>;
		turn lfoot to x-axis <0> speed <127.500000>;
		
		move pelvis to y-axis [0] speed [3.750000];
		sleep 120;
		
		
		turn rthigh to x-axis <-44> speed <750.0>;
		turn rleg to x-axis <11> speed <300.0>;
		turn rfoot to x-axis <-19> speed <307.500000>;
		
		turn lthigh to x-axis <35> speed <262.500000>;
		turn lleg to x-axis <8> speed <60.0>;
		turn lfoot to x-axis <-38> speed <285.0>;
		
		move pelvis to y-axis [0.5] speed [3.750000];
		sleep 120;
		
		
		turn rthigh to x-axis <-74> speed <225.0>;
		turn rleg to x-axis <51> speed <300.0>;
		turn rfoot to x-axis <17> speed <270.0>;
		
		turn lthigh to x-axis <41> speed <45.0>;
		turn lleg to x-axis <20> speed <90.0>;
		turn lfoot to x-axis <-47> speed <67.500000>;
		
		
		move pelvis to y-axis [-0.5] speed [7.500000];
		sleep 120;
	}	

}

walklegs()
{
			turn rthigh to x-axis <0> speed <555.0>;
		turn rleg to x-axis <0> speed <382.500000>;
		turn rfoot to x-axis <0> speed <127.500000>;
		
		turn lthigh to x-axis <56> speed <112.500000>;
		turn lleg to x-axis <-29> speed <367.500000>;
		turn lfoot to x-axis <-60> speed <97.500000>;
		
		move pelvis to y-axis [0] speed [3.750000];
		sleep 120;
		
		turn rthigh to x-axis <35> speed <262.500000>;
		turn rleg to x-axis <8> speed <60.0>;
		turn rfoot to x-axis <-38> speed <285.0>;
		
		
		turn lthigh to x-axis <-44> speed <750.0>;
		turn lleg to x-axis <11> speed <300.0>;
		turn lfoot to x-axis <-19> speed <307.500000>;
		move pelvis to y-axis [0.5] speed [3.750000];
		sleep 120;
		
		turn rthigh to x-axis <41> speed <45.0>;
		turn rleg to x-axis <20> speed <90.0>;
		turn rfoot to x-axis <-47> speed <67.500000>;
		
		turn lthigh to x-axis <-74> speed <225.0>;
		turn lleg to x-axis <51> speed <300.0>;
		turn lfoot to x-axis <17> speed <270.0>;
		
		move pelvis to y-axis [-0.5] speed [7.500000];
		sleep 120;
		
		
		turn rthigh to x-axis <56> speed <112.500000>;
		turn rleg to x-axis <-29> speed <367.500000>;
		turn rfoot to x-axis <-60> speed <97.500000>;
		
		turn lthigh to x-axis <0> speed <555.0>;
		turn lleg to x-axis <0> speed <382.500000>;
		turn lfoot to x-axis <0> speed <127.500000>;
		
		move pelvis to y-axis [0] speed [3.750000];
		sleep 120;
		
		
		turn rthigh to x-axis <-44> speed <750.0>;
		turn rleg to x-axis <11> speed <300.0>;
		turn rfoot to x-axis <-19> speed <307.500000>;
		
		turn lthigh to x-axis <35> speed <262.500000>;
		turn lleg to x-axis <8> speed <60.0>;
		turn lfoot to x-axis <-38> speed <285.0>;
		
		move pelvis to y-axis [0.5] speed [3.750000];
		sleep 120;
		
		
		turn rthigh to x-axis <-74> speed <225.0>;
		turn rleg to x-axis <51> speed <300.0>;
		turn rfoot to x-axis <17> speed <270.0>;
		
		turn lthigh to x-axis <41> speed <45.0>;
		turn lleg to x-axis <20> speed <90.0>;
		turn lfoot to x-axis <-47> speed <67.500000>;
		
		
		move pelvis to y-axis [-0.5] speed [7.500000];
		sleep 120;
}

transform()
{
	move pelvis to y-axis [-12] speed [24];
	turn lthigh to x-axis <15> speed <100>;
	turn lleg to x-axis <-60> speed <100>;
	turn lfoot to x-axis <15> speed  <100>;
	turn rthigh to x-axis <15> speed <100>;
	turn rleg to x-axis <-60> speed <100>;
	turn rfoot to x-axis <15> speed  <100>;
	sleep 300;
	return (0);
}

reform()
{
	move pelvis to y-axis [0] speed [24];
	turn lthigh to x-axis <0> speed <100>;
	turn lleg to x-axis <0> speed <100>;
	turn lfoot to x-axis <0> speed  <100>;
	turn rthigh to x-axis <0> speed <100>;
	turn rleg to x-axis <0> speed <100>;
	turn rfoot to x-axis <0> speed  <100>;
	sleep 300;
	return (0);
}

swim()
{
	spin prop around z-axis speed <100>;
	sleep 100;
	return (0);
}

#define BASEPIECE pelvis
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100

#include "../unit_hitbyweaponid_and_smoke.h"


Movement()
{
	while( TRUE )
	{
		isInWater = get IN_WATER;
		if( !inWaterForm )
		{
			if( isInWater == 1 )
			{
				call-script transform();
				inWaterForm = 1;
			}
		}
		else
		{
			if( isInWater == 0 )
			{
				call-script reform();
				inWaterForm = 0;
			}
		}

		if( isMoving )
		{
			if( inWaterForm )
				{
					call-script swim();
			}else{
				if( isAiming ){
					call-script walklegs();
				}
				else
				{
					call-script walk();
				}
			}
		}else{
			sleep 100;
		}
		
	}
	return (0);
}

Create()
{
	hide rmisflare;
	hide lmisflare;
	hide flare;
	isMoving = FALSE;
	isAiming = FALSE;
	inWaterForm = 0;
	gun_3 = 0;
	restore_delay = 3000;
	start-script Movement();
	return (0);
}

StartMoving(reversing)
{
	isMoving = TRUE;
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	while( TRUE )
	{
		if( isInWater == 1 )
		{
			emit-sfx 2 from prop;
			emit-sfx 2 from prop;
			emit-sfx 2 from prop;
			emit-sfx 2 from prop;
		}
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	isMoving = FALSE;
	signal SIGNAL_MOVE;
	return (0);
}


SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
	return (0);
}



static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn torso to y-axis <0.0> speed <90.0>;
	turn turret to y-axis <0.0> speed <90.0>;
	turn misbarrel to x-axis <0.0> speed <90.0>;
	wait-for-turn torso around y-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn misbarrel around x-axis;
	wpn3_lasthead = 0xbadface;
	wpn1_lasthead = 0xbadface;
	isAiming = FALSE;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	set-signal-mask SIGNAL_AIM1;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	isAiming = TRUE;

	turn torso to y-axis heading speed <150.0>;
	if ((wpn1_lasthead == 0xbadface) OR ABSOLUTE_GREATER_THAN(WRAPDELTA(heading - wpn1_lasthead), <7>))
	{
		wpn1_lasthead = 0xbadface;
		wait-for-turn torso around y-axis;
	}
	start-script RestoreAfterDelay();
	wpn1_lasthead = heading;
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 + 0 from flare;
	return (0);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
	return (0);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = barrel;
	return (0);
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = misbarrel;
	return (0);
}

QueryWeapon2(pieceIndex)
{
	if( gun_3 == 0 )
	{
		pieceIndex = lmisflare;
	}
	if( gun_3 == 1 )
	{
		pieceIndex = rmisflare;
	}
	return (0);
}

FireWeapon2()
{
	if( gun_3 == 0 )
	{
		gun_3 = 1;
		return (0);
	}
	if( gun_3 == 1 )
	{
		gun_3 = 0;
		return (0);
	}
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM3;
	isAiming = TRUE;

	turn turret to y-axis heading speed <300.0>;
	turn misbarrel to x-axis <0.0> - pitch speed <300.0>;

	if ((wpn3_lasthead == 0xbadface) OR ABSOLUTE_GREATER_THAN(WRAPDELTA(heading - wpn3_lasthead), <27>))
	{
		wpn3_lasthead = 0xbadface;
		wait-for-turn turret around y-axis;
		wait-for-turn misbarrel around x-axis;
	}
	start-script RestoreAfterDelay();
	wpn3_lasthead = heading;
	return (1);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		explode rleg type BITMAPONLY | NOHEATCLOUD;
		explode torso type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		explode rthigh type FALL | NOHEATCLOUD;
		explode rleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type FALL | NOHEATCLOUD;
		explode barrel type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode pelvis type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode pelvis type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
