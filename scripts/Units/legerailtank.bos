#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  	base, 	leftATurretBase, leftATurret, leftAGun, leftAflare, //5
				leftBTurretBase, leftBTurret, leftBGun, leftBflare, //9
				rightATurretBase, rightATurret, rightAGun, rightAflare, //13
				rightBTurretBase, rightBTurret, rightBGun, rightBflare, //17
		tracks,
		turretBase, turretPivot, turret, 	leftBotRail, leftTopRail, leftFlare, //24
											rightBotRail, rightTopRail, rightFlare, //27
											midBotRail, midTopRail, midFlare; //30



static-var  restore_delay, last_gun_heading, guncount;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_AIM_4			16
#define SIG_AIM_5			32
#define SIG_FIRE1 			64
#define SIG_FIRE2 			128
#define SIG_FIRE3 			256
#define SIG_FIRE4 			512

#define BASEPIECE base
#define HITSPEED <85.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 9
#define MAXTILT 100

StartMoving()
{
	turn base to x-axis <-3> speed <11>;
	wait-for-turn base around x-axis;
	turn base to x-axis <0> speed <11>;
}

StopMoving()
{
	turn base to x-axis <1> speed <5>;
	wait-for-turn base around x-axis;
	turn base to x-axis <0> speed <5>;
}

Create()
{
	hide leftAflare;
	hide leftBflare;
	hide rightAflare;
	hide rightBflare;

	hide leftFlare;
	hide rightFlare;
	hide midFlare;
	restore_delay = 3000;

	guncount = 1;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;

	turn turretBase to y-axis <0> speed <45>;
	turn turretPivot to x-axis <0> speed <20>;

	turn leftATurretBase to y-axis <0> speed <90>;
	turn rightATurretBase to y-axis <0> speed <90>;
	turn leftBTurretBase to y-axis <0> speed <90>;
	turn rightBTurretBase to y-axis <0> speed <90>;

	turn leftATurret to x-axis <0> speed <45>;
	turn rightATurret to x-axis <0> speed <45>;
	turn leftBTurret to x-axis <0> speed <45>;
	turn rightBTurret to x-axis <0> speed <45>;

	stop-spin leftAGun around z-axis decelerate <10.000000>;
	stop-spin leftBGun around z-axis decelerate <10.000000>;
	stop-spin rightAGun around z-axis decelerate <10.000000>;
	stop-spin rightBGun around z-axis decelerate <10.000000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turretBase to y-axis heading speed <30.000000>;
	turn turretPivot to x-axis <0.000000> - pitch speed <15.000000>;
	wait-for-turn turretBase around y-axis;
	wait-for-turn turretPivot around x-axis;
	start-script RestoreAfterDelay();
	last_gun_heading = heading;
	return (1);
}

Rock_Main_Cannon()
{
	turn base to z-axis <0> - (GET KSIN(last_gun_heading)) speed <50.005495>;
	turn base to x-axis <0> - (GET KCOS(last_gun_heading)) speed <50.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

FirePrimary()
{
	//emit-sfx 1024 + 0 from rightFlare;
	
	if(guncount == 1){
		//emit-sfx 1024 + 0 from rightFlare;
		start-script Rock_Main_Cannon();
		//sleep 10;
		guncount = 2;
	}
	if(guncount == 2){
		//emit-sfx 1024 + 0 from midFlare;
		start-script Rock_Main_Cannon();
		//sleep 10;
		guncount = 3;
	}
	if(guncount == 3){
		//emit-sfx 1024 + 0 from leftFlare;
		start-script Rock_Main_Cannon();
		//sleep 10;
		guncount = 1;
	}
}

// Shot1(heading, pitch){
// 	if(guncount == 24){
// 		//emit-sfx 1024 + 0 from rightFlare;
// 		sleep 10;
// 		guncount = 27;
// 	}
// 	if(guncount == 27){
// 		//emit-sfx 1024 + 0 from midFlare;
// 		sleep 10;
// 		guncount = 30;
// 	}
// 	if(guncount == 30){
// 		//emit-sfx 1024 + 0 from leftFlare;
// 		sleep 10;
// 		guncount = 24;
// 	}
// }

AimFromPrimary(piecenum)
{
	piecenum = midFlare;
}

QueryPrimary(piecenum)
{
	if(guncount == 1){
		piecenum = leftFlare;
	}
	if(guncount == 2){
		piecenum = rightFlare;
	}
	if(guncount == 3){
		piecenum = midFlare;
	}
}

/////////////////////////////////////////////////////////////////////////

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn rightATurretBase to y-axis heading speed <100.000000>;
	turn rightATurret to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn rightATurret around x-axis;
	wait-for-turn rightATurretBase around y-axis;
	//start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	spin rightAGun around z-axis speed <900.000000>;
	return (1);
}

Shot2(zero)
{
	signal SIG_FIRE1;
	set-signal-mask SIG_FIRE1;
	emit-sfx 1024 + 1 from rightAflare;
	return(1);
}

AimFromWeapon2(piecenum)
{
	piecenum = rightAGun;
}

QueryWeapon2(piecenum)
{
	piecenum = rightAflare;
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn rightBTurret to x-axis <0.000000> - pitch speed <50.000000>;
	turn rightBTurretBase to y-axis heading speed <100.000000>;
	wait-for-turn rightBTurret around x-axis;
	wait-for-turn rightBTurretBase around y-axis;
	//start-script RestoreAfterDelay();
	return (1);
}

FireWeapon3()
{
	spin rightBGun around z-axis speed <-900.000000>;
	return (1);
}

Shot3(zero)
{
	signal SIG_FIRE2;
	set-signal-mask SIG_FIRE2;
	emit-sfx 1024 + 1 from rightBflare;
	return(1);
}

AimFromWeapon3(piecenum)
{
	piecenum = rightBGun;
}

QueryWeapon3(piecenum)
{
	piecenum = rightBflare;
}
////////////////////////////////////////////////////

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	turn leftATurret to x-axis <0.000000> - pitch speed <50.000000>;
	turn leftATurretBase to y-axis heading speed <100.000000>;
	wait-for-turn leftATurret around x-axis;
	wait-for-turn leftATurretBase around y-axis;
	//start-script RestoreAfterDelay();
	return (1);
}

FireWeapon4()
{
	spin leftAGun around z-axis speed <-900.000000>;
	return (1);
}

Shot4(zero)
{
	signal SIG_FIRE3;
	set-signal-mask SIG_FIRE3;
	emit-sfx 1024 + 1 from leftAflare;
	return(1);
}

AimFromWeapon4(piecenum)
{
	piecenum = leftAGun;
}

QueryWeapon4(piecenum)
{
	piecenum = leftAflare;
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;
	turn leftBTurret to x-axis <0.000000> - pitch speed <50.000000>;
	turn leftBTurretBase to y-axis heading speed <100.000000>;
	wait-for-turn leftBTurret around x-axis;
	wait-for-turn leftBTurretBase around y-axis;
	//start-script RestoreAfterDelay();
	return (1);
}

FireWeapon5()
{
	spin leftBGun around z-axis speed <-900.000000>;
	return (1);
}

Shot5(zero)
{
	signal SIG_FIRE4;
	set-signal-mask SIG_FIRE4;
	emit-sfx 1024 + 1 from leftBflare;
	return(1);
}

AimFromWeapon5(piecenum)
{
	piecenum = leftBGun;
}

QueryWeapon5(piecenum)
{
	piecenum = leftBflare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretBase type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretBase type FALL | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode leftAGun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretBase type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode leftAGun type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;

		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretBase type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode leftAGun type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}