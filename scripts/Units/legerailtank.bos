
#include "../recoil_common_includes.h"

piece  	base, 	turretBaseHeadingPivot,
				turretStrutPivotPitch,
				turretHousing,
				railTopRight, //4
				railBotRight,
				railTopMid, //6
				railBotMid,
				railTopLeft, //8
				railBotLeft,
				leftFlare,
				midFlare,
				rightFlare,
				helperStrut;

static-var  restore_delay, last_gun_heading, guncount, shotcount;


// Signal definitions	
#define SIG_AIM				2
#define SIG_FIRE 			4


#define BASEPIECE base
#define HITSPEED <85.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 9
#define MAXTILT 100


StartMoving()
{
	turn base to x-axis <-3> speed <11>;
	wait-for-turn base around x-axis;
	turn base to x-axis <0> speed <11>;
}

StopMoving()
{
	turn base to x-axis <1> speed <5>;
	wait-for-turn base around x-axis;
	turn base to x-axis <0> speed <5>;
}

Create()
{
	restore_delay = 3000;

	show rightFlare;
	show midFlare;
	show leftFlare;

	move rightFlare to z-axis 	[5] now;
	move midFlare to z-axis 	[5] now;
	move leftFlare to z-axis 	[5] now;

	move railTopLeft	to y-axis [-1] now;
	move railTopRight	to y-axis [-1] now;
	move railTopMid		to y-axis [-1] now;

	move railBotLeft	to y-axis [1] now;
	move railBotRight	to y-axis [1] now;
	move railBotMid		to y-axis [1] now;

	guncount = 4;
	shotcount = 0;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;

	turn turretBaseHeadingPivot to y-axis <0> speed <45>;
	turn turretStrutPivotPitch to x-axis <0> speed <20>;
	move helperStrut to y-axis [0] speed [6];

	guncount = 4;

	//guncount = 1;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if(-1*pitch < <-45>){
		move helperStrut to y-axis [6] speed [6];
		turn turretBaseHeadingPivot to y-axis heading speed <45.000000>;
		turn turretStrutPivotPitch to x-axis <0.000000> - pitch speed <25.000000>;
		wait-for-turn turretBaseHeadingPivot around y-axis;
		wait-for-turn turretStrutPivotPitch around x-axis;
		start-script RestoreAfterDelay();
		last_gun_heading = heading;
		return (1);
	}
	else{
		move helperStrut to y-axis [0] speed [6];
		turn turretBaseHeadingPivot to y-axis heading speed <45.000000>;
		turn turretStrutPivotPitch to x-axis <0.000000> - pitch speed <25.000000>;
		wait-for-turn turretBaseHeadingPivot around y-axis;
		wait-for-turn turretStrutPivotPitch around x-axis;
		start-script RestoreAfterDelay();
		last_gun_heading = heading;
		return (1);
	}
	
}

Rock_Main_Cannon()
{
	turn base to z-axis <0> - ((GET KSIN(last_gun_heading))/4) speed <35.005495>;
	turn base to x-axis <0> - ((GET KCOS(last_gun_heading))/4) speed <35.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <10.000000>;
	turn base to x-axis <0.000000> speed <10.000000>;
}

FirePrimary()
{
	return(0);
	move railTopRight	to y-axis [-1] now;
	move railTopLeft	to y-axis [-1] now;
	move railTopMid		to y-axis [-1] now;
	move railBotLeft	to y-axis [1] now;
	move railBotRight	to y-axis [1] now;
	move railBotMid		to y-axis [1] now;

}

Shot1(zero){
	signal SIG_FIRE;
	set-signal-mask SIG_FIRE;
	if(guncount == 4){
		emit-sfx 1024 + 0 from rightFlare;
		//call-script lua_UnitScriptLight(1, shotcount);
		move railTopRight	to y-axis [0] now;
		move railBotRight	to y-axis [0] now;
		guncount = 6;
		call-script Rock_Main_Cannon();
		move railTopRight	to y-axis [-1] 	speed [0.33];
		move railBotRight	to y-axis [1] 	speed [0.33];
		sleep 330;
	}
	if(guncount == 6){
		emit-sfx 1024 + 0 from midFlare;
		//call-script lua_UnitScriptLight(2, shotcount);
		move railTopMid	to y-axis [0] now;
		move railBotMid	to y-axis [0] now;
		guncount = 8;
		call-script Rock_Main_Cannon();
		move railTopMid	to y-axis [-1] 	speed [0.33];
		move railBotMid	to y-axis [1] 	speed [0.33];
		sleep 330;
		
	}
	if(guncount == 8){
		emit-sfx 1024 + 0 from leftFlare;
		//call-script lua_UnitScriptLight(3, shotcount);
		move railTopLeft	to y-axis [0] now;
		move railBotLeft	to y-axis [0] now;
		guncount = 4;
		call-script Rock_Main_Cannon();
		move railTopLeft	to y-axis [-1] 	speed [0.33];
		move railBotLeft	to y-axis [1] 	speed [0.33];
		sleep 330;
		
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turretStrutPivotPitch;
	return (0);
}

QueryPrimary(piecenum)
{

	if(guncount == 4){
		piecenum = leftFlare;
	}
	else if (guncount ==  6){
		piecenum = rightFlare;
	}
	else if (guncount == 8){
		piecenum = midFlare;
	}

}

SweetSpot(piecenum)
{
	piecenum = base;
}

lua_UnitScriptLight(lightIndex, count)
{
	return 0;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretBaseHeadingPivot type BITMAPONLY | NOHEATCLOUD;
		explode turretHousing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretBaseHeadingPivot type FALL | NOHEATCLOUD;
		explode turretHousing type FALL | NOHEATCLOUD;
		explode railTopLeft type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode railBotMid type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode railTopRight type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode railTopMid type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretBaseHeadingPivot type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turretHousing type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode railTopLeft 	type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode railTopRight 	type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode railBotMid 	type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode railTopMid 	type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretBaseHeadingPivot type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turretHousing type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode railTopLeft  	type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode railTopRight  	type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode railBotMid 	type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode railTopMid 	type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}