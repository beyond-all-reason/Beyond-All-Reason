#include "../recoil_common_includes.h"

piece  base, chamber_flare_fixed, chamber_flare, barrel_glow, barrel_glow_overcharge, flare, gun, chamber, r1, r2, r3, l1, l2, l3, hood, smoke1, aimfromy;

static-var  bMoving, moveSpeed, currentSpeed, animSpeed, terrain,  restore_delay, shooting, pshotcount, sshotcount, weapon1_default_range, reloading, xoffset, yoffset, timeLeft, isfiring, gameframe, lastfired, firetime;


#define TURNRATE 200



// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_MOVE 1
#define SIGNAL_RESTORE 128
#define SIGNAL_LIGHT 64



#define VD_PIECE1 smoke1;
#define VD_AMPHIBIOUS
#define VD_DIRTCEG 1024 + 1
#include "../vehicle_dirt_cegs.h"


#define BASEPIECE base
#define HITSPEED <45.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 7
#define MAXTILT 100
//#define RECOIL_POWER 0
#include "../unit_hitbyweaponid_and_smoke.h"

//#define TB_BASE base 
//#define TB_TURNRATE <12.0> 
//#define TB_TILT_X <0.20>
//#define TB_BANK_Z <0.15> // Do not define this if you dont want banking
//#include "../tilt_bank_mobileunit.h"

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		if (currentSpeed<4) currentSpeed=4;
		animSpeed = 1800 / currentSpeed;
		sleep 142;
	}
}






Create()
{
	
	turn gun to x-axis <0.000000> speed <45.000000>;
	turn gun to y-axis <0.000000> speed <45.000000>;
	
	

	firetime = 54;
	isfiring = 0;
	lastfired = get(GAME_FRAME)-200;

	shooting = 0;
	pshotcount = 0;	
	sshotcount = 0;	

	xoffset	= [3];
	yoffset	= [1];
	


	turn r2 to y-axis <3> now;
	turn r3 to y-axis <6> now;
	turn l2 to y-axis <-3> now;
	turn l3 to y-axis <-6> now;


		move r1 to x-axis [0.000000] speed [0.600000];
		move r2 to x-axis [0.000000] speed [0.600000];
		move r3 to x-axis [0.000000] speed [0.600000];
		move l1 to x-axis [0.000000] speed [0.600000];
		move l2 to x-axis [0.000000] speed [0.600000];
		move l3 to x-axis [0.000000] speed [0.600000];

		move r1 to y-axis [0] speed [0.200000];
		move r2 to y-axis [0] speed [0.200000];
		move r3 to y-axis [0] speed [0.200000];
		move l1 to y-axis [0] speed [0.200000];
		move l2 to y-axis [0] speed [0.200000];
		move l3 to y-axis [0] speed [0.200000];
		wait-for-move r1 along y-axis;



	//hide r1;
	//hide r2;
	//hide r3;
	//hide l1;
	//hide l2;
	//hide l3;
	//hide smoke3;
	hide flare;
	//hide smoke2;
	hide smoke1;
	bMoving = FALSE;
	moveSpeed = get (MAX_SPEED);
	animSpeed = 100;
	restore_delay = 3000;
	
	//call-script SweepFire();
	
}



StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	start-script Vehicle_Dirt_Ceg();
	//START_TILTBANK;
  
}


StopMoving()
{
	signal SIGNAL_MOVE;
	//STOP_TILTBANK;
}



static-var  Stunned;
SetStunned(State)
{
    Stunned = State;
}


TimeToRestore(addTime){
	signal SIGNAL_RESTORE;
	set-signal-mask SIGNAL_RESTORE;
    // This function may not be signal terminated
    // If it has to be, it _must_ be immediately restarted
    // PROBLEM: the time that is slept depends on number of aim calls.
    while((timeLeft > 1) || Stunned){
		//get PRINT(timeLeft, get GAME_FRAME);
        addTime = timeLeft;
        timeLeft = 1;
        sleep addTime;//can sometimes sleep 6000 but never wake up again?
    }
	//get PRINT(77, timeLeft, get GAME_FRAME);
    // The restore section must be atomic :/
	turn gun to x-axis <0.000000> speed <45.000000>;
	turn gun to y-axis <0.000000> speed <45.000000>;
	
	isfiring = 0;
    timeLeft = 0;
	shooting = 0;
	

}



SweepFire()
{
	signal SIGNAL_LIGHT;
	set-signal-mask SIGNAL_LIGHT;
	while (TRUE)
	{
		gameframe = get(GAME_FRAME);
		if (isfiring == 1 AND lastfired+firetime>gameframe)
		{
			
			emit-sfx 2049 from chamber_flare;
			
			
		}

		sleep 20;
	}
}





lua_UnitScriptLight(lightIndex, count)
{
	return 0;
}






AimWeapon1(heading, pitch)
{

    signal SIGNAL_AIM1;
    set-signal-mask SIGNAL_AIM1;
    if (timeLeft == 0)
    {
        start-script TimeToRestore();
    }
    timeLeft = restore_delay;


	
	if (pitch < <-10>) { pitch = <-10>; }
	
    if (shooting==1) {return(0);}


	//reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(2));
	//if (reloading) {
		//return(0);
	//}


	
	//get PRINT(heading);

	if ((bMoving AND heading>800) OR (bMoving AND heading<-800)) return 0;
	//start-script ResetAim();
	turn gun to x-axis 0 - pitch speed <35>;//*
	while(heading > TURNRATE) {
		set HEADING to (get HEADING) + TURNRATE;
		heading=heading - TURNRATE;
		sleep 30;
	}
	while(heading < 0 - TURNRATE) {
		set HEADING to (get HEADING) - TURNRATE;
		heading=heading + TURNRATE;
		sleep 30;
	}
	set HEADING to (get HEADING) + heading;//*/
	wait-for-turn gun around x-axis;

	isfiring = 1;
	return 1;
}





FireWeapon1()
{
	gameframe = get(GAME_FRAME);
	lastfired = gameframe;
	
    shooting=1;
    sshotcount = sshotcount + 1;



	show r1;
	show r2;
	show r3;
	show l1;
	show l2;
	show l3;
	
	move r1 to x-axis xoffset speed [100.000000];
	move r2 to x-axis xoffset speed [100.000000];
	move r3 to x-axis xoffset speed [100.000000];
	move l1 to x-axis 0-xoffset speed [100.000000];
	move l2 to x-axis 0-xoffset speed [100.000000];
	move l3 to x-axis 0-xoffset speed [100.000000];
	move r1 to y-axis 0-yoffset speed [100.000000];
	move r2 to y-axis 0-yoffset speed [100.000000];
	move r3 to y-axis 0-yoffset speed [100.000000];
	move l1 to y-axis 0-yoffset speed [100.000000];
	move l2 to y-axis 0-yoffset speed [100.000000];
	move l3 to y-axis 0-yoffset speed [100.000000];


    call-script lua_UnitScriptLight(1, sshotcount);


	//emit-sfx 1024 + 0 from flare;
	//emit-sfx 1024 + 2 from chamber;
	move gun to z-axis [-4.000000] speed [500.000000];
	//wait-for-move gun along z-axis;
	
	move chamber to z-axis [-6.000000] speed [600.000000];
	wait-for-move chamber along z-axis;
	
	
	move chamber to z-axis [0.000000] speed [3.000000];
	wait-for-move chamber along z-axis;	
	
	move gun to z-axis [0.000000] speed [6.000000];
	wait-for-move gun along z-axis;
	

	

	move r1 to x-axis [0.000000] speed [0.250000];
	move r2 to x-axis [0.000000] speed [0.400000];
	move r3 to x-axis [0.000000] speed [0.70000];
	move l1 to x-axis [0.000000] speed [0.250000];
	move l2 to x-axis [0.000000] speed [0.400000];
	move l3 to x-axis [0.000000] speed [0.700000];
	move r1 to y-axis [0] speed [0.0830000];
	move r2 to y-axis [0] speed [0.1330000];
	move r3 to y-axis [0] speed [0.233000];
	move l1 to y-axis [0] speed [0.083000];
	move l2 to y-axis [0] speed [0.1330000];
	move l3 to y-axis [0] speed [0.233000];


	shooting=0;

}



QueryWeapon1(piecenum)
{
	piecenum = chamber_flare_fixed;
}


AimFromWeapon1(piecenum)
{

	piecenum = aimfromy;
}






Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gun type BITMAPONLY | NOHEATCLOUD;
		explode hood type BITMAPONLY | NOHEATCLOUD;
		explode chamber type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode hood type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode chamber type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gun type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode hood type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode chamber type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gun type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode hood type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode chamber type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
