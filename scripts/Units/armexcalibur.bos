
#include "../recoil_common_includes.h"

piece  base, hatch1, hatch2, post, p1, p2, p3, turret, sleeve, barrel, flare, antenna, light, lightpoint, tail, fins, con, condar, wake, prop, aimfromy;

static-var  activated, restore_delay, animating, shooting, shotcount, deployed, modpitch, Stunned, timeLeft;

// Signal definitions
#define SIGNAL_AIM1				2
#define SIGNAL_MOVE				4
#define SIGNAL_RESTORE			8
#define SIGNAL_TURNON			16


#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 200

///#include "../unit_hitbyweaponid_and_smoke.h"

//#define TB_BASE base 
//#define TB_TURNRATE <30.0> 
//#define TB_TILT_X <-0.32>
//#define TB_BANK_Z <0.5> // Do not define this if you dont want banking -- false, undefined throws error
//#define TB_WAKE_PIECE base
//#define TB_WAKE_FOAM 1024 + 1
//#include "../tilt_bank_submarine.h"



SetStunned (State)
{
    Stunned = State;
}


Create ()
{
	//get PRINT(1232);
	//spin prop around z-axis speed <400>;
	hide flare;
	//move antenna to y-axis [-15] speed [240];
	//move base to z-axis [-15] speed [240];
	Stunned = 0;
	activated = 0;
	animating = 0;
	//call-script InitState ();
	restore_delay = 3000;
	timeLeft = restore_delay;//seems needed to avoid instant cancellation of first aiming anims
	//call-script TB_Init ();
	
	shooting = 0;
	shotcount = 0;
	while ( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	//spin dish around y-axis speed <90>;
}

SetMaxReloadTime (reloadMS)
{
	restore_delay = reloadMS * 2;
}


Propcontrol ()
{
	var currentSpeed;
	while (1)
	{
		currentSpeed = (get CURRENT_SPEED)*1000/60;//TB_maxSpeed;
		spin prop around z-axis speed <1.0>*currentSpeed accelerate <10.0>;
		sleep 100;
	}
}

StartMoving (reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	//START_TILTBANK;
	start-script Propcontrol ();
	while ( TRUE )
	{
		emit-sfx 1024 + 0 from wake;
		sleep 250;
		emit-sfx 1024 + 0 from wake;
		emit-sfx 1024 + 1 from wake;
		sleep 250;
	}	
}

StopMoving ()
{
	signal SIGNAL_MOVE;
	//STOP_TILTBANK;
	stop-spin prop around z-axis decelerate <10.0>;
}




TimeToRestore (addTime){
	signal SIGNAL_RESTORE;
	set-signal-mask SIGNAL_RESTORE;
    // This function may not be signal terminated
    // If it has to be, it _must_ be immediately restarted
    // PROBLEM: the time that is slept depends on number of aim calls.
    while ( (timeLeft > 1) || Stunned){
		//get PRINT (timeLeft, get GAME_FRAME);
        addTime = timeLeft;
        timeLeft = 1;
        sleep addTime;//can sometimes sleep 6000 but never wake up again?
    }
    // The restore section must be atomic :/

	call-script close ();


    timeLeft = 0;
}

////////////



open ()
{	
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
	animating = 1;
	//get PRINT (31);
	//move antenna to y-axis <15> speed <22>;
		turn hatch1 to z-axis <120> speed <120>;
		turn hatch2 to z-axis <-120> speed <120>;
		wait-for-turn hatch1 around z-axis;

		turn post to x-axis <90> speed <90>;
		turn sleeve to x-axis <-90> speed <90>;
		wait-for-turn sleeve around x-axis;
		wait-for-turn post around x-axis;

		move p1 to z-axis [-25] speed [52];
		move p2 to z-axis [-25] speed [30];
		move p3 to z-axis [-25] speed [18];
		wait-for-move p1 along z-axis;


		turn condar to x-axis <-90> speed <90>;
		move barrel to z-axis [8] speed [24];
		move light to z-axis [5] speed [16];
		move antenna to z-axis [-8.5] speed [22];
		wait-for-turn condar around x-axis;
		wait-for-move barrel along z-axis;
		wait-for-move light along z-axis;
		wait-for-move antenna along z-axis;



		spin condar around y-axis speed <90>;
		show lightpoint;

		//sleep 1000;
		deployed = 1;
		animating = 0;

	//get PRINT (32);


	sleep 33;
	start-script TimeToRestore ();
}

close ()
{
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
	animating = 1;
	//get PRINT (51);
	activated = 0;//this might need to be at end of script?
	deployed = 0;
		hide lightpoint;
		stop-spin condar around y-axis;
		turn condar to y-axis <0> speed <90>;
		turn turret to z-axis <0> speed <80>;
		wait-for-turn condar around y-axis;
		wait-for-turn turret around z-axis;
		//sleep 400;

		hide lightpoint;
		turn condar to x-axis <0> speed <90>;
		move barrel to z-axis [0] speed [24];
		move light to z-axis [0] speed [16];
		move antenna to z-axis [0] speed [22];
		//sleep 1000;
		wait-for-turn condar around x-axis;
		wait-for-move barrel along z-axis;
		wait-for-move light along z-axis;
		wait-for-move antenna along z-axis;
		wait-for-move p1 along z-axis;
		wait-for-turn sleeve around x-axis;
		wait-for-turn post around x-axis;

		move p1 to z-axis [0] speed [52];
		move p2 to z-axis [0] speed [30];
		move p3 to z-axis [0] speed [18];
		wait-for-move p1 along z-axis;
		//sleep 1000;

		turn post to x-axis <00> speed <90>;
		turn sleeve to x-axis <0> speed <90>;
		wait-for-turn sleeve around x-axis;
		wait-for-turn post around x-axis;
		//sleep 1000;



		turn hatch1 to z-axis <0> speed <120>;
		turn hatch2 to z-axis <0> speed <120>;
		wait-for-turn hatch1 around z-axis;
		//sleep 1000;
	animating = 0;


	//get PRINT (52);

	sleep 33;
}





lua_UnitScriptLight (lightIndex, count)
{
	return 0;
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"



AimPrimary (heading, pitch)
{

	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	if (timeLeft == 0) //default script form seems to have this 0 so all first calls will cancel aiming animations?
    {
        start-script TimeToRestore ();
    }
    timeLeft = restore_delay;
	
	while (animating) {
		sleep 150;
	}
	


	if ( !activated ) {
		call-script open ();
	}
	activated = 1;//requested open (might be fully open by now?)
	
    if (deployed==0) {
		sleep 150;
	}
	//modpitch = pitch + 90;
	turn turret to z-axis heading speed <50.000000>;
	//turn sleeve to x-axis <0.000000> - modpitch speed <50.000000>;
	turn sleeve to x-axis <-90.000000> - pitch speed <50.000000>;
	wait-for-turn turret around z-axis;
	wait-for-turn sleeve around x-axis;

	return (1);
}

FirePrimary ()
{

    shooting=1;
    shotcount = shotcount + 1;
    emit-sfx 1024 + 2 from flare;
    call-script lua_UnitScriptLight (1, shotcount);
	sleep 1400;
	shooting=0;
}

AimFromPrimary (piecenum)
{
	piecenum = aimfromy;
}

QueryPrimary (piecenum)
{
	piecenum = flare;
}


Killed (severity, corpsetype)
{
	if ( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode post type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode antenna type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode light type BITMAPONLY | NOHEATCLOUD;
		explode condar type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type BITMAPONLY | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return (corpsetype);
	}
	if ( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FALL | NOHEATCLOUD;
		explode antenna type FALL | NOHEATCLOUD;
		explode light type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode condar type FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return (corpsetype);
	}
	if ( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode post type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type SMOKE | FALL | NOHEATCLOUD;
		explode antenna type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode light type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode condar type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode post type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode antenna type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode light type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode condar type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}

