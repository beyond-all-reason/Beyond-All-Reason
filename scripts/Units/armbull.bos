
#include "../recoil_common_includes.h"

piece  lflare, rflare, turret, base, rsleeve, lsleeve, rbarrel, lbarrel, rwheel, lwheel, laxle, raxle, smoke1, smoke2;

static-var  restore_delay, gun_1, timeLeft;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_MOVE 1


#define VD_PIECE1 smoke1;
#define VD_PIECE2 smoke2;
#define VD_AMPHIBIOUS
#define VD_DIRTCEG 1024 + 1
#include "../vehicle_dirt_cegs.h"


#define BASEPIECE base
#define HITSPEED <45.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 6
#define MAXTILT 100
#define RECOIL_POWER 100000
#include "../unit_hitbyweaponid_and_smoke.h"


#define TB_BASE base 
#define TB_TURNRATE <12.0> 
#define TB_TILT_X <0.20>
#define TB_BANK_Z <0.15> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"

Create()
{
	hide smoke1;
	hide rflare;
	hide lflare;
	hide smoke2;
	gun_1 = lflare;
	restore_delay = 3000;
	timeLeft = 0;
	call-script TB_Init();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

StartMoving(reversing)
{
	spin lwheel around x-axis speed <110> accelerate <5>;
	spin rwheel around x-axis speed <110> accelerate <5>;

	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	start-script Vehicle_Dirt_Ceg();
	START_TILTBANK;
}


StopMoving()
{
	signal SIGNAL_MOVE;
	stop-spin lwheel around x-axis;
	stop-spin rwheel around x-axis;
	STOP_TILTBANK;
}
#if 0
static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turret to y-axis <0.0> speed <50.0>;
	turn rsleeve to x-axis <0.0> speed <25.0>;
	turn lsleeve to x-axis <0.0> speed <25.0>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <105.0>;
	turn rsleeve to x-axis <0.0> - pitch speed <65.0>;
	turn lsleeve to x-axis <0.0> - pitch speed <65.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn rsleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}
#else
static-var  Stunned;
SetStunned(State)
{
    Stunned = State;
}


TimeToRestore(addTime){
    // This function may not be signal terminated
    // If it has to be, it _must_ be immediately restarted
    // PROBLEM: the time that is slept depends on number of aim calls.
    while((timeLeft > 1) || Stunned){
		//get PRINT(timeLeft, get GAME_FRAME);
        addTime = timeLeft;
        timeLeft = 1;
        sleep addTime;
    }
    // The restore section must be atomic :/
    timeLeft = 0;

	turn turret to y-axis <0.0> speed <50.0>;
	turn rsleeve to x-axis <0.0> speed <25.0>;
	turn lsleeve to x-axis <0.0> speed <25.0>;
}


AimWeapon1(heading, pitch)
{
    if (timeLeft == 0)
    {
        start-script TimeToRestore();
    }
    timeLeft = restore_delay;
   
    signal SIGNAL_AIM1;
    set-signal-mask SIGNAL_AIM1;

	turn turret to y-axis heading speed <105.0>;
	turn rsleeve to x-axis <0.0> - pitch speed <65.0>;
	turn lsleeve to x-axis <0.0> - pitch speed <65.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn rsleeve around x-axis;

    return (1);
}

#endif

FireWeapon1()
{
	if( gun_1 == 0 )
	{
		move lbarrel to z-axis [-2.400000] speed [500.0];
		emit-sfx 1024 + 0 from lflare;
		sleep 150;
		wait-for-move lbarrel along z-axis;
		move lbarrel to z-axis [0.0] speed [3.0];
		gun_1 = rflare;
		return (0);
	}
	if( gun_1 == 1 )
	{
		move rbarrel to z-axis [-2.400000] speed [500.0];
		emit-sfx 1024 + 0 from rflare;
		sleep 150;
		wait-for-move rbarrel along z-axis;
		move rbarrel to z-axis [0.0] speed [3.0];
		gun_1 = lflare;
	}
}

QueryWeapon1(pieceIndex)
{
	if( gun_1 == 0 )
	{
		pieceIndex = lflare;
	}
	if( gun_1 == 1 )
	{
		pieceIndex = rflare;
	}
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode raxle type BITMAPONLY | NOHEATCLOUD;
		explode rwheel type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode raxle type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode raxle type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwheel type SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode raxle type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwheel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rsleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rbarrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
