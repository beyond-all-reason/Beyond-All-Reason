#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, nano1, nano2, wake1, drone1, drone2, drone3, drone4, turret, plunger, flare, aimy, aimfromy;

static-var  oldHead;
static-var  Stunned;

// Signal definitions
#define SIG_MOVE			2

#define SIG_AIM				4
#define SIG_AIM2			8


#define BASEPIECE base
#define HITSPEED <10.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 8
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"


RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.11> )
		{
			rockSpeed = <1.25> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*2;
			wait-for-turn base around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}



ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
}


RestoreAfterDelay()
{
	sleep 3000;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide wake1;
	hide flare;
	move plunger to z-axis [0.000000] now;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
}


























Activate()
{
}

Deactivate()
{
 }


waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-1.0> speed <1.0>;
		move base to y-axis [0.23] speed [0.17];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <1.0>;
		move base to y-axis [0.0] speed [0.17];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	var bowtime;
	bowtime = 0;
	while( TRUE )
	{
		emit-sfx 1024 + 1 from wake1;
		//if (bowtime) emit-sfx 1024 + 2 from wake2;
        bowtime = !bowtime;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 12000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <1.0>;
	move base to y-axis [0.0] speed [0.17];
}

SweetSpot(piecenum)
{
	piecenum = aimy;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script RestoreAfterDelay();
	emit-sfx 258 from nano2;
	return (0);
}

FirePrimary()
{
	emit-sfx 258 from nano1;
	sleep 150;
	return (1);
}

QueryPrimary(piecenum)
{
	piecenum = aimfromy;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = aimfromy;
	return (0);
}









AimSecondary(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn turret to y-axis heading speed <200.000000>;
	wait-for-turn turret around y-axis;
	return (1);
}

FireSecondary()
{
	move plunger to z-axis [5.000000]  now;

	sleep 25;
	move plunger to z-axis [0.000000] speed [10.000000];
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = turret;
	return (0);
}




Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		return(corpsetype);
	}
	corpsetype = 3 ;
	return corpsetype;
}
