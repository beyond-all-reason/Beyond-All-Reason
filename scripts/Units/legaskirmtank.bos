#include "../recoil_common_includes.h"


//piece  base, flare, turret, sleeve, barrel, gun, turretl, barrell, flarel, turretr, barrelr, flarer;
piece base, tracks, turretBase, barrelPivot, barrelBack, barrelMid, barrelAim, barrelA, barrelB, barrelC, turretTop, flare;

static-var   statechg_DesiredState, statechg_StateChanging, restore_delay, Stunned, timeLeft, last_primary_heading;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_FIRE1 1024
#define SIGNAL_MOVE 1


//#define DEBUG
#include "../debug.h"

#define TB_BASE base 
#define TB_TURNRATE <30.0> 
#define TB_TILT_X <0.1>
#define TB_BANK_Z <0.18> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"



#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 4
#define MAXTILT 100
#define RECOIL_POWER 1000000
#include "../unit_hitbyweaponid_and_smoke.h"




Create()
{
	timeLeft = 0;
	hide flare;
	// hide flarer;
	// hide flarel;
	restore_delay = 3000;
	last_primary_heading = -1000000;
	call-script TB_Init();
	return (0);
}




StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	//start-script Vehicle_Dirt_Ceg();
	START_TILTBANK;
}


StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}


SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
	return (0);
}






TimeToRestore(addTime){
    // This function may not be signal terminated
    // If it has to be, it _must_ be immediately restarted
    // PROBLEM: the time that is slept depends on number of aim calls.
    while((timeLeft > 1) || Stunned){
		//get PRINT(timeLeft, get GAME_FRAME);
        addTime = timeLeft;
        timeLeft = 1;
        sleep addTime;
    }
    // The restore section must be atomic :/
    timeLeft = 0;
	last_primary_heading = -1000000;
	turn turretBase to y-axis <0.000000> speed <40>;
	turn barrelPivot to x-axis <0.000000> speed <40>;
	//stop-spin barrelMid around z-axis decelerate <5>;
	wait-for-turn turretBase around y-axis;
}



AimWeapon1(heading, pitch)
{
	if (timeLeft == 0)
    {
        start-script TimeToRestore();
    }
    timeLeft = restore_delay;
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turretBase to y-axis heading speed <120>;
	turn barrelPivot to x-axis <0.000000> - pitch speed <60>;
	if (get ABS(last_primary_heading - heading)> <20>)
	{
		// seems to take 3 frames for wait-for-turn to process
        wait-for-turn turretBase around y-axis;
		wait-for-turn barrelPivot around x-axis;
	}
	last_primary_heading = heading;
	return (1);
}

FireWeapon1()
{
	//spin barrelMid around z-axis speed <720>;// accelerate <10>;
	emit-sfx 1024 + 0 from flare;
	move barrelA to z-axis [-6] now;
	sleep 150;
	move barrelA to z-axis [0] speed [18];
	emit-sfx 1024 + 0 from flare;
	move barrelB to z-axis [-6] now;
	sleep 150;
	move barrelB to z-axis [0] speed [18];
	emit-sfx 1024 + 0 from flare;
	move barrelC to z-axis [-6] now;
	sleep 150;
	move barrelC to z-axis [0] speed [18];
	//stop-spin barrelMid around z-axis decelerate <30>;
	// move sleeve to z-axis [-3.000000] speed [1250.000000];
	// move barrel to z-axis [-6.000000] speed [1250.000000];
	// wait-for-move sleeve along z-axis;
	// move barrel to z-axis [0.000000] speed [7.500000];
	// move sleeve to z-axis [0.000000] speed [7.500000];
	return (0);
}

AimFromWeapon1(piecenum)
{
	piecenum = barrelPivot;
	return (0);
}

QueryWeapon1(piecenum)
{
	piecenum = flare;
	return (0);
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretBase type BITMAPONLY | NOHEATCLOUD;
		explode barrelPivot type BITMAPONLY | NOHEATCLOUD;
		explode barrelMid type BITMAPONLY | NOHEATCLOUD;
		explode barrelBack type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretBase type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelPivot type FALL | NOHEATCLOUD;
		explode barrelMid type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelBack type FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretBase type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelPivot type SMOKE | FALL | NOHEATCLOUD;
		explode barrelMid type SMOKE | FALL | NOHEATCLOUD;
		explode barrelBack type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretBase type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrelPivot type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrelMid type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrelBack type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
