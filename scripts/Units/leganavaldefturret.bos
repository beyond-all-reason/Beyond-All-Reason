
#include "../recoil_common_includes.h"

piece
mgBarrel1,
barrelHousing1,
shotgunScope,
shotgunBarrel,
shotgunHousing,
shotgunBase,
base,
mgBarrel2,
barrelHousing2,
turretPitchPivot,
cannister1,
ammoBelt,
floats,
turretHeadingPivot,
shotgunFlare,
mgFlare1,
mgFlare2;



static-var restore_delay, wpn1_lasthead, whichBarrel;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4

#define WATER_ROCK_UNITSIZE 17
#include "../floatmotion.h"


#define BASEPIECE base
#define HITSPEED <30.0>
#define MAXTILT 200
#define UNITSIZE 10
#define RECOIL_POWER 10000

#include "../unit_hitbyweaponid_and_smoke.h"


Create()
{
	whichBarrel = 0;
	restore_delay = 4000;
	start-script FloatMotion();
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turretHeadingPivot to y-axis <0> speed <60>;
    turn turretPitchPivot to x-axis <0.000000> speed <30>;
    stop-spin mgBarrel1 around z-axis decelerate <1>;
    stop-spin mgBarrel2 around z-axis decelerate <1>;
	wpn1_lasthead = 1000000;
	set-signal-mask 0;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
    stop-spin mgBarrel1 around z-axis decelerate <100>;
    stop-spin mgBarrel2 around z-axis decelerate <100>;
	start-script ExecuteRestoreAfterDelay();
}


/// dual miniguns
AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turretHeadingPivot to y-axis heading speed <150>;
	turn turretPitchPivot to x-axis <0.000000> - pitch speed <90>;

	if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > 1300) AND ((get ABS(wpn1_lasthead - heading)) < 64236)))
	{
		wpn1_lasthead = 1000000;
		wait-for-turn turretHeadingPivot around y-axis;
		wait-for-turn turretPitchPivot around x-axis;
	}
	wpn1_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{

}

Shot1(zero){
    if(whichBarrel == 0){
        emit-sfx 1024 + 0 from mgFlare1;
        spin mgBarrel1 around z-axis speed <540> accelerate <100>;
        sleep 10;
        whichBarrel = 1;
    }
    else if(whichBarrel == 1){
        emit-sfx 1024 + 0 from mgFlare2;
        spin mgBarrel2 around z-axis speed <540> accelerate <100>;
        sleep 10;
        whichBarrel = 0;
    }
}

AimFromPrimary(piecenum)
{
	piecenum = barrelHousing1;
}

QueryPrimary(piecenum)
{
    if(whichBarrel == 0){
        pieceNum = mgFlare1;
    }
    else if(whichBarrel == 1){
        pieceNum = mgFlare2;
    }
}

SweetSpot(piecenum)
{
	piecenum = base;
}

/// shotgun
AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	//turn turretPitchPivot to x-axis <0.000000> - pitch speed <60>;
	wait-for-turn turretHeadingPivot around y-axis;
	wait-for-turn turretPitchPivot around x-axis;
	return (1);
}

FireSecondary()
{
    emit-sfx 1024 + 1 from shotgunFlare;
    move shotGunBarrel to z-axis [-3] now;
    sleep 10;
    move shotGunBarrel to z-axis [3] speed [3];
}

AimFromSecondary(piecenum)
{
	piecenum = shotgunBase;
}

QuerySecondary(piecenum)
{
    piecenum = shotgunFlare;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretHeadingPivot type BITMAPONLY | NOHEATCLOUD;
		explode floats type BITMAPONLY | NOHEATCLOUD;
		explode shotgunBarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode mgBarrel1 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretHeadingPivot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode floats type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode shotgunBarrel type FALL | NOHEATCLOUD;
		explode mgBarrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretHeadingPivot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode floats type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode shotgunBarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode mgBarrel1 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretHeadingPivot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode floats type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode shotgunBarrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode mgBarrel1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
