
#include "../recoil_common_includes.h"

piece  flare21, flare22, base, turret2, launcher2, door1, door2, flare11, flare12, flare13, ground, wake, bow;

static-var  gun_1, gun_3, restore_delay, oldHead;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM3 1024
#define SIGNAL_MOVE 1


#define RB_MASS 40
#define RB_LENGTH 8
#define RB_WIDTH 3
#define RB_PITCH_ACCELERATION 10
#define RB_ROLL_ACCELERATION 8
#define RB_RECOIL_ENERGY_1 700
#define RB_RECOIL_ENERGY_3 250
#define RB_WAKE_PIECE wake
#define RB_WAKE_CEG 1024 + 0
#define RB_BOWSPLASH_PIECE bow
#define RB_BOWSPLASH_CEG 1024 + 1

#include "../bar_ships_common.h"


Create()
{
	hide bow;
	hide wake;
	hide flare13;
	hide flare12;
	hide flare11;
	hide flare22;
	hide flare21;
	hide ground;
	gun_1 = 1;
	gun_3 = 0;
	restore_delay = 3000;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}

abaim()
{
	sleep 4000;
	signal SIGNAL_AIM3;
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 3;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }

	turn turret2 to y-axis <0.0> speed <70.016484>;
	turn launcher2 to x-axis <0.0> speed <30.005495>;
	turn door1 to z-axis <0> speed <160>;
	turn door2 to z-axis <0> speed <160>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}


StartMoving(reversing)
{

}

StopMoving()
{

}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;

	turn door1 to z-axis <-90> speed <160>;
	turn door2 to z-axis <90> speed <160>;
	wait-for-turn door1 around z-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM3;
	set-signal-mask SIGNAL_AIM3;
	turn turret2 to y-axis heading speed <170.038462>;
	turn launcher2 to x-axis <0.0> - pitch speed <130.027473>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn launcher2 around x-axis;
	start-script abaim();
	return (1);
}

FireWeapon1()
{
	gun_1 = (gun_1 + 1 ) % 3;
	sleep 100;
	RB_RECOILBOAT(0, RB_RECOIL_ENERGY_1);
}

FireWeapon2()
{
	gun_3 = !gun_3;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = flare12;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = launcher2;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare11 + gun_1;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flare21 + gun_3;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type BITMAPONLY | NOHEATCLOUD;
		explode launcher2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		explode door1 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode launcher2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type FALL | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type SMOKE | FALL | NOHEATCLOUD;
		explode launcher2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type SMOKE | FALL | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode launcher2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
