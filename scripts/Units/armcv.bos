
#include "../recoil_common_includes.h"

#define SIGNAL_BUILD 2

piece  base, turret, doorl, doorr, nano1, nano2, cagelight, cagelight_emit;

static-var  readyToBuild, nano;


#define SIGNAL_MOVE 1

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100
#include "../unit_hitbyweaponid_and_smoke.h"

#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <0.1>
#define TB_BANK_Z <0.1> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"


Create()
{
	hide nano2;
	hide nano1;
	hide cagelight_emit;
	readyToBuild = 1;
	nano=0;
	call-script TB_Init();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;

	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;

	STOP_TILTBANK;
}


StartBuilding(heading, pitch)
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;

	if (!readyToBuild){
		turn doorl to z-axis <60> speed <182>;
		turn doorr to z-axis <-60> speed <182>;
		wait-for-turn doorl around z-axis;

		move turret to y-axis [5.5] speed [11];
		wait-for-move turret along y-axis;
		readyToBuild = TRUE;
	}

	turn turret to y-axis heading speed <160.038462>;
	turn nano1 to x-axis -1*pitch now;
	wait-for-turn turret around y-axis;
	
	set INBUILDSTANCE to 1;

	show nano1;
	show nano2;
	show cagelight_emit;
	spin cagelight around z-axis speed <200> accelerate <2>;
}

StopBuilding()
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;

	hide nano2;
	hide nano1;
	hide cagelight_emit;
	stop-spin cagelight around z-axis decelerate <2>;

	sleep 6000;
	set INBUILDSTANCE to 0;
	readyToBuild = FALSE;
	
	turn turret to y-axis <0> speed <160.038462>;
	turn nano1 to x-axis <0> now;
	wait-for-turn turret around y-axis;

	move turret to y-axis [0] speed [11];
	wait-for-move turret along y-axis;

	turn doorl to z-axis <0> speed <182>;
	turn doorr to z-axis <0> speed <182>;
	wait-for-turn doorl around z-axis;
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = nano1 + nano;
	nano = !nano;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode nano1 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode nano1 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
