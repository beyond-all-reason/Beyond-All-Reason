
#include "../recoil_common_includes.h"

piece  flarel,flarer, barrelr,barrell,turret, base, aimfrom;

static-var  restore_delay, gun_2;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512




#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100
#define RECOIL_POWER 20000 
#include "../unit_hitbyweaponid_and_smoke.h"

#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <0.10>
#define TB_BANK_Z <0.10> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"


Create()
{
	hide aimfrom;
	hide flarel;
	hide flarer;
	gun_2 = flarel;
	restore_delay = 3000;
	call-script TB_Init();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;

	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}


SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.0> speed <80.0>;
	turn barrell to x-axis <0.0> speed <50.0>;
	turn barrelr to x-axis <0.0> speed <50.0>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <80.0>;
	turn barrell to x-axis <0.0> - pitch speed <50.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrell around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	sleep 150;
	gun_2 = !gun_2;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = barrell;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flarel;
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	turn turret to y-axis heading speed <80.0>;
	turn barrelr to x-axis <0.0> - pitch speed <50.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrelr around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	sleep 150;
	gun_2 = !gun_2;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = barrelr;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flarer;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode barrell type FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		
		
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrell type FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		explode barrelr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrell type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		
		explode barrelr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrell type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		
		explode barrelr type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		
	return corpsetype;
}
