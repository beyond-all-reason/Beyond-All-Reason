
#include "../recoil_common_includes.h"

piece  base, flare, turret, door1, door2, door3, door4, barrel, stand, aimpoint;

static-var  turretOpen, restoreDelay, trajectoryMode, stunned;

#define SIGNAL_AIM2			1
#define LOW_TRAJECTORY		0
#define HIGH_TRAJECTORY		1

openTurret()
{
	turn door1 to x-axis <0.0> speed <227.093407>;
	turn door2 to z-axis <0.0> speed <227.093407>;
	turn door3 to x-axis <0.0> speed <227.093407>;
	turn door4 to z-axis <0.0> speed <227.093407>;
	wait-for-turn door1 around x-axis;

	move door1 to y-axis [0] speed [45.0];
	move door2 to y-axis [0] speed [45.0];
	move door3 to y-axis [0] speed [45.0];
	move door4 to y-axis [0] speed [45.0];
	move stand to y-axis [0] speed [34];
	wait-for-move door1 along y-axis;
	wait-for-move stand along y-axis;


	move barrel to z-axis [0] speed [51];
	wait-for-move barrel along z-axis;
}

closeTurret()
{
	turn stand to y-axis <0> speed <100>;
	turn turret to x-axis <0> speed <50>;
	move barrel to z-axis [-16] speed [51];
	wait-for-turn stand around y-axis;
	wait-for-turn turret around x-axis;
	wait-for-move barrel along z-axis;

	move door1 to y-axis [15] speed [45.0];
	move door2 to y-axis [15] speed [45.0];
	move door3 to y-axis [15] speed [45.0];
	move door4 to y-axis [15] speed [45.0];
	move stand to y-axis [-16] speed [34];
	wait-for-move door1 along y-axis;
	wait-for-move stand along y-axis;

	turn door1 to x-axis <-90.0> speed <227.093407>;
	turn door2 to z-axis <-90.0> speed <227.093407>;
	turn door3 to x-axis <90.0> speed <227.093407>;
	turn door4 to z-axis <90.0> speed <227.093407>;
	wait-for-turn door1 around x-axis;
}


Go()
{
	if(!turretOpen)
	{
		call-script openTurret();
	}
	turretOpen = 1;
	set ARMORED to 0;
	return (0);
}

Stop()
{
	set ARMORED to 1;
	turretOpen = 0;
	call-script closeTurret();
	return (0);
}

ExecuteRestoreAfterDelay()
{
    if (stunned)
	{
        return (1);
    }

	//set-signal-mask 0;
	turn turret to y-axis <0.0> speed <100.016484>;
	turn turret to x-axis <0.0> speed <50.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;

	start-script Stop();
}

SetStunned(state)
{
    stunned = state;
	if (!stunned)
	{
	    start-script RestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	set-signal-mask SIGNAL_AIM2;
	sleep restoreDelay;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide aimpoint;
	hide flare;
	hide flare;
	turretOpen = 0;
	restoreDelay = 10000;

	SLEEP_UNTIL_UNITFINISHED;

	start-script RestoreAfterDelay();
	return (0);
}

#define BASEPIECE base
#define MAXTILT 0
#include "../unit_hitbyweaponid_and_smoke.h"

Activate()
{
	signal SIGNAL_AIM2;
	trajectoryMode = HIGH_TRAJECTORY;
}

Deactivate()
{
	signal SIGNAL_AIM2;
	trajectoryMode = LOW_TRAJECTORY;
}

aimCommon(heading, pitch)
{
	while(!turretOpen)
	{
		sleep 250;
	}

	turn stand to y-axis heading speed <50.0>;
	turn turret to x-axis <0.0> - pitch speed <45.0>;
	wait-for-turn stand around y-axis;
	wait-for-turn turret around x-axis;
}

AimWeapon1(heading, pitch)
{
	start-script Go();

	if(trajectoryMode != LOW_TRAJECTORY)
	{
		return(0);
	}

	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;

	call-script aimCommon(heading, pitch);
	start-script RestoreAfterDelay();

	// Prevent low-trajectory "bonus shots" while high-trajectory is reloading
	var reloading;
	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(2));
	if( reloading )
	{
		return(0);
	}

	return (1);
}

AimWeapon2(heading, pitch)
{
	start-script Go();

	if(trajectoryMode != HIGH_TRAJECTORY)
	{
		return(0);
	}

	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;

	call-script aimCommon(heading, pitch);
	start-script RestoreAfterDelay();
	return (1);
}

fireCommon()
{
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [-4.500000] speed [1250.0];
	sleep 150;
	move barrel to z-axis [0.0] speed [7.500000];
}

FireWeapon1()
{
	call-script fireCommon();
}

FireWeapon2()
{
	call-script fireCommon();
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimpoint;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = aimpoint;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flare;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type BITMAPONLY | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode stand type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FALL | NOHEATCLOUD;
		explode door2 type FALL | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode stand type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode stand type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode stand type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
