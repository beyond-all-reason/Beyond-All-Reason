
#include "../recoil_common_includes.h"

piece  base, turret, spindle, flare1, flare2, flare3, flare4, flare5, flare6, 
							barrel1, barrel2, barrel3, barrel4, barrel5, barrel6,
							sleeve1, sleeve2, sleeve3, sleeve4, sleeve5, sleeve6,
							center1, center2, center3, center4, center5, center6;

static-var  gun_1, restore_delay, shotcount, spin_speed, spin_delay, time_to_reload, fire_rotation, last_primary_heading, last_primary_pitch;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_SHOOT1 16


#define BASEPIECE base
#define MAXTILT 0
#include "../unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare5;
	hide flare6;
	//todo rotate flare in model 
	turn flare2 to x-axis <-60> now;
	turn flare3 to x-axis <-120> now;
	turn flare4 to x-axis <-180> now;
	turn flare5 to x-axis <-240> now;
	turn flare6 to x-axis <-300> now;

	gun_1 = 1;
	restore_delay = 500;
	spin_speed = 120;
	fire_rotation = FALSE;
	last_primary_heading = -1000000;
	last_primary_pitch = 0;
	return (0);
}

lua_UnitScriptLight(lightIndex, count) 
{
	return 0;
}

RestoreAfterDelay()
{
	return (0);
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;

	turn turret to y-axis heading speed <15.0>;
	if (fire_rotation == FALSE)
	{
		// if corbuzz has not fired recently, AimWeapon1 should turn the spindle
		turn spindle to x-axis <60> * (gun_1 - 1) - pitch speed <1>*spin_speed;
	}

	// values in <> are degrees per second
	// otherwise angles are in COB angular unit (cau) - There are 65536 cau in a circle
	// In general, 6 cau per frame ~= 1 degree per second
	// only wait-for-turn if it takes more than 3 frames to finish the turn
	if ( (get ABS(last_primary_heading - heading)>270) )
	{
		// seems to take 3 frames for wait-for-turn to process
		wait-for-turn turret around y-axis;
	}
	last_primary_heading = heading;
	last_primary_pitch = pitch;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	// make spindle turn faster as unit gains XP and decreases reload time
	// GET WEAPON_RELOADSTATE is in frames, we need seconds (factor of 30)
	// use -4 to account for 3 frame hold after firing,
	// so animation finishes 1 frame before it is ready to fire again
	// use 60 here so spindle turns 60 degrees during its reload time
	spin_speed = 60 * 30/((GET WEAPON_RELOADSTATE(1)) - (GET GAME_FRAME) - 4);

	// set minimum rotation speed for low XP conditions
	spin_speed = GET MAX(spin_speed,250);

	fire_rotation = TRUE;
	if( gun_1 == 1 )
	{
		shotcount = shotcount + 1;
		move barrel1 to z-axis [-6.0] now;
		emit-sfx 1024 + 0 from flare1;
		call-script lua_UnitScriptLight(1, shotcount);
		sleep 100;
		turn spindle to x-axis <60> * (gun_1) - last_primary_pitch speed <1>*spin_speed;
		move barrel1 to z-axis [0.0] speed [6];
	}
	if( gun_1 == 2 )
	{
		shotcount = shotcount + 1;
		move barrel2 to y-axis [-5.0] now;
		move barrel2 to z-axis [-3.0] now;
		emit-sfx 1024 + 0 from flare2;
		call-script lua_UnitScriptLight(2, shotcount);
		sleep 100;
		turn spindle to x-axis <60> * (gun_1) - last_primary_pitch speed <1>*spin_speed;
		move barrel2 to y-axis [0.0] speed [5];
		move barrel2 to z-axis [0.0] speed [3];
	}
	if( gun_1 == 3 )
	{
		shotcount = shotcount + 1;
		move barrel3 to y-axis [-5.0] now;
		move barrel3 to z-axis [3.0] now;
		emit-sfx 1024 + 0 from flare3;
		call-script lua_UnitScriptLight(3, shotcount);
		sleep 100;
		turn spindle to x-axis <60> * (gun_1) - last_primary_pitch speed <1>*spin_speed;
		move barrel3 to y-axis [0.0] speed [5];
		move barrel3 to z-axis [0.0] speed [3];
	}
	if( gun_1 == 4 )
	{
		shotcount = shotcount + 1;
		move barrel4 to z-axis [6.0] now;
		emit-sfx 1024 + 0 from flare4;
		call-script lua_UnitScriptLight(4, shotcount);
		sleep 100;
		turn spindle to x-axis <60> * (gun_1) - last_primary_pitch speed <1>*spin_speed;
		move barrel4 to z-axis [0.0] speed [6];
	}
	if( gun_1 == 5 )
	{
		shotcount = shotcount + 1;
		move barrel5 to y-axis [5.0] now;
		move barrel5 to z-axis [3.0] now;
		emit-sfx 1024 + 0 from flare5;
		call-script lua_UnitScriptLight(5, shotcount);
		sleep 100;
		turn spindle to x-axis <60> * (gun_1) - last_primary_pitch speed <1>*spin_speed;
		move barrel5 to y-axis [0.0] speed [5];
		move barrel5 to z-axis [0.0] speed [3];
	}
	if( gun_1 == 6 )
	{
		shotcount = shotcount + 1;
		move barrel6 to y-axis [5.0] now;
		move barrel6 to z-axis [-3.0] now;
		emit-sfx 1024 + 0 from flare6;
		call-script lua_UnitScriptLight(6, shotcount);
		sleep 100;
		turn spindle to x-axis <60> * (gun_1) - last_primary_pitch speed <1>*spin_speed;
		move barrel6 to y-axis [0.0] speed [5];
		move barrel6 to z-axis [0.0] speed [3];
	}

	++gun_1;
	if( gun_1 == 7 )
	{
		gun_1 = 1;
	}

	// FireWeapon1 controls animation right after firing
	// but after 1 second, AimWeapon1 should regain control over spindle animation
	// and last_primary_heading and last_primary_pitch should be reset
	signal SIGNAL_SHOOT1;
	set-signal-mask SIGNAL_SHOOT1;
	sleep 1000;
	fire_rotation = FALSE;
	last_primary_heading = -1000000;
	last_primary_pitch = 0;

}

QueryWeapon1(pieceIndex)
{
	if( gun_1 == 1 )
	{
		pieceIndex = flare1;
	}
	if( gun_1 == 2 )
	{
		pieceIndex = flare2;
	}
	if( gun_1 == 3 )
	{
		pieceIndex = flare3;
	}
	if( gun_1 == 4 )
	{
		pieceIndex = flare4;
	}
	if( gun_1 == 5 )
	{
		pieceIndex = flare5;
	}
	if( gun_1 == 6 )
	{
		pieceIndex = flare6;
	}
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = spindle;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode barrel1 type BITMAPONLY | NOHEATCLOUD;
		explode barrel2 type BITMAPONLY | NOHEATCLOUD;
		explode barrel3 type BITMAPONLY | NOHEATCLOUD;
		explode barrel4 type BITMAPONLY | NOHEATCLOUD;
		explode barrel5 type BITMAPONLY | NOHEATCLOUD;
		explode barrel6 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode barrel3 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode barrel4 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode barrel5 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode barrel6 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
	explode barrel1 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
	explode barrel2 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
	explode barrel3 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
	explode barrel4 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
	explode barrel5 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
	explode barrel6 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
	return(corpsetype);
}
