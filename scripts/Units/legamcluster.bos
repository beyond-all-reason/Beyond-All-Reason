#include "../recoil_common_includes.h"

//piece  base, flare, turret, sleeve, barrel;
piece base, tracks, turret, sleeve, cannon, flare;

static-var  restore_delay, wpnheading, isAiming;
static-var  out_of_arc_count;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256



#define BASEPIECE base
#define HITSPEED <45.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 4
#define MAXTILT 100
#define RECOIL_POWER 100000
#include "../unit_hitbyweaponid_and_smoke.h"

#define TB_BASE base 
#define TB_TURNRATE <11.0> 
#define TB_TILT_X <0.15>
#define TB_BANK_Z <0.15> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"

Create()
{
	hide flare;
	restore_delay = 3000;
	out_of_arc_count = 0;
	wpnheading = 0;
	isAiming = 0;
	call-script TB_Init();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}


SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.0> speed <50.005495>;
	turn sleeve to x-axis <0.0> speed <50.005495>;
	wpnheading = 0;
	isAiming = 0;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	set-signal-mask SIGNAL_AIM1;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	//get PRINT ( heading,isAiming,wpnheading,RAND(1,256) ) ;

	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;

	// out of firing arc aim calls happen during "preaiming" logic
	// logic to reset gun to neutral if the target heading has been
	// out of firing arc for ~3 seconds
	if ( (heading < -16384) OR (heading > 16384) )
	{
		// assume reaim time is every 15 frames, 0.5 seconds
		out_of_arc_count = out_of_arc_count + 1;
		// after 6 aim checks, if target is still out of arc, restore gun to neutral
		if (out_of_arc_count > 6)
		{
			start-script ExecuteRestoreAfterDelay();
		}
		return (0);
	}
	out_of_arc_count = 0;

	turn turret to y-axis heading speed <35.005495>;
	turn sleeve to x-axis <0.0> - pitch speed <35.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
 	emit-sfx 1024 + 0 from flare;
 	move cannon to z-axis [-3.0] speed [1250.0];
 	wait-for-move cannon along z-axis;
 	move cannon to z-axis [0.0] speed [7.500000];
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
	//return (0);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
	//return (0);
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode cannon type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FALL | NOHEATCLOUD;
		explode cannon type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode cannon type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode cannon type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
