#include "../recoil_common_includes.h"

//piece  base, flare, turret, sleeve, barrel, gun, turretl, barrell, flarel, turretr, barrelr, flarer;
//piece base, turretBase, gun, gearR, gearL, coverR, coverL;
piece base, turretBase, turretStrut, gun, flarer, flarel, smoke1, smoke2;

static-var  statechg_DesiredState, statechg_StateChanging, restore_delay, whichGun, timeLeft, targetswap, isfiring, gameframe, lastfired, timer, firetime, oldhead, aimAdj, oldsteerheading;

// Signal definitions
// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_MOVE 1
#define SIGNAL_LIGHT	4
#define SIGNAL_RESTORE	8



#define VD_PIECE1 smoke1;
#define VD_PIECE2 smoke2;
#define VD_AMPHIBIOUS
#define VD_DIRTCEG 1024 + 1
#include "../vehicle_dirt_cegs.h"

Steering(heading, steery, currentSpeed)
{
	//signal SIGNAL_MOVE;
	//set-signal-mask SIGNAL_MOVE;
	while(1)
	{
		heading = get HEADING;
		aimAdj = (heading - oldsteerheading);
		sleep 33;
		oldsteerheading = heading;
	}
}

#define BASEPIECE base
#define HITSPEED <45.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 7
#define MAXTILT 100
#define RECOIL_POWER 0
#include "../unit_hitbyweaponid_and_smoke.h"


#define TB_BASE base 
#define TB_TURNRATE <12.0> 
#define TB_TILT_X <0.20>
#define TB_BANK_Z <0.15> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"


Create()
{
	//hide flare;
	// hide flarer;
	// hide flarel;
	start-script Steering();
	timeLeft = 0;
    isfiring = 0;
	oldsteerheading = get HEADING;
	oldhead = 1000000;
	aimAdj = 0;
	timer = 0;
	targetswap = 0;
	firetime = 54;
	lastfired = get(GAME_FRAME)-200;	
	restore_delay = 3000;
	//call-script TB_Init();
	call-script SweepFire();
	whichGun = 0;
	return (0);
}



SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	start-script Vehicle_Dirt_Ceg();
	//START_TILTBANK;
}


StopMoving()
{
	signal SIGNAL_MOVE;
	//STOP_TILTBANK;
}


static-var  Stunned;
SetStunned(State)
{
    Stunned = State;
}


TimeToRestore(addTime){
	signal SIGNAL_RESTORE;
	set-signal-mask SIGNAL_RESTORE;
    // This function may not be signal terminated
    // If it has to be, it _must_ be immediately restarted
    // PROBLEM: the time that is slept depends on number of aim calls.
    while((timeLeft > 1) || Stunned){
		//get PRINT(timeLeft, get GAME_FRAME);
        addTime = timeLeft;
        timeLeft = 1;
        sleep addTime;//can sometimes sleep 6000 but never wake up again?
    }
	//get PRINT(77, timeLeft, get GAME_FRAME);
    // The restore section must be atomic :/
	turn turretBase to y-axis <0.000000> speed <40>;
	turn turretStrut to x-axis <0.000000> speed <40>;

    timeLeft = 0;
    isfiring = 0;
	oldhead = 1000000;
	aimAdj = 0;
	timer = 0;
	targetswap = 0;
		
	//stop-spin barrelMid around z-axis decelerate <5>;
	//wait-for-turn turretBase around y-axis;
}


SweepFire()
{
	signal SIGNAL_LIGHT;
	set-signal-mask SIGNAL_LIGHT;
	while (TRUE)
	{
		gameframe = get(GAME_FRAME);
		//get PRINT(123, lastfired, gameframe, lastfired+firetime>gameframe);
		//get PRINT(1235, targetswap, isfiring, timer);
		if (targetswap == 1 AND isfiring == 1 AND lastfired+firetime>gameframe)
		{
			if (whichGun == 0) {
				emit-sfx 2048 from flarer;
			} else {
				emit-sfx 2048 from flarel;
			}
			timer = timer + 1;
		}
		if (timer > 150)
		{
			//signal SIGNAL_AIM;
			//timer = 0;
			//start-script RestoreAfterDelay();
		}
		sleep 20;
	}
}




AimWeapon1(heading, pitch)
{
    signal SIGNAL_AIM1;
    set-signal-mask SIGNAL_AIM1;
    if (timeLeft == 0)
    {
        start-script TimeToRestore();
    }
    timeLeft = restore_delay;
	if (get ABS(oldhead - heading) > 500)
	{
		targetswap = 1;
	}
	gameframe = get(GAME_FRAME);
	turn turretBase to y-axis heading - aimAdj speed <65>;
	turn turretStrut to x-axis <0.000000> - pitch speed <65>;
	if (((get ABS(oldhead - heading)) > 65536) OR(((get ABS(oldhead - heading)) > 5000) AND ((get ABS(oldhead - heading)) < 64236)))
	{
		oldhead = 1000000;
		wait-for-turn turretBase around y-axis;
		wait-for-turn turretStrut around x-axis;
	}
	oldhead = heading;
	isfiring = 1;
    return (1);
}



FireWeapon1()
{
	gameframe = get(GAME_FRAME);
	lastfired = gameframe;
	if (whichGun == 0){
		//emit-sfx 1024 + 0  from flarer;
		sleep 2000;
		whichGun = 1;
		return(0);
	}

	if (whichGun == 1){
		//emit-sfx 1024 + 0  from flarel;
		sleep 2000;
		whichGun = 0;
		return(0);
	}
	//emit-sfx 1024 + 0 from flare;

	// move sleeve to z-axis [-3.000000] speed [1250.000000];
	// move barrel to z-axis [-6.000000] speed [1250.000000];
	// wait-for-move sleeve along z-axis;
	// move barrel to z-axis [0.000000] speed [7.500000];
	// move sleeve to z-axis [0.000000] speed [7.500000];
	return (0);
}

AimFromWeapon1(piecenum)
{
	if (whichGun == 0){
		piecenum = flarer;
		//whichGun = 1;
	}

	if (whichGun == 1){
		piecenum = flarel;
		//whichGun = 0;
	}
	return (0);
}

QueryWeapon1(piecenum)
{
	if (whichGun == 0){
		piecenum = flarer;
		//whichGun = 1;
	}

	if (whichGun == 1){
		piecenum = flarel;
		//whichGun = 0;
	}
	return (0);
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		// explode base type BITMAPONLY | NOHEATCLOUD;
		// explode turretBase type BITMAPONLY | NOHEATCLOUD;
		// explode barrelPivot type BITMAPONLY | NOHEATCLOUD;
		// explode barrelMid type BITMAPONLY | NOHEATCLOUD;
		// explode barrelBack type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		// explode base type BITMAPONLY | NOHEATCLOUD;
		// explode turretBase type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode barrelPivot type FALL | NOHEATCLOUD;
		// explode barrelMid type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode barrelBack type FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		// explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode turretBase type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode barrelPivot type SMOKE | FALL | NOHEATCLOUD;
		// explode barrelMid type SMOKE | FALL | NOHEATCLOUD;
		// explode barrelBack type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		// explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode turretBase type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		// explode barrelPivot type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		// explode barrelMid type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		// explode barrelBack type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
