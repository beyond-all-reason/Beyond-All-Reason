#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

// piece  base, steer, turret, fwheel, bwheel, gunr, sleever, barrelr, flarer, gunr2, sleever2, barrelr2, flarer2,
// 		gunl, sleevel, barrell, flarel, gunl2, sleevel2, barrell2, flarel2;

piece base, flWheel, frWheel, rrTrack, rlTrack, turret, aimfrom, sleeveTop, sleeveBottom, flareTop, flareBottom, barrelTop, barrelBottom, flTyre, frTyre;
static-var  restore_delay, moveSpeed, wheelSpeed, Static_Var_1, whichGun, statechg_DesiredState, 
			statechg_StateChanging, oldHeading;

// Signal definitions
#define SIG_MOVE 			2
#define SIG_AIM				4
#define SIG_FIRE1			8

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.005495>;
	turn base to z-axis <0> - anglez speed <50.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
	return (0);
}

Steering(heading, steery, currentSpeed)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while(1)
	{
		heading = get HEADING;
		steery = (heading - oldheading)*3;
		turn flWheel to y-axis steery speed <180>;
		//turn flCover to y-axis steery speed <180>;	
		turn frWheel to y-axis steery speed <180>;
		//turn frCover to y-axis steery speed <180>;		
		currentSpeed = <2.5> *((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if (currentSpeed < <100>) currentSpeed = <100>;
		spin flTyre around x-axis speed (currentSpeed*4.0);
		spin frTyre around x-axis speed (currentSpeed*4.0);
		sleep 66;
		oldheading = heading;
	}
}

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

//#include "unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide flareTop;
	hide flareBottom;
	Static_Var_1 = 0;
	whichGun = 9;
	oldheading = get HEADING;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

StartMoving()
{
    start-script Steering();
}

StopMoving()
{
    signal SIG_MOVE;
    stop-spin flTyre around x-axis;
    stop-spin frTyre around x-axis;
}

//following block returns weapon in straight position after firing

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = 2000;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
   if (Stunned) {
       return (1);
    }
	whichGun = 9;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn sleeveTop to x-axis <0.000000> speed <50.000000>;
	turn sleeveBottom to x-axis <0.000000> speed <50.000000>;
 }
 
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <620.000000>;
	turn sleeveTop to x-axis <0.000000> - pitch speed <200.000000>;
	turn sleeveBottom to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeveBottom around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Shot1(zero) {
	signal SIG_FIRE1;
	set-signal-mask SIG_FIRE1;
	if (whichGun == 9){
		emit-sfx 1024 + 0 from flareTop;
		move barrelTop to z-axis [-5] now;
		move barrelTop to z-axis [0] speed [10];
		whichGun = 10;
		sleep 150;
	}
	if (whichGun == 10){
		emit-sfx 1024 + 0 from flareBottom;
		move barrelBottom to z-axis [-5] now;
		move barrelBottom to z-axis [0] speed [10];
		whichGun = 9;
		sleep 150;
	}
	return(0);
}

FirePrimary()
{
	
	// if (whichGun == 0){

	// 	whichGun = 1;
	// 	return(0);
	// }

	// if (whichGun == 1){

	// 	whichGun = 0;
	// 	return(0);
	// }
	//sleep 150;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = aimfrom;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = whichGun;
	return (0);
}


// FirePrimary()
// {
// 	return (1);
// }

// Shot1(zero)
// {
// 	signal SIG_FIRE1;
// 	set-signal-mask SIG_FIRE1;
// 	if (whichGun == 0){
// 		move barrelr to z-axis [-3] now;
// 		move barrelr to z-axis [0] speed [1];
// 	}
// 	if (whichGun == 1){
// 		move barrelr2 to z-axis [-3] now;
// 		move barrelr2 to z-axis [0] speed [1];
// 	++whichGun;
// 	if(whichGun>=4)
// 	{
// 		whichGun=0;
// 	}
// 	return(1);
// }

// QueryPrimary(piecenum)
// {
// 	if (whichGun <= 1){
// 		piecenum = flarer;
// 	}
// 	if (whichGun == 2){
// 		piecenum = flarer2;
// 	}
// 	if (whichGun == 3){
// 		piecenum = flarel;
// 	}
// 	if (whichGun >= 4){
// 		piecenum = flarel2;
// 	}
// 	return (0);
// }

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode frWheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flWheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rrTrack type BITMAPONLY | NOHEATCLOUD;
		explode rlTrack type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode frWheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flWheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rrTrack type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rlTrack type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode frWheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flWheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rrTrack type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rlTrack type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode frWheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flWheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rrTrack type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rlTrack type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
