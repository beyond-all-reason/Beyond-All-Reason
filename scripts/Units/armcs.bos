
#include "../recoil_common_includes.h"

#define SIGNAL_BUILD 2

piece  base,doorlf, doorlb, doorrf, doorrb, nano, turret, ground, wake1, wake2, cagelight, cagelight_emit;

static-var oldHead;

// Signal definitions
#define SIGNAL_MOVE 1


#define RB_MASS 40
#define RB_LENGTH 5
#define RB_WIDTH 3
#define RB_PITCH_ACCELERATION 10
#define RB_ROLL_ACCELERATION 3
#define RB_WAKE_PIECE wake1
#define RB_WAKE_PERIOD 6 
#define RB_WAKE_CEG 1024 + 0

#include "../bar_ships_common.h"



StartMoving(reversing)
{
	RB_bounce_frame = RAND(0, <180>);
}

StopMoving()
{
}


Create()
{
	hide wake2;
	hide wake1;
	hide nano;
	hide ground;
	hide cagelight_emit;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}


StartBuilding(heading, pitch)
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;

	move doorlf to z-axis [7] speed [10];
	move doorrf to z-axis [7] speed [10];
	move doorrb to z-axis [-7] speed [10];
	move doorlb to z-axis [-7] speed [10];
	wait-for-move doorlf along z-axis;

	show nano;

	turn turret to y-axis heading speed <160.0>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
	show cagelight_emit;
	spin cagelight around y-axis speed <150> accelerate <3>;
}

StopBuilding()
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;

	hide nano;	
	
	stop-spin cagelight around y-axis decelerate <5>;
	sleep 1000;
	hide cagelight_emit;
	
	sleep 5000;

	set INBUILDSTANCE to 1;

	turn turret to y-axis <0> speed <160>;
	wait-for-turn turret around y-axis;

	move doorlf to z-axis [0] speed [10];
	move doorrf to z-axis [0] speed [10];
	move doorrb to z-axis [0] speed [10];
	move doorlb to z-axis [0] speed [10];
	wait-for-move doorlf along z-axis;
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = nano;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode nano type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorrb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorlb type SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorrb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorlb type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nano type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorlf type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
