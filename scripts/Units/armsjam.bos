
#include "../recoil_common_includes.h"

piece  base, fork1, fork2, ground, jam;

static-var  oldHead;
static-var recently_damaged, desired_activation;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_TURNON 4
#define SIGNAL_OFF 8


#define RB_MASS 30
#define RB_LENGTH 6
#define RB_WIDTH 3
#define RB_PITCH_SPEED 200
#define RB_PITCH_ACCELERATION 10
#define RB_ROLL_ACCELERATION 6
#define RB_WAKE_PIECE ground
#define RB_WAKE_PERIOD 6 
#define RB_WAKE_CEG 1024 + 0
#define RB_ONHIT start-script OffOnHit();
#include "../bar_ships_common.h"

Create()
{
	hide ground;
	hide jam;
	recently_damaged = 0;
	desired_activation = 1;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}

Activate()
{
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
	desired_activation = 1;
	show jam;
	// if we are in this function, the unit is already on
	// implied set ACTIVATION to 1;
	// turn off if unit is in the recently_damaged state
	// this turn off action calls the Deactivate function
	if( recently_damaged == 1)
	{
		set ACTIVATION to 0;
		return(0);
	}
	spin fork1 around z-axis speed <100> accelerate <2>;
	spin fork2 around z-axis speed <100> accelerate <2>;
}

Deactivate()
{
	// get PRINT(0, desired_activation,desired_activation,get GAME_FRAME);
	// no easy way to tell if an on-off action is 
	// script/gadget controlled or user controlled
	// assume a deactivate command is a user command 
	// if the unit has not been recently damaged
	// However, we need to wait a few frames, 
	// unit_paralyze_on_off deactivates this unit before it is 
	// stunned, so it is actually turned off, but we need to wait to see if the
	// unit is "damaged" by stun.
	hide jam;
	sleep 100;
	if (recently_damaged == 0)
	{
		//set desired state if deactivated and not recently damaged
		desired_activation = 0;
	}
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
	stop-spin fork1 around z-axis decelerate <4>;
	stop-spin fork2 around z-axis decelerate <4>;
}

static-var  Stunned;
SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    start-script Deactivate();
	} else {
	    set ACTIVATION to desired_activation;
	}
}

OffOnHit()
{
	signal SIGNAL_OFF;
	set-signal-mask SIGNAL_OFF;
	recently_damaged = 1;
	set ACTIVATION to 0; // turn off unit
	sleep 8000; //hardcoded time to stay off after being hit
	recently_damaged = 0;
	set ACTIVATION to desired_activation;
}

StartMoving(reversing)
{
}

StopMoving()
{
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode fork2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fork1 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fork2 type FALL | NOHEATCLOUD;
		explode fork1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode fork2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode fork1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode fork2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fork1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
