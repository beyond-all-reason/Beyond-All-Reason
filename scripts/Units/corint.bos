
#include "../recoil_common_includes.h"

piece  base, flare, turret, gun, barrel, bore, cylinder, light, heat;

static-var shotcount;
// Signal definitions
#define SIGNAL_AIM1 256

Create()
{
	hide flare;
	show light;
	show heat;
	shotcount = 0;
}

// This should call deferred lightings stuff
// Note that any two numbers can be passed, use lightIndex primarily!
// but count can be optionally handled later on. 
// The number passed in lightIndex will index UnitScriptLights[unitDefID][lightIndex]
lua_UnitScriptLight(lightIndex, count) 
{
	return 0;
}

lua_UnitScriptDistortion(lightIndex, count)
{
	return 0;
}

#define BASEPIECE base
#define MAXTILT 0
#include "../unit_hitbyweaponid_and_smoke.h"

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <5.0>;
	turn gun to x-axis <0.0> - pitch speed <3.500000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	return (1);
}

//HotBarrel()
//{
//	show light;
// 	sleep 7000;
// 	hide light;
// 	return (1);
// }

FireWeapon1()
{
	
	//start-script HotBarrel();
	move barrel to z-axis [-7.500000] speed [500.0];
	move gun to z-axis [-4.0] speed [500.0];
	wait-for-move barrel along z-axis;
	emit-sfx 1024 + 0 from flare;
	call-script lua_UnitScriptLight(1, shotcount);
	call-script lua_UnitScriptLight(2, shotcount);
	call-script lua_UnitScriptDistortion(1, shotcount);
	shotcount = shotcount + 1;
	//show heat;
	sleep 200;
	move barrel to z-axis [0.0] speed [3.500000];
	move gun to z-axis [0.0] speed [3.500000];
	//sleep 2000;
	//hide heat;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = gun;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode gun type BITMAPONLY | NOHEATCLOUD;
		explode bore type BITMAPONLY | NOHEATCLOUD;
		explode cylinder type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode bore type FALL | NOHEATCLOUD;
		explode cylinder type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode gun type BITMAPONLY | NOHEATCLOUD;
		explode bore type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode cylinder type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode gun type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode bore type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode cylinder type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
