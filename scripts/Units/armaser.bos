
#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, lthigh, rthigh, rleg, rfoot, lleg, lfoot,shoulder, elbow, spindle, arm1,arm2,arm3,arm4,head,eye, aimy1, jam;

static-var  bMoving, Static_Var_3, Static_Var_4, Static_Var_5, keepspinning, animSpeed, maxSpeed, animFramesPerKeyframe;
static-var recently_damaged, desired_activation;

// Signal definitions
#define SIG_ACTIVATE			2
#define SIG_WALK 				4
#define SIG_OFF 				8

static-var  Stunned;
SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    keepspinning = 0;
	} else {
	    keepspinning = desired_activation;
		set ACTIVATION to desired_activation;
	}
}

spinarms()
{
	while (TRUE){
		while (keepspinning){
			turn spindle to x-axis <90> speed <90>;
			turn arm1 	 to z-axis <90> speed <90>;
			turn arm2 	 to y-axis <90> speed <135>;
			sleep 1000;
			
			turn spindle to x-axis <180> speed <90>;
			turn arm3 	 to z-axis <90> speed <135>;
			turn arm2 	 to y-axis <0> speed <90>;
			sleep 1000;
			
			
			turn spindle to x-axis <-90> speed <90>;
			turn arm3 	 to z-axis <0> speed <90>;
			turn arm4 	 to y-axis <-90> speed <135>;
			sleep 1000;
			
			
			turn spindle to x-axis <0> speed <90>;
			turn arm1 	 to z-axis <0> speed <135>;
			turn arm4 	 to y-axis <0> speed <90>;
			sleep 1000;
		}
		sleep 200;
	}

}

Walk() {//Created by https://github.com/Beherith/Skeletor_S3O from C:\Users\ptasz\Documents\GitHub\support\Animation_sources\armaser_anim_walk.blend 
	//set-signal-mask SIG_WALK;
	if (bMoving) { //Frame:5
			move base to y-axis [-1.000000] speed [30.000000] / animSpeed; //delta=-1.00 
			turn base to y-axis <-1.666667> speed <49.999997> / animSpeed; //delta=-1.67 
			turn head to x-axis <3.333333> speed <99.999995> / animSpeed; //delta=-3.33 
			turn lfoot to x-axis <-21.730218> speed <651.906534> / animSpeed; //delta=21.73 
			turn lleg to x-axis <32.437989> speed <973.139671> / animSpeed; //delta=-32.44 
			turn lthigh to x-axis <-18.801656> speed <564.049692> / animSpeed; //delta=18.80 
			turn rfoot to x-axis <18.591724> speed <557.751577> / animSpeed; //delta=-18.59 
			turn rleg to x-axis <23.436261> speed <703.087765> / animSpeed; //delta=-23.44 
			turn rthigh to x-axis <-46.892104> speed <1406.763083> / animSpeed; //delta=46.89 
		sleep ((33*animSpeed) -1);
	}
	while(bMoving) {
		if (bMoving) { //Frame:9
			move base to y-axis [-1.500000] speed [15.000000] / animSpeed; //delta=-0.50 
			turn base to z-axis <-0.500000> speed <15.000000> / animSpeed; //delta=0.50 
			turn base to y-axis <-3.333333> speed <50.000004> / animSpeed; //delta=-1.67 
			turn head to x-axis <9.166667> speed <175.000018> / animSpeed; //delta=-5.83 
			turn lfoot to x-axis <-33.683792> speed <358.607215> / animSpeed; //delta=11.95 
			turn lleg to x-axis <49.722367> speed <518.531330> / animSpeed; //delta=-17.28 
			turn lthigh to x-axis <14.381124> speed <995.483406> / animSpeed; //delta=-33.18 
			turn rfoot to x-axis <28.837550> speed <307.374803> / animSpeed; //delta=-10.25 
			turn rleg to x-axis <-4.079081> speed <825.460258> / animSpeed; //delta=27.52 
			turn rthigh to x-axis <-37.564705> speed <279.821956> / animSpeed; //delta=-9.33 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:13
			move base to y-axis [-3.000000] speed [45.000000] / animSpeed; //delta=-1.50 
			turn base to z-axis <-0.875000> speed <11.250000> / animSpeed; //delta=0.38 
			turn base to y-axis <-4.583333> speed <37.499993> / animSpeed; //delta=-1.25 
			turn head to x-axis <15.000000> speed <174.999999> / animSpeed; //delta=-5.83 
			turn lfoot to x-axis <-45.066681> speed <341.486680> / animSpeed; //delta=11.38 
			turn lleg to x-axis <87.878997> speed <1144.698895> / animSpeed; //delta=-38.16 
			turn lthigh to x-axis <8.436106> speed <178.350540> / animSpeed; //delta=5.95 
			turn rfoot to x-axis <26.291947> speed <76.368089> / animSpeed; //delta=2.55 
			turn rleg to x-axis <33.814880> speed <1136.818837> / animSpeed; //delta=-37.89 
			turn rthigh to x-axis <-61.824256> speed <727.786538> / animSpeed; //delta=24.26 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:17
			move base to y-axis [-1.500000] speed [45.000000] / animSpeed; //delta=1.50 
			turn base to z-axis <-0.437500> speed <13.125000> / animSpeed; //delta=-0.44 
			turn base to y-axis <-2.291667> speed <68.749997> / animSpeed; //delta=2.29 
			turn head to x-axis <7.500000> speed <225.000006> / animSpeed; //delta=7.50 
			turn lfoot to x-axis <-17.754073> speed <819.378248> / animSpeed; //delta=-27.31 
			turn lleg to x-axis <90.794558> speed <87.466856> / animSpeed; //delta=-2.92 
			turn lthigh to x-axis <-48.588835> speed <1710.748235> / animSpeed; //delta=57.02 
			turn rfoot to x-axis <-1.348254> speed <829.206056> / animSpeed; //delta=27.64 
			turn rleg to x-axis <49.849914> speed <481.051009> / animSpeed; //delta=-16.04 
			turn rthigh to x-axis <-47.725889> speed <422.951029> / animSpeed; //delta=-14.10 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:21
			move base to y-axis [0.000000] speed [45.000000] / animSpeed; //delta=1.50 
			turn base to z-axis <0.000000> speed <13.125000> / animSpeed; //delta=-0.44 
			turn base to y-axis <0.000000> speed <68.749997> / animSpeed; //delta=2.29 
			turn head to x-axis <-0.000000> speed <225.000006> / animSpeed; //delta=7.50 
			turn lfoot to x-axis <27.553543> speed <1359.228477> / animSpeed; //delta=-45.31 
			turn lleg to x-axis <24.860772> speed <1978.013597> / animSpeed; //delta=65.93 
			turn lthigh to x-axis <-46.366196> speed <66.679175> / animSpeed; //delta=-2.22 
			turn rfoot to x-axis <-9.425064> speed <242.304297> / animSpeed; //delta=8.08 
			turn rleg to x-axis <33.929477> speed <477.613101> / animSpeed; //delta=15.92 
			turn rthigh to x-axis <-20.623864> speed <813.060750> / animSpeed; //delta=-27.10 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:25
			move base to y-axis [-1.500000] speed [45.000000] / animSpeed; //delta=-1.50 
			turn base to z-axis <-0.500000> speed <15.000000> / animSpeed; //delta=0.50 
			turn base to y-axis <3.333330> speed <99.999899> / animSpeed; //delta=3.33 
			turn head to x-axis <7.500000> speed <225.000006> / animSpeed; //delta=-7.50 
			turn lfoot to x-axis <28.628644> speed <32.253024> / animSpeed; //delta=-1.08 
			turn lleg to x-axis <-3.236537> speed <842.919259> / animSpeed; //delta=28.10 
			turn lthigh to x-axis <-37.792133> speed <257.221885> / animSpeed; //delta=-8.57 
			turn rfoot to x-axis <-33.738648> speed <729.407521> / animSpeed; //delta=24.31 
			turn rleg to x-axis <50.952928> speed <510.703524> / animSpeed; //delta=-17.02 
			turn rthigh to x-axis <13.239139> speed <1015.890090> / animSpeed; //delta=-33.86 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:29
			move base to y-axis [-3.000000] speed [45.000000] / animSpeed; //delta=-1.50 
			turn base to z-axis <1.000000> speed <45.000000> / animSpeed; //delta=-1.50 
			turn base to y-axis <5.000000> speed <50.000097> / animSpeed; //delta=1.67 
			turn head to x-axis <15.000000> speed <225.000006> / animSpeed; //delta=-7.50 
			turn lfoot to x-axis <25.477837> speed <94.524217> / animSpeed; //delta=3.15 
			turn lleg to x-axis <34.887684> speed <1143.726630> / animSpeed; //delta=-38.12 
			turn lthigh to x-axis <-61.770892> speed <719.362763> / animSpeed; //delta=23.98 
			turn rfoot to x-axis <-42.434128> speed <260.864390> / animSpeed; //delta=8.70 
			turn rleg to x-axis <88.312823> speed <1120.796852> / animSpeed; //delta=-37.36 
			turn rthigh to x-axis <6.425188> speed <204.418537> / animSpeed; //delta=6.81 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:33
			move base to y-axis [-2.000000] speed [30.000000] / animSpeed; //delta=1.00 
			turn base to z-axis <0.500000> speed <15.000000> / animSpeed; //delta=0.50 
			turn base to y-axis <1.666667> speed <99.999995> / animSpeed; //delta=-3.33 
			turn head to x-axis <9.166667> speed <174.999999> / animSpeed; //delta=5.83 
			turn lfoot to x-axis <-8.622433> speed <1023.008078> / animSpeed; //delta=34.10 
			turn lleg to x-axis <50.884827> speed <479.914294> / animSpeed; //delta=-16.00 
			turn lthigh to x-axis <-47.045277> speed <441.768439> / animSpeed; //delta=-14.73 
			turn rfoot to x-axis <-22.198825> speed <607.059086> / animSpeed; //delta=-20.24 
			turn rleg to x-axis <92.987370> speed <140.236420> / animSpeed; //delta=-4.67 
			turn rthigh to x-axis <-50.829581> speed <1717.643080> / animSpeed; //delta=57.25 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:37
			move base to y-axis [-1.000000] speed [30.000000] / animSpeed; //delta=1.00 
			turn base to z-axis <-0.000000> speed <15.000000> / animSpeed; //delta=0.50 
			turn base to y-axis <-1.666667> speed <99.999998> / animSpeed; //delta=-3.33 
			turn head to x-axis <3.333333> speed <175.000018> / animSpeed; //delta=5.83 
			turn lfoot to x-axis <-21.730218> speed <393.233559> / animSpeed; //delta=13.11 
			turn lleg to x-axis <32.437989> speed <553.405149> / animSpeed; //delta=18.45 
			turn lthigh to x-axis <-18.801656> speed <847.308633> / animSpeed; //delta=-28.24 
			turn rfoot to x-axis <18.591724> speed <1223.716465> / animSpeed; //delta=-40.79 
			turn rleg to x-axis <23.436261> speed <2086.533282> / animSpeed; //delta=69.55 
			turn rthigh to x-axis <-46.892104> speed <118.124331> / animSpeed; //delta=-3.94 
		sleep ((33*animSpeed) -1);
		}
	}
}
// Call this from MotionControl()!
StopWalking() {
	move base to y-axis [0.000000] speed [11.250000];
	turn base to y-axis <0.000000> speed <25.000000>;
	turn base to z-axis <0.000000> speed <11.250000>;
	turn head to x-axis <0.000000> speed <56.250002>;
	turn lfoot to x-axis <0.000000> speed <339.807119>;
	turn lleg to x-axis <0.000000> speed <494.503399>;
	turn lthigh to x-axis <0.000000> speed <427.687059>;
	turn rfoot to x-axis <0.000000> speed <305.929116>;
	turn rleg to x-axis <0.000000> speed <521.633320>;
	turn rthigh to x-axis <0.000000> speed <429.410770>;
}
// REMEMBER TO animspeed = 4 in Create() !!
UnitSpeed(){
	maxSpeed = get MAX_SPEED; // this returns cob units per frame i think
	animFramesPerKeyframe = 4; //we need to calc the frames per keyframe value, from the known animtime
	maxSpeed = maxSpeed + (maxSpeed /(2*animFramesPerKeyframe)); // add fudge
	while(TRUE){
		animSpeed = (get CURRENT_SPEED);
		if (animSpeed<1) animSpeed=1;
		animSpeed = (maxSpeed * 3) / animSpeed; 
		//get PRINT(maxSpeed, animFramesPerKeyframe, animSpeed); //how to print debug info from bos
		if (animSpeed<2) animSpeed=2;
		if (animspeed>8) animSpeed = 8;
		sleep 131;
	}
}
StartMoving(){
	signal SIG_WALK;
	bMoving=TRUE;
  set-signal-mask SIG_WALK;
	start-script UnitSpeed();
	start-script Walk();
}
StopMoving(){
	signal SIG_WALK;
	bMoving=FALSE;
	call-script StopWalking();
}

open()
{
	keepspinning = 1;
	sleep 17;
	return (0);
}

close()
{
	keepspinning = 0;
	sleep 21;
	return (0);
}


Create()
{
	hide aimy1;
	hide jam;
	bMoving = FALSE;
	Static_Var_3 = 1;
	Static_Var_4 = 3000;
	animSpeed = 4;
	start-script spinarms();
	Static_Var_5 = 0;
	recently_damaged = 0;
	desired_activation = 1;
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	desired_activation = 1;
	show jam;
	// if we are in this function, the unit is already on
	// implied set ACTIVATION to 1;
	// turn off if unit is in the recently_damaged state
	// this turn off action calls the Deactivate function
	if( recently_damaged == 1)
	{
		set ACTIVATION to 0;
		return(0);
	}
	call-script open();
	return (0);
}

Deactivate()
{
	// get PRINT(0, desired_activation,desired_activation,get GAME_FRAME);
	// no easy way to tell if an on-off action is 
	// script/gadget controlled or user controlled
	// assume a deactivate command is a user command 
	// if the unit has not been recently damaged
	// However, we need to wait a few frames, 
	// unit_paralyze_on_off deactivates this unit before it is 
	// stunned, so it is actually turned off, but we need to wait to see if the
	// unit is "damaged" by stun.
	sleep 100;
	if (recently_damaged == 0)
	{
		//set desired state if deactivated and not recently damaged
		desired_activation = 0;
	}
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	call-script close();
	hide jam;
	return (0);
}

#define SMOKEPIECE base
static-var isSmoking;
SmokeUnit(healthpercent) // ah yes, clever use of stack variables 
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if (healthpercent > 66) {
			sleep 97;
			isSmoking = 0;
			return;
		}
		if (healthpercent < 4 ) healthpercent = 4;
		sleep healthpercent * 50;

		if( Rand( 1, 66 ) < healthpercent ) emit-sfx 257 from SMOKEPIECE;
		else emit-sfx 258 from SMOKEPIECE;
	}
	sleep 97;
	isSmoking = 0;
}

OffOnHit()
{
signal SIG_OFF;
set-signal-mask SIG_OFF;
hide jam;
recently_damaged = 1;
set ACTIVATION to 0; // turn off unit
sleep 8000; //hardcoded time to stay off after being hit
recently_damaged = 0;
set ACTIVATION to desired_activation;
}

// this is what a pure hitbyweapon can look like, without any of the motion garbage
HitByWeapon(anglex, anglez) //weaponID is always 0,lasers and flamers give angles of 0
{
	if( get BUILD_PERCENT_LEFT) return (0);
	if (isSmoking == 0)	{ 
		isSmoking = 1;
		start-script SmokeUnit();
	}
	start-script OffOnHit();
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis <0> - anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
	return (0);

}

QueryWeapon1(piecenum)
{
	piecenum = eye;
}

AimFromWeapon1(piecenum)
{
	piecenum = eye;
}


SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode lthigh type BITMAPONLY | NOHEATCLOUD;
		//explode lleg type BITMAPONLY | NOHEATCLOUD;
		//explode lfoot type BITMAPONLY | NOHEATCLOUD;
		explode shoulder type BITMAPONLY | NOHEATCLOUD;
		explode elbow type BITMAPONLY | NOHEATCLOUD;
		//explode spindle type BITMAPONLY | NOHEATCLOUD;
		//explode arm1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm3 type BITMAPONLY | NOHEATCLOUD;
		//explode arm4 type BITMAPONLY | NOHEATCLOUD;
		//explode head type BITMAPONLY | NOHEATCLOUD;
		//explode eye type BITMAPONLY | NOHEATCLOUD;
		//explode rthigh type BITMAPONLY | NOHEATCLOUD;
		//explode rleg type BITMAPONLY | NOHEATCLOUD;
		//explode rfoot type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		//explode lthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode shoulder type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode elbow type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode spindle type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode head type FALL | NOHEATCLOUD;
		//explode eye type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rleg type FALL | NOHEATCLOUD;
		//explode rfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lleg type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode lfoot type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode shoulder type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode elbow type FIRE | SMOKE | FALL | NOHEATCLOUD;
		 explode spindle type SMOKE | FALL | NOHEATCLOUD;
		//explode arm1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm4 type SMOKE | FALL | NOHEATCLOUD;
		//explode head type SMOKE | FALL | NOHEATCLOUD;
		//explode eye type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rfoot type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode shoulder type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode elbow type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode spindle type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode arm2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode arm3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode arm4 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode head type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode eye type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rfoot type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
