
#include "../recoil_common_includes.h"

piece  base, flare, turret, barrel, sleeve, smoke2, smoke1;

static-var  restore_delay;

#define DEBUG
#include "../debug.h"

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256


#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100
#define RECOIL_POWER 50000
#include "../unit_hitbyweaponid_and_smoke.h"

#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <0.10>
#define TB_BANK_Z <0.10> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;

	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}


static-var prevheading, prevpitch;
Create()
{
	prevheading = 0;
	prevpitch = 0;
	turn turret to y-axis <0.0> speed <90.021978>;
	turn sleeve to x-axis <0.0> speed <50.010989>;
	hide smoke2;
	hide smoke1;
	hide flare;
	restore_delay = 3000;
	call-script TB_Init();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

static-var  Stunned;

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.0> speed <90.021978>;
	turn sleeve to x-axis <0.0> speed <50.010989>;

}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <90.0>;
	turn sleeve to x-axis <0.0> - pitch speed <50.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}


/*
AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	var gf;
	gf = get GAME_FRAME;
	turn turret to y-axis heading speed <90.0>;
	turn sleeve to x-axis <0.0> - pitch speed <50.0>;
	var sleepx, sleepy;
	sleepy = get ABS(WRAPDELTA(heading- prevheading))/ <90.0> ;
	sleepx = get ABS(WRAPDELTA(pitch- prevpitch))/ <90.0> ;

	dbg(1, sleepy, (get GAME_FRAME) - gf);
	wait-for-turn turret around y-axis;
	dbg(2, sleepx, (get (GAME_FRAME) - gf));
	wait-for-turn sleeve around x-axis;
	dbg(3, get (GAME_FRAME) - gf);
	prevheading = heading;
	prevpitch = pitch;
	start-script RestoreAfterDelay();
	return (1);
}*/

FireWeapon1()
{
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [-2.400000] speed [500.0];
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.0] speed [3.0];
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = sleeve;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FALL | NOHEATCLOUD;
		explode barrel type FALL | NOHEATCLOUD;
		
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type SMOKE | FALL | NOHEATCLOUD;
		
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		
	return corpsetype;
}
