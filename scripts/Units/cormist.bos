
#include "../recoil_common_includes.h"

piece  flare1, flare2, base, gun, turret, exhaust;

static-var  gun_1, restore_delay, fired, aiming;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 256


#define BASEPIECE base
#define HITSPEED <75.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100
#define RECOIL_POWER 5000
#include "../unit_hitbyweaponid_and_smoke.h"

#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <0.10>
#define TB_BANK_Z <0.10> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"

Create()
{
	hide flare2;
	hide exhaust;
	hide flare1;
	gun_1 = 0;
	fired = 0;
	aiming = 0;
	call-script TB_Init();
}

ResetFire()
{
	signal SIGNAL_SHOOT1;
	set-signal-mask SIGNAL_SHOOT1;
	fired = 1;
	sleep 2000;
	fired = 0;
}


ResetAiming()
{
	signal SIGNAL_IDLE;
	set-signal-mask SIGNAL_IDLE;
	aiming = 1;
	sleep 500;
	aiming = 0;
}


StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	START_TILTBANK;
}
StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}

Activate()
{
}

Deactivate()
{
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
    fired = 0;
	turn turret to y-axis <0.0> speed <90.021978>;
	turn gun to x-axis <0.0> speed <50.010989>;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	start-script ResetAiming();
	turn turret to y-axis heading speed <250.060440>;
	turn gun to x-axis <0.0> - pitch speed <150.032967>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	if(fired == 1)
	{
		return (0);
	}
	return (1);
}

FireWeapon1()
{
	start-script ResetFire();
	emit-sfx 1024 + 0 from exhaust;
	gun_1 = !gun_1;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = gun;
}
QueryWeapon1(pieceIndex)
{
	pieceIndex = flare1 + gun_1;
}


AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	if(aiming == 1)
	{
		return (0);
	}
	turn turret to y-axis heading speed <250.060440>;
	turn gun to x-axis -1*pitch speed <200>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	sleep 33;
	if(fired == 1)
	{
		return (0);
	}
	return (1);
}

FireWeapon2()
{
	start-script ResetFire();
	emit-sfx 1024 + 0 from exhaust;
	gun_1 = !gun_1;
}

AimFromWeapon2(piecenum)
{
	piecenum = gun;
}

QueryWeapon2(piecenum)
{
	piecenum = gun_1;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode gun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode gun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
