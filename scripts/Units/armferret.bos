
#include "../recoil_common_includes.h"

piece  base, turret, sleeve, barrel1, barrel2, flare1, flare2, aimpoint, hat, aimy1, aimx1;

static-var  isOpen, gun1, restore_delay;

// Signal definitions
#define SIGNAL_AIM1 256


Activate()
{
	if (!isOpen){
		move aimy1 to y-axis [0] speed [40];
		wait-for-move aimy1 along y-axis;
		move barrel2 to z-axis [0] speed [28];
		move barrel1 to z-axis [0] speed [28];
		wait-for-move barrel1 along z-axis;
		isOpen = 1;
		set ARMORED to 0;
	}
}

Deactivate()
{
	isOpen = 0;
	move barrel2 to z-axis [-7] speed [28];
	move barrel1 to z-axis [-7] speed [28];
	wait-for-move barrel1 along z-axis;

	turn aimy1 to y-axis <0> speed <120>;
	turn aimx1 to x-axis <0> speed <120>;
	turn hat to x-axis <0> speed <60>;
	wait-for-turn aimy1 around y-axis;
	
	move aimy1 to y-axis [-7] speed [40];
	set ARMORED to 1;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	start-script Deactivate();
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide aimpoint;
	hide flare1;
	hide flare2;

	isOpen = 1;
	gun1 = 0;
	restore_delay = 3000;
	start-script Activate();
	set-signal-mask SIGNAL_AIM1;
	SLEEP_UNTIL_UNITFINISHED;
	start-script RestoreAfterDelay();
}


#define BASEPIECE base
#define MAXTILT 0
#include "../unit_hitbyweaponid_and_smoke.h"

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	start-script Activate();
	while( !isOpen )
	{
		sleep 250;
	}
	turn aimy1 to y-axis heading speed <200.000000>;
	turn aimx1 to x-axis 0 - pitch speed <200.000000>;
	turn hat to x-axis 0 - pitch / 2 speed <100.000000>;
	wait-for-turn aimy1 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

QueryWeapon1(pieceIndex)
{
	
	pieceIndex = flare1 + gun1;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimpoint;
}

Shot1()
{
	gun1 = !gun1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode barrel1 type BITMAPONLY | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode sleeve type FALL | NOHEATCLOUD;
		explode barrel2 type FALL | NOHEATCLOUD;
		explode flare2 type FALL | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
