
#include "../recoil_common_includes.h"

piece  base, turret, dome, gun, barrel, flare, aimpoint;

static-var  isOpen, restore_delay;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_IDLE 8

#include "../opencloseanim.h"


Open(){
	set ARMORED to 0;
	turn dome to x-axis <0> speed <550.0>;
	wait-for-turn dome around x-axis;
	move turret to y-axis [0] speed [50.0];
	move barrel to z-axis [0] speed [15.0];
	wait-for-move turret along y-axis;
	wait-for-move barrel along z-axis;
	isOpen = 1;
}

Close(){
	isOpen = 0;
	turn gun to x-axis <0.0> speed <90.0>;
	move barrel to z-axis [-7] speed [15.0];

	//wait-for-turn gun around x-axis;
	//wait-for-move barrel along z-axis;
	move turret to y-axis [-32] speed [50.0];
	wait-for-move turret along y-axis;
	turn dome to x-axis <135.0> speed <550.0>;
	wait-for-turn dome around x-axis;
	set ARMORED to 1;
}

static-var  Stunned;

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	start-script OpenCloseAnim(0);
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	signal SIGNAL_IDLE;
	set-signal-mask SIGNAL_IDLE;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide aimpoint;
	hide flare;
	hide flare;
	restore_delay = 3000;
	isOpen = 1;
	OCA_intransition_wantOpen = 1;
	SLEEP_UNTIL_UNITFINISHED;
	// close and armor once construction is done
	// only if no target in range when done
	set-signal-mask SIGNAL_AIM1;
	sleep 1000;
	set-signal-mask 0;
	start-script OpenCloseAnim(0);
}

#define BASEPIECE base
#define MAXTILT 0
#include "../unit_hitbyweaponid_and_smoke.h"

Activate()
{
	start-script OpenCloseAnim(1);
}

Deactivate()
{
	start-script OpenCloseAnim(0);
}


AimWeapon1(heading, pitch)
{
	start-script OpenCloseAnim(1);
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	while( !isOpen )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <200.0>;
	turn gun to x-axis <0.0> - pitch speed <200.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [-2.600000] speed [500.0];
	sleep 50;
	move barrel to z-axis [0.0] speed [6.0];
}

QueryWeapon1(pieceIndex)
{
	if (isOpen == 1)
	{
		pieceIndex = flare;
	}
	else
	{
		pieceIndex = aimpoint;
	}
}



AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimpoint;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode gun type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		explode dome type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode gun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dome type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode gun type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type SMOKE | FALL | NOHEATCLOUD;
		explode flare type SMOKE | FALL | NOHEATCLOUD;
		explode dome type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode gun type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dome type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
