
#include "../recoil_common_includes.h"

piece  ground, base, turret, barrel, flare, wake, fan1, fan2,sleeve;
static-var  restore_delay;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256
#define SIGNAL_IDLE 8 


#define HOVER_BASE base
#define HOVER_BANKSPEED <7>
#define HOVER_ROCKBASE ground
#define HOVER_WOBBLE_PERIOD 70
#define HOVER_WOBBLE_AMPLITUDE [0.7]
#define HOVER_WAKEPIECE wake
#define HOVER_WAKE_SFX_1 1024 + 0
#define HOVER_WAKE_SFX_2 1024 + 1
#define HOVER_IDLE_SFX 1024 + 2
#include "../bar_hovercraft_common.h"

#define BASEPIECE base
#define HITSPEED <35.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 7
#define MAXTILT 200

#include "../unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide wake;
	hide flare;
	hide flare;
	spin fan1 around y-axis speed <300>;
	
	spin fan2 around y-axis speed <300>;
	restore_delay = 3000;
	SLEEP_UNTIL_UNITFINISHED;
	start-script HoverCraftMotion();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.0> speed <90.0>;
	turn turret to x-axis <0.0> speed <45.0>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <150.0>;
	turn turret to x-axis <0.0> - pitch speed <75.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 + 0 from flare;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}





Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fan2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FALL | NOHEATCLOUD;
		explode fan2 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type SMOKE | FALL | NOHEATCLOUD;
		explode barrel type SMOKE | FALL | NOHEATCLOUD;
		explode fan2 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode fan1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode fan2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
