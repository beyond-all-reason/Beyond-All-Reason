
#include "../recoil_common_includes.h"

piece  base, tracks, armor, aimy1, turret, aimx1, sleeve, barrel, flare;

static-var  restore_delay, wpn1_lasthead, shotcount, fired1, fired2, aiming;

#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <0.1>
#define TB_BANK_Z <0.1> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1	2
#define SIGNAL_AIM2	2
#define SIGNAL_IDLE 8 
#define SIGNAL_SHOOT1 16

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 4
#define MAXTILT 100

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.005495>;
	turn base to z-axis <0> - anglez speed <50.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
	return (0);
}

Create()
{
	hide flare;
	restore_delay = 3000;
	shotcount = 0;
	fired1 = 0;
	fired2 = 0;
	aiming = 0;
	call-script TB_Init();
	SLEEP_UNTIL_UNITFINISHED;
}

ResetFire()
{
	signal SIGNAL_SHOOT1;
	set-signal-mask SIGNAL_SHOOT1;
	fired1 = 1;
	fired2 = 1;
	sleep 3000;
	fired2 = 0;
	sleep 3000;
	fired1 = 0;
}

ResetAiming()
{
	signal SIGNAL_IDLE;
	set-signal-mask SIGNAL_IDLE;
	aiming = 1;
	sleep 500;
	aiming = 0;
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	fired1 = 0;
	fired2 = 0;
	turn aimy1 to y-axis <0> speed <50>;
	turn aimx1 to x-axis <0> speed <50>;
	wpn1_lasthead = 1000000;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	set-signal-mask SIGNAL_AIM1;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	start-script ResetAiming();
	if (heading < <105> AND heading > <-105>){
		turn aimy1 to y-axis heading speed <120>;
		turn aimx1 to x-axis <0.000000> - pitch speed <120>;
		if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > <2>) AND ((get ABS(wpn1_lasthead - heading)) < 65536 - <2>)))
		{
			wpn1_lasthead = 1000000;
			wait-for-turn aimy1 around y-axis;
			wait-for-turn aimx1 around x-axis;
		}
		wpn1_lasthead = heading;
		start-script RestoreAfterDelay();
	}
	if(fired1 == 1)
	{
		return (0);
	}
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	if(aiming == 1)
	{
		return (0);
	}
	turn aimy1 to y-axis heading speed <120>;
	turn aimx1 to x-axis <0.000000> - pitch speed <120>;
	if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > <2>) AND ((get ABS(wpn1_lasthead - heading)) < 65536 - <2>)))
	{
		wpn1_lasthead = 1000000;
		wait-for-turn aimy1 around y-axis;
		wait-for-turn aimx1 around x-axis;
	}
	wpn1_lasthead = heading;
	start-script RestoreAfterDelay();
	if(fired2 == 1)
	{
		return (0);
	}
	return (1);
}

FirePrimary()
{
	start-script ResetFire();
	++shotcount;
 	emit-sfx 1024 + 0 from flare;
	call-script lua_UnitScriptLight(1, shotcount);
	
 	move barrel to z-axis [-6] now;
	turn sleeve to x-axis <-10> now;
	
	turn sleeve to x-axis <0> speed <30.0>;
 	move barrel to z-axis [0] speed [2.5];
}

FireSecondary()
{
	start-script ResetFire();
	++shotcount;
 	emit-sfx 1024 + 0 from flare;
	call-script lua_UnitScriptLight(1, shotcount);
	
 	move barrel to z-axis [-6] now;
	turn sleeve to x-axis <-10> now;
	
	turn sleeve to x-axis <0> speed <30.0>;
 	move barrel to z-axis [0] speed [2.5];
}

lua_UnitScriptLight(lightIndex, count)
{
	return 0;
}

AimFromPrimary(piecenum)
{
	piecenum = aimx1;
}

AimFromSecondary(piecenum)
{
	piecenum = aimx1;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

QuerySecondary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
