
#include "../recoil_common_includes.h"

#define SIGNAL_AIM1 256
#define SIGNAL_SHOOT1 16
piece  flare1, flare2, base, wingl, wingr, finl, finr, fan, flare3, flare4,pivot;

static-var  gun_1;

#define SIGNAL_TURNON 4

#define BASEPIECE base
#define HITSPEED <100.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base
#include "../idlehover.h"


static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn pivot to x-axis <90> speed <180>;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 500;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide pivot;
	gun_1 = 0;
	SLEEP_UNTIL_UNITFINISHED;
	start-script IdleHover();
}

Activate()
{
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;

	spin fan around y-axis speed <200> accelerate <20>;
	
	turn pivot to x-axis <90> speed <90>;
	wait-for-turn pivot around x-axis;

	turn finl to z-axis <90> speed <90>;
	turn finr to z-axis <-90> speed <90>;
	turn wingl to y-axis <-30> speed <30>;
	turn wingr to y-axis <30> speed <30>;
	wait-for-turn finl around z-axis;
	wait-for-turn wingl around y-axis;
}

Deactivate()
{
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;

	turn pivot to x-axis <0> speed <90>;
	wait-for-turn pivot around x-axis;

	turn finl to z-axis <0> speed <90>;
	turn finr to z-axis <0> speed <90>;
	turn wingl to y-axis <0> speed <30>;
	turn wingr to y-axis <0> speed <30>;
	wait-for-turn finl around z-axis;
	wait-for-turn wingl around y-axis;

	stop-spin fan around y-axis decelerate <1>;
}

FireWeapon1()
{
}

Shot1(shotIndex)
{
	if( gun_1 == 0 )
	{
		emit-sfx 1024 + 0 from flare1;
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 + 0 from flare2;
	}
	if( gun_1 == 2 )
	{
		emit-sfx 1024 + 0 from flare3;
	}
	if( gun_1 == 3 )
	{
		emit-sfx 1024 + 0 from flare4;
	}
	++gun_1;
	if(gun_1>=3)
	{
		gun_1=0;
	}
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare1 + gun_1;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn pivot to x-axis <0> speed <180>;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pivot type BITMAPONLY | NOHEATCLOUD;
		explode fan type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare4 type BITMAPONLY | NOHEATCLOUD;
		explode flare3 type BITMAPONLY | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode finr type BITMAPONLY | NOHEATCLOUD;
		explode wingr type BITMAPONLY | NOHEATCLOUD;
		explode finl type BITMAPONLY | NOHEATCLOUD;
		explode wingl type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pivot type SMOKE | FALL | NOHEATCLOUD;
		explode fan type BITMAPONLY | NOHEATCLOUD;
		explode flare4 type BITMAPONLY | NOHEATCLOUD;
		explode flare3 type BITMAPONLY | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode finr type SMOKE | FALL | NOHEATCLOUD;
		explode wingr type BITMAPONLY | NOHEATCLOUD;
		explode finl type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode wingl type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pivot type BITMAPONLY | NOHEATCLOUD;
		explode fan type SMOKE | FALL | NOHEATCLOUD;
		explode flare4 type BITMAPONLY | NOHEATCLOUD;
		explode flare3 type BITMAPONLY | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode finr type SMOKE | FALL | NOHEATCLOUD;
		explode wingr type BITMAPONLY | NOHEATCLOUD;
		explode finl type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode wingl type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pivot type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode fan type BITMAPONLY | NOHEATCLOUD;
		explode flare4 type BITMAPONLY | NOHEATCLOUD;
		explode flare3 type BITMAPONLY | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode finr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wingr type BITMAPONLY | NOHEATCLOUD;
		explode finl type BITMAPONLY | NOHEATCLOUD;
		explode wingl type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
