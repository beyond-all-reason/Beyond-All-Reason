
#include "../recoil_common_includes.h"

piece  base, body, jetl, thrustl, jetr, thrustr, centerwing, centerpadd, w_glass, thrustm, sleeve, flare, barrel1, barrel2, barrel3, barrel4;

// Signal definitions
#define SIGNAL_MOVE 1

#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base

static-var isIdle, IdleX, IdleY, IdleZ, wasIdle;
IdleHover()
{
	while(TRUE){
		// Detect 'idleness' 
		wasIdle = isIdle;
		// get PRINT(get GAME_FRAME, get CURRENT_SPEED, (get UNIT_Y)/65500, (get GROUND_HEIGHT)/65500);
		if (((get CURRENT_SPEED) < 10000) AND (((get UNIT_Y) - (get GROUND_HEIGHT)) > [64] )) {
			isIdle = TRUE;
		}
		else
		{
			isIdle = FALSE;
		}
	
	
		if (isIdle){
			var newIdleX;
			newIdleX = Rand(-1*IDLEHOVERSCALE,IDLEHOVERSCALE);
			var newIdleY;
			newIdleY = Rand(-1*IDLEHOVERSCALE / 2,IDLEHOVERSCALE / 2);
			var newIdleZ;
			newIdleZ =  Rand(-1*IDLEHOVERSCALE,IDLEHOVERSCALE);
			var IdleSpeed;
			IdleSpeed = Rand(IDLEHOVERSPEED,IDLEHOVERSPEED*3); 
			if (IdleSpeed < 10) IdleSpeed = 10; //wierd div by zero error?
			
			//get PRINT(newIdleX,newIdleY,newIdleZ,IdleSpeed);
			
			move IDLEBASEPIECE to x-axis [0.25]*newIdleX speed [0.25]*(newIdleX - IdleX)*30/IdleSpeed;
			move IDLEBASEPIECE to y-axis [0.25]*newIdleY speed [0.25]*(newIdleY - IdleY)*30/IdleSpeed;
			move IDLEBASEPIECE to z-axis [0.25]*newIdleZ speed [0.25]*(newIdleZ - IdleZ)*30/IdleSpeed;
			
			//turn IDLEBASEPIECE to z-axis <0.25>  * newIdleX speed <0.25> * (newIdleX - IdleX)*30/IdleSpeed;
			turn IDLEBASEPIECE to y-axis <0.25>  * newIdleY speed <0.25> * (newIdleY - IdleY)*30/IdleSpeed;
			turn IDLEBASEPIECE to x-axis <-0.25> * newIdleZ speed <0.25> * (newIdleZ - IdleZ)*30/IdleSpeed;
			
			IdleX = newIdleX;
			IdleY = newIdleY;
			IdleZ = newIdleZ;
			sleep 1000*IdleSpeed/30;
			sleep 98;
		}
		else{
			if (wasIdle) {
				move IDLEBASEPIECE to x-axis [0] speed [0.25]*(IdleX);
				move IDLEBASEPIECE to y-axis [0] speed [0.25]*(IdleY);
				move IDLEBASEPIECE to z-axis [0] speed [0.25]*(IdleZ);
			
				//turn IDLEBASEPIECE to z-axis <0> speed <0.25>*(IdleX);
				turn IDLEBASEPIECE to y-axis <0> speed <0.25>*(IdleY);
				turn IDLEBASEPIECE to x-axis <0> speed <0.25>*(IdleZ);
			}
			sleep 1000;
		}
	}
}

Create()
{
	hide flare;
	hide thrustr;
	hide thrustl;
	turn jetl to x-axis <-90.0> now;
	turn jetr to x-axis <-90.0> now;
	start-script IdleHover();
}

Activate()
{
	show thrustl;
	show thrustr;
}

Deactivate()
{

	hide thrustl;
	hide thrustr;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 500;
	start-script ExecuteRestoreAfterDelay();
}


#define BASEPIECE base
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

MoveRate1()
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	turn jetl to x-axis <-70.0> speed <75.0>;
	turn jetr to x-axis <-70.0> speed <75.0>;
	turn base to z-axis <0.0> speed <120.0>;
	//start-script ProcessFlames();
}

MoveRate2()
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	turn jetl to x-axis <-50.0> speed <55.0>;
	turn jetr to x-axis <-50.0> speed <55.0>;
	//start-script ProcessFlames();
	sleep 1000;
	turn base to z-axis <240.0> speed <120.0>;
	wait-for-turn base around z-axis;
	turn base to z-axis <120.0> speed <180.0>;
	wait-for-turn base around z-axis;
	turn base to z-axis <0.0> speed <120.0>;
	
}

MoveRate3()
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	turn jetl to x-axis <0.0> speed <85.0>;
	turn jetr to x-axis <0.0> speed <85.0>;
	//start-script ProcessFlames();
	turn base to z-axis <0.0> speed <120.0>;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = base;
}

AimWeapon1(heading, pitch)
{
	return (1);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}

FireWeapon1()
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	sleep 200;
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
    explode base type BITMAPONLY | NOHEATCLOUD;
    return(corpsetype);
	return corpsetype;
}
