
#include "../recoil_common_includes.h"

piece  base, dish1, dish2, dish3, dish4, emit;

static-var  recentlyHit, wantOpen;

#define SIGNAL_TURNON 4


#include "../damagedsmoke.h"
Create()
{
	recentlyHit = 0;
	SLEEP_UNTIL_UNITFINISHED;
	start-script DamagedSmoke();
}

// open it on when built
// close it up when hit
// open it when time passed
// dont open it while hit
// dont reopen it if off after being hit !!!
// dont let any of the above conflict in time.
// dont change state while stunned
// obey desired state changes while closed for hit

Open()
{
	turn dish1 to x-axis <-90.016484> speed <60.0>;
	turn dish3 to x-axis <90.016484> speed <60.0>;
	turn dish2 to z-axis <-90.016484> speed <60.0>;
	turn dish4 to z-axis <90.016484> speed <60.0>;
	wait-for-turn dish1 around x-axis;
	wait-for-turn dish2 around x-axis;
	wait-for-turn dish3 around z-axis;
	wait-for-turn dish4 around z-axis;
	show emit;
	set ARMORED to 0;
	set YARD_OPEN to 0;
	set ACTIVATION to 100;
}

Close()
{
	set ACTIVATION to 0;
	turn dish1 to x-axis <0.0> speed <120.0>;
	turn dish3 to x-axis <0.0> speed <120.0>;
	turn dish2 to z-axis <0.0> speed <120.0>;
	turn dish4 to z-axis <0.0> speed <120.0>;
	wait-for-turn dish1 around x-axis;
	wait-for-turn dish2 around x-axis;
	wait-for-turn dish3 around z-axis;
	wait-for-turn dish4 around z-axis;
	hide emit;
	set ARMORED to 1;
	set YARD_OPEN to 1;
}

Activate()
{
	if( recentlyHit )
	{
		set ACTIVATION to 0; // dont open it while hit, feedback it
		wantOpen = 1;
		return (0);
	}
	call-script Open();
}

Deactivate()
{
	call-script Close();
}

HitByWeapon(anglex, anglez)
{

	if (!recentlyHit){
		start-script Close(); 
		recentlyHit = 1;
		wantOpen = get ACTIVATION;
	}
	// Signal after Close() so as not to interrupt it
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;

	sleep 8000;
	recentlyHit = 0;
	if (wantOpen){
		start-script Open();
	}
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dish4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish1 type BITMAPONLY | NOHEATCLOUD;
		explode dish2 type BITMAPONLY | NOHEATCLOUD;
		explode dish3 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dish4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish3 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dish4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dish4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode dish3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
