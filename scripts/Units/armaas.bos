
#include "../recoil_common_includes.h"

piece  flare1, flare2, missileflare1, missileflare2, base, missilebox1, missilebox2, turretgun1,
       turretgun2, gunbarrel1, gunbarrel2, ground, turretmis1, turretmis2, wake, bow;

static-var  gun_3, restore_delay, gun_2, aimDir1;
static-var  Stunned;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM2 512
#define SIGNAL_AIM3 1024

#define RB_MASS 30
#define RB_LENGTH 7
#define RB_WIDTH 3
#define RB_PITCH_SPEED 100
#define RB_PITCH_ACCELERATION 20
#define RB_ROLL_ACCELERATION 8
#define RB_ROCKUNIT 5
#define RB_WAKE_PIECE wake
#define RB_WAKE_CEG 1024 + 1
#define RB_IDLE_KICK 5000
#define RB_RECOIL_ENERGY_1 100
#define RB_BOWSPLASH_PIECE bow
#define RB_BOWSPLASH_CEG 1024 + 1

#include "../bar_ships_common.h"

Create()
{
	hide missileflare2;
	hide flare2;
	hide flare1;
	hide missileflare1;
	hide ground;
	hide flare2;
	hide flare1;
	gun_3 = flare1;
	gun_2 = flare1;
	restore_delay = 3000;
	turn turretgun2 to x-axis <-25> speed <25.0>;
    spin turretgun1 around y-axis speed <25.0>;
	turn missilebox1 to x-axis <-25.0> speed <25.0>;
	turn missilebox2 to x-axis <-25.0> speed <25.0>;	
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 3;
}

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turretgun2 to x-axis <-25.0> speed <25.0>;
    spin turretgun1 around y-axis speed <25.0>;
	turn missilebox1 to y-axis <0.0> speed <25.0>;
	turn missilebox1 to x-axis <-25.0> speed <25.0>;
	turn missilebox2 to y-axis <0.0> speed <25.0>;
	turn missilebox2 to x-axis <-25.0> speed <25.0>;
}
Stop()
{
    spin turretgun1 around y-axis speed <0.0>;
}
SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    call-script Stop();
	} else {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}


AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	if( gun_2 )
	{
		turn missilebox2 to y-axis heading speed <455.0>;
		turn missilebox2 to x-axis <0.0> - pitch speed <430.0>;
		wait-for-turn missilebox2 around y-axis;
		wait-for-turn missilebox2 around x-axis;
	}
	else
	{
		turn missilebox1 to y-axis heading speed <455.0>;
		turn missilebox1 to x-axis <0.0> - pitch speed <430.0>;
		wait-for-turn missilebox1 around y-axis;
		wait-for-turn missilebox1 around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

AimWeapon3(heading, pitch)
{
	signal SIGNAL_AIM3;
	set-signal-mask SIGNAL_AIM3;
	aimDir1 = heading;
	turn turretgun1 to y-axis heading speed <755.0>;
	turn turretgun2 to x-axis <0.0> - pitch speed <730.0>;
	wait-for-turn turretgun1 around y-axis;
	wait-for-turn turretgun2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	gun_2 = !gun_2;
}

FireWeapon3()
{
	if( gun_3 )
	{
	    emit-sfx 1024 + 0 from flare2;
		move gunbarrel2 to z-axis [-2.400000] speed [500.0];
		sleep 100;
		wait-for-move gunbarrel2 along z-axis;
		move gunbarrel2 to z-axis [0.0] speed [3.0];
	}
	else
	{
	    emit-sfx 1024 + 0 from flare1;
		move gunbarrel1 to z-axis [-2.400000] speed [500.0];
		sleep 100;
		wait-for-move gunbarrel1 along z-axis;
		move gunbarrel1 to z-axis [0.0] speed [3.0];
	}
	gun_3 = !gun_3;
	RB_RECOILBOAT(aimDir1, RB_RECOIL_ENERGY_1)
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = base;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = missilebox1 + gun_2;
}

AimFromWeapon3(pieceIndex)
{
	pieceIndex = turretgun1;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = base;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = missileflare1 + gun_2;
}

QueryWeapon3(pieceIndex)
{
	pieceIndex = gun_3;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretgun1 type BITMAPONLY | NOHEATCLOUD;
		explode turretgun2 type BITMAPONLY | NOHEATCLOUD;
		explode gunbarrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FALL | NOHEATCLOUD;
		explode turretgun1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretgun2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gunbarrel1 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretgun1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turretgun2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gunbarrel1 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turretgun1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretgun2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gunbarrel1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
