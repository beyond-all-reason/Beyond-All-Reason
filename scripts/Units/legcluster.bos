#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
#include "smart_weapon_select.h"


piece base, turret, sleeve, barrel, flare, turretmidpoint;
//piece  flare1, flare2, base, turret, barrel1, barrel2, sleeves;

static-var lastHeading;

#define SIGNAL_AIM			1


Create()
{
    hide flare;
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"


restoreAfterDelay()
{
	set-signal-mask SIGNAL_AIM;
	sleep 3500;
	if(lastHeading > <-180.000000>)
	{
		turn turret to y-axis <180.000000> speed <30.000000>;
	}
	if(lastHeading > <-135.000000>)
	{
		turn turret to y-axis <270.000000> speed <30.000000>;
	}
	if(lastHeading > <-45.000000>)
	{
		turn turret to y-axis <0.000000> speed <30.000000>;
	}
	if(lastHeading > <45.000000>)
	{
		turn turret to y-axis <90.000000> speed <30.000000>;
	}
	if(lastHeading > <135.000000>)
	{
		turn turret to y-axis <180.000000> speed <30.000000>;
	}
	turn sleeve to x-axis <0.000000> speed <45.000000>;
}

aimCommon(heading, pitch)
{
	turn turret to y-axis heading speed <30.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <45.000000>;
	lastHeading = heading;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script restoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	if (AimingState != AIMING_PRIORITY)
	{
		return(0);
	}

	signal SIGNAL_AIM;
	set-signal-mask SIGNAL_AIM;
	call-script aimCommon(heading, pitch);

	// Prevent "bonus shots" while alternative weapon is reloading
	var reloading;
	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(2));
	if( reloading )
	{
		return(0);
	}

	return (1);
}

AimSecondary(heading, pitch)
{
	if (AimingState != AIMING_BACKUP)
	{
		return(0);
	}
	
	signal SIGNAL_AIM;
	set-signal-mask SIGNAL_AIM;
	call-script aimCommon(heading, pitch);

	// Prevent "bonus shots" while alternative weapon is reloading
	var reloading;
	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(1));
	if( reloading )
	{
		return(0);
	}

	return (1);
}

AimTertiary(piecenum)
{
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

AimFromSecondary(piecenum)
{
	piecenum = sleeve;
}

fireCommon()
{
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [-6.250000] now;
	sleep 100;
	move barrel to z-axis [0.000000] speed [2.5000000];
}

FirePrimary()
{
	call-script fireCommon();
}

FireSecondary()
{
	call-script fireCommon();
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

QuerySecondary(piecenum)
{
	piecenum = flare;
}

QueryTertiary(piecenum)
{
	piecenum = turretmidpoint;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FALL | NOHEATCLOUD;
		explode flare type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
