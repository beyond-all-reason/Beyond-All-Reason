#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, lloarm, flare, nano, beam;

static-var  restore_delay, last_primary_heading;

// Signal definitions
#define SIG_AIM				2
#define SIG_BUILD		4

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

#include "../unit_hitbyweaponid_and_smoke.h"


PilotLight(Func_Var_1)
{
	while( TRUE )
	{
		emit-sfx 1024 + 0 from flare;
		sleep 40;
	}
}

Create()
{
	hide flare;
	restore_delay = 3000;
	last_primary_heading = -1000000;
	start-script PilotLight();
	return (0);
}

//SetMaxReloadTime(Func_Var_1)
//{
//	restore_delay = Func_Var_1 * 2;
//	return (0);
//}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.000000> speed <50>;
	turn nano to y-axis <0.000000> speed <50>;
}

Restore_Primary()
{
	sleep restore_delay;
	if (Stunned) {
			return (1);
	}
	turn turret to y-axis <0.000000> speed <50>;
	last_primary_heading = -1000000;
}

Restore_Nano()
{
	sleep restore_delay;
	if (Stunned) {
			return (1);
	}
	turn nano to y-axis <0.000000> speed <50>;
}

SetStunned(State)
{
  Stunned = State;
	if (!Stunned) {
	    start-script Restore_Primary();
			start-script Restore_Nano();
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	// values in <> are degrees per second
	// otherwise angles are in COB angular unit (cau) - There are 65536 cau in a circle
	// In general, 6 cau per frame ~= 1 degree per second
	turn turret to y-axis heading speed <500.000000>;
	// only wait-for-turn if it takes more than 3 frames to finish the turn
	if ( (get ABS(last_primary_heading-heading)>9000) )
	{
		// seems to take 3 frames for wait-for-turn to process
		wait-for-turn turret around y-axis;
	}
	last_primary_heading = heading;

	start-script Restore_Primary();
	return (1);
}

FirePrimary()
{

}

Shot1(zero)
{
	emit-sfx 1024 + 1 from flare;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

StartBuilding(heading, pitch)
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;
	turn nano to y-axis heading speed <160>;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;
	start-script Restore_Nano();
	set INBUILDSTANCE to 0;
}

QueryNanoPiece(piecenum)
{
	piecenum = nano;
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode lloarm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lloarm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lloarm type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lloarm type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
