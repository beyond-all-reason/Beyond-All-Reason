#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  body, head, barrel1, barrel2, flare1, flare2,  leg1a,leg1b,leg2a,leg2b,leg3a,leg3b,leg4a,leg4b,leg5a,leg5b,leg6a,leg6b, aimy1, turretr, borer, barrelr, flameflarer;

static-var  moving, Static_Var_2, restore_delay, gun_1,moveSpeed, currentSpeed,WALK_PERIOD, wpn1_lasthead, wpn2_lasthead, wpn3_lasthead, shotcount, shotcount2, randTemp, chillshots, isreset, rollingchill;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM2				128

#define SIG_MOVE 8
#define SIG_PUFF 16
#define SIG_CHILL 32


#define FRONT_RIGHT_UP\
	turn leg6a to y-axis <70> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg6a to z-axis <20> speed <20> *1000/(WALK_PERIOD);

#define FRONT_RIGHT_DOWN\
	turn leg6a to z-axis <-10> speed <30> *1000/(WALK_PERIOD);\
	turn leg6b to z-axis <85> speed <85> *1000/(WALK_PERIOD);

#define FRONT_RIGHT_BACK\
	turn leg6a to y-axis <45> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg6a to z-axis <0> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg6b to z-axis <0> speed <23.75> *1000/(WALK_PERIOD);


#define FRONT_LEFT_UP\
	turn leg1a to y-axis <-70> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg1a to z-axis <-20> speed <20> *1000/(WALK_PERIOD);

#define FRONT_LEFT_DOWN\
	turn leg1a to z-axis <10> speed <30> *1000/(WALK_PERIOD);\
	turn leg1b to z-axis <-85> speed <85> *1000/(WALK_PERIOD);

#define FRONT_LEFT_BACK\
	turn leg1a to y-axis <-45> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg1a to z-axis <0> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg1b to z-axis <0> speed <23.75> *1000/(WALK_PERIOD);


#define MIDDLE_RIGHT_UP\
	turn leg5a to y-axis <22.5> speed <22.5> *1000/(WALK_PERIOD);\
	turn leg5a to z-axis <20> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_RIGHT_DOWN\
	turn leg5a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_RIGHT_BACK\
	turn leg5a to y-axis <-22.5> speed <12.5> *1000/(WALK_PERIOD);


#define MIDDLE_LEFT_UP\
	turn leg2a to y-axis <-22.5> speed <22.5> *1000/(WALK_PERIOD);\
	turn leg2a to z-axis <-20> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_LEFT_DOWN\
	turn leg2a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_LEFT_BACK\
	turn leg2a to y-axis <22.5> speed <12.5> *1000/(WALK_PERIOD);\


#define REAR_RIGHT_UP\
	turn leg4a to y-axis <-45> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg4a to z-axis <20> speed <50> *1000/(WALK_PERIOD);\
	turn leg4b to z-axis <0> speed <55> *1000/(WALK_PERIOD);

#define REAR_RIGHT_DOWN\
	turn leg4a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define REAR_RIGHT_BACK\
	turn leg4a to y-axis <-70> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg4a to z-axis <-30> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg4b to z-axis <85> speed <23.75> *1000/(WALK_PERIOD);


#define REAR_LEFT_UP\
	turn leg3a to y-axis <45> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg3a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);\
	turn leg3b to z-axis <0> speed <55> *1000/(WALK_PERIOD);

#define REAR_LEFT_DOWN\
	turn leg3a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define REAR_LEFT_BACK\
	turn leg3a to y-axis <70> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg3a to z-axis <30> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg3b to z-axis <-85> speed <23.75> *1000/(WALK_PERIOD);


#define WAIT_WALK\
	sleep WALK_PERIOD;\
	while(!moving)\
	{\
		sleep 111;\
	}


DoTheWalking()
{
	while(TRUE)
	{
		move body to y-axis [0.7] speed [5];
		WAIT_WALK
		FRONT_RIGHT_UP
		MIDDLE_RIGHT_BACK
		REAR_LEFT_DOWN
		
		move body to y-axis [0] speed [5];
		WAIT_WALK
		FRONT_RIGHT_DOWN
		MIDDLE_LEFT_UP
		REAR_LEFT_BACK
		
		move body to y-axis [0.7] speed [5];
		WAIT_WALK
		FRONT_RIGHT_BACK
		MIDDLE_LEFT_DOWN
		REAR_RIGHT_UP
		
		move body to y-axis [0] speed [5];
		WAIT_WALK
		MIDDLE_LEFT_BACK
		REAR_RIGHT_DOWN
		FRONT_LEFT_UP
		
		move body to y-axis [0.7] speed [5];
		WAIT_WALK
		REAR_RIGHT_BACK
		FRONT_LEFT_DOWN
		MIDDLE_RIGHT_UP
		
		move body to y-axis [0] speed [5];
		WAIT_WALK
		FRONT_LEFT_BACK
		MIDDLE_RIGHT_DOWN
		REAR_LEFT_UP
	}
}

UnitSpeed()
{
	while(TRUE)
	{
		if (moving)
		{
			//currentSpeed = (moveSpeed * 80)/(get CURRENT_SPEED);
			//if (currentSpeed>300) currentSpeed=300;
			//WALK_PERIOD=currentSpeed;
			//get PRINT(1,WALK_PERIOD,moveSpeed);
			WALK_PERIOD=98;
		}
		sleep 142;
		//get PRINT(moving, currentSpeed,0,0);
	}
}

StopWalk()
{
	turn leg6a to z-axis <20> speed <50> *1000/(WALK_PERIOD);
	turn leg6b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg6a to y-axis <45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg6a to z-axis <0> speed <30> *1000/(WALK_PERIOD);
	turn leg6b to z-axis <20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);

	turn leg2a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);
	turn leg2b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg2a to y-axis <0> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg2a to z-axis <0> speed <10> *1000/(WALK_PERIOD);
	turn leg2b to z-axis <20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	
	turn leg4a to z-axis <20> speed <50> *1000/(WALK_PERIOD);
	turn leg4b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg4a to y-axis <-45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg4a to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	
	turn leg1a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);
	turn leg1b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg1a to y-axis <-45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg1a to z-axis <0> speed <30> *1000/(WALK_PERIOD);
	turn leg1b to z-axis <-20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);

	turn leg5a to z-axis <20> speed <50> *1000/(WALK_PERIOD);
	turn leg5b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg5a to y-axis <0> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg5a to z-axis <0> speed <10> *1000/(WALK_PERIOD);
	turn leg5b to z-axis <-20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);

	turn leg3a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);
	turn leg3b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg3a to y-axis <45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg3b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg3a to z-axis <0> speed <20> *1000/(WALK_PERIOD);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script UnitSpeed();
	start-script DoTheWalking();
	moving=TRUE;
}

StopMoving()
{
	signal SIG_MOVE;
	moving=FALSE;
	set-signal-mask SIG_MOVE;
	start-script StopWalk();
}


#define BASEPIECE body
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 8
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide flare1;
	hide flare2;
	hide aimy1;
	randTemp = 0;
	moving = FALSE;
	//firing = FALSE;
	isreset = TRUE;
	rollingchill = FALSE;
	chillshots = 0;
	gun_1 = 0;
	shotcount = 0;
	shotcount2 = 0;
	restore_delay = 3000;
	turn leg6a to y-axis <30> now;
	turn leg4a to y-axis <-30> now;
	turn leg1a to y-axis <-30> now;//2
	turn leg3a to y-axis <30> now;//5
	moveSpeed = (get MAX_SPEED);
	WALK_PERIOD=400;
	//start-script puff();
}

lua_FlameShot(weapon) //Distortion and lups flame effect
{
  return 0;
}
lua_UnitScriptLight(lightIndex, count)
{
	return 0;
}


chilltime(current) {
		//signal SIG_CHILL;
		//set-signal-mask SIG_CHILL;

		if (moving==FALSE AND isreset) {
			
			if(Rand(1,10)==1) {
				//get PRINT(shotcount2 - chillshots);
				if ((shotcount2 - chillshots) > 20) {
					start-script puff();
				}
			}
			rollingchill = FALSE;
			chillshots = 0;
		
		} else {
				sleep 5000;
				start-script chilltime(1);
		}

}

puff() {

		if(isreset) {
			set-signal-mask SIG_PUFF;
			emit-sfx 1024 + 1 from flameflarer;
			sleep 5000;
			randTemp = Rand( 3, 5 );
			sleep randTemp * 1000;
			randTemp = Rand( 1, 5 );
			if (randTemp<5) start-script puff();
		}

}// nothing to see here */



SweetSpot(piecenum)
{
	piecenum = body;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	isreset = TRUE;
	turn head to y-axis <0.000000> speed <55.000000>;
	turn head to x-axis <0.000000> speed <55.000000>;
	turn turretr to y-axis <0.000000> speed <55.000000>;
	turn turretr to x-axis <0.000000> speed <55.000000>;
	wait-for-turn head around y-axis;
	wpn1_lasthead = 1000000;
	wpn2_lasthead = 1000000;
	Static_Var_2 = 0;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	turn head to y-axis heading speed <180.000000>;
	turn head to x-axis <0.000000> - pitch speed <110.000000>;
	if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > 1300) AND ((get ABS(wpn1_lasthead - heading)) < 64236)))
	{
		wpn1_lasthead = 1000000;
		wait-for-turn head around y-axis;
		wait-for-turn head around x-axis;
	}
	start-script RestoreAfterDelay();
	wpn1_lasthead = heading;
	return (1);
}

FirePrimary()
{
	
	isreset = FALSE;
	shotcount = shotcount + 1;

	gun_1 = !gun_1;
	if( gun_1 == 0 )
	{
		move barrel1 to z-axis [-3.000000] speed [400.000000];
		call-script lua_UnitScriptLight(1, shotcount);
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.000000] speed [3.000000];
	}
	if( gun_1 == 1 )
	{
		move barrel2 to z-axis [-3.000000] speed [400.000000];
		call-script lua_UnitScriptLight(2, shotcount);
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.000000] speed [3.000000];
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	return(0);
	if( gun_1 == 0 )
	{
		piecenum = barrel1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		piecenum = barrel2;
		return (0);
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
		return (0);
	}

}




AimSecondary(heading, pitch)
{
	
	isreset = FALSE;

	// logic to restrict turret rotation due to unitdef maxangledif
	// maxangledif=180 = 0 to 180 degrees = 0 to 32,768
	// does no turn animation if the target heading is out of firing arc
	// out of firing arc aim calls happen during "preaiming" logic
	//midpoint is 16384 -/|\-
	//get PRINT(get GAME_FRAME, heading, pitch);
	if ( (heading>16384) OR (heading<-16384) )
	{
		return (0);
	}
		


	signal SIG_AIM2;
	turn turretr to y-axis heading speed <180.000000>;
	turn turretr to x-axis <0.000000> - pitch speed <110.000000>;


	start-script RestoreAfterDelay();
	wpn1_lasthead = heading;
	return (1);
	
}

FireSecondary()
{
	if (rollingchill==FALSE) {
		rollingchill = TRUE;
		chillshots = shotcount2;
		sleep 5000;
		start-script chilltime(1);
	}

}

AimFromSecondary(piecenum)
{

		piecenum = barrelr;
}

QuerySecondary(piecenum)
{

		piecenum = flameflarer;


}


Shot2() {
	shotcount2 = shotcount2 + 1;
	call-script lua_UnitScriptLight(3, shotcount2);

	call-script lua_FlameShot(2);
	emit-sfx 1024 + 0 from flameflarer;
}











Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode body type BITMAPONLY | NOHEATCLOUD;
		//explode leg5a type BITMAPONLY | NOHEATCLOUD;
		//explode leg5b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg6a type BITMAPONLY | NOHEATCLOUD;
		//explode leg6b type BITMAPONLY | NOHEATCLOUD;
		//explode leg4a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg4b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg3a type BITMAPONLY | NOHEATCLOUD;
		//explode leg3b type BITMAPONLY | NOHEATCLOUD;
		//explode leg1a type BITMAPONLY | NOHEATCLOUD;
		//explode leg1b type BITMAPONLY | NOHEATCLOUD;
		//explode leg2a type BITMAPONLY | NOHEATCLOUD;
		//explode leg2b type BITMAPONLY | NOHEATCLOUD;
		explode head type BITMAPONLY | NOHEATCLOUD;
		explode barrel1 type BITMAPONLY | NOHEATCLOUD;
		//explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode barrel2 type BITMAPONLY | NOHEATCLOUD;
		//explode flare2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode body type BITMAPONLY | NOHEATCLOUD;
		//explode leg5a type FALL | NOHEATCLOUD;
		//explode leg5b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg6a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg6b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg4a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg4b type FALL | NOHEATCLOUD;
		//explode leg3a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg3b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg1a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg1b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg2a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg2b type FALL | NOHEATCLOUD;
		explode head type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode body type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg5a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg5b type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode leg6a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg6b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg4a type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode leg4b type SMOKE | FALL | NOHEATCLOUD;
		//explode leg3a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg3b type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode leg1a type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode leg1b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg2a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg2b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode head type SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode body type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg5a type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode leg5b type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode leg6a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg6b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg4a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg4b type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode leg3a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg3b type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode leg1a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg1b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode leg2a type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode leg2b type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode head type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
