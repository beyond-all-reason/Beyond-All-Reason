
#include "../recoil_common_includes.h"

piece  	base, armor, ljet, rjet, bjet, gears1, gears2, turret, sleeve, barrel,
		bthrust1, bthrust2, rthrust1, rthrust2, lthrust1, lthrust2, flare, link, aimpoint;
       

static-var  restore_delay, gun_1, isAiming;

// Signal definitions
#define SIGNAL_AIM1 256

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100

#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base

Create()
{
	gun_1 = 1;
	isAiming = 0;
	
	hide bthrust1;
	hide bthrust2;
	hide rthrust1;
	hide rthrust2;
	hide lthrust1;
	hide lthrust2;
	
	hide flare;
	
	hide link;
	hide aimpoint;
	
	SLEEP_UNTIL_UNITFINISHED;
}

Activate()
{
	show bthrust1;
	show bthrust2;
	show rthrust1;
	show rthrust2;
	show lthrust1;
	show lthrust2;
	
	move gears1 to z-axis [12.0] speed [12];
	turn gears1 to x-axis <-30> speed <30>;
	turn gears2 to x-axis <60> speed <45>;
}

Deactivate()
{
	hide bthrust1;
	hide bthrust2;
	hide rthrust1;
	hide rthrust2;
	hide lthrust1;
	hide lthrust2;
	
	move gears1 to z-axis [0.0] speed [18];
	turn gears1 to x-axis <0> speed <45>;
	turn gears2 to x-axis <0> speed <90>;
}

QueryTransport(pieceIndex)
{
	pieceIndex = link;
}

BeginTransport(targetHeight)
{
	move link to y-axis [0.0] - targetHeight now;
}

EndTransport()
{
	move link to y-axis [0.0] now;
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	
	isAiming = 0;
	
	turn turret to y-axis <0>  speed <60>;
	turn sleeve to x-axis <0> speed <60>;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

StartMoving(reversing)
{
	
}

StopMoving()
{	
	
}

MoveRate0()
{
	turn bjet to x-axis <-90> speed <80.0>;
	turn ljet to x-axis <-90> speed <80.0>;
	turn rjet to x-axis <-90> speed <80.0>;
}

MoveRate1()
{
	turn bjet to x-axis <-45> speed <60.0>;
	turn ljet to x-axis <-45> speed <60.0>;
	turn rjet to x-axis <-45> speed <60.0>;
}

MoveRate2()
{
	if (isAiming)
	{
		turn bjet to x-axis <-80> speed <40.0>;
		turn ljet to x-axis <-80> speed <40.0>;
		turn rjet to x-axis <-80> speed <40.0>;
	}
	else
	{
		turn bjet to x-axis <0> speed <45.0>;
		turn ljet to x-axis <0> speed <45.0>;
		turn rjet to x-axis <0> speed <45.0>;
	}
}

MoveRate3()
{
	turn bjet to x-axis <-90> speed <70.0>;
	turn ljet to x-axis <-90> speed <70.0>;
	turn rjet to x-axis <-90> speed <70.0>;
}


AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimpoint;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	
	isAiming = 1;
	
	turn bjet to x-axis <-75> speed <25.0>;
	turn ljet to x-axis <-75> speed <25.0>;
	turn rjet to x-axis <-75> speed <25.0>;
	
	turn turret to y-axis heading  speed <180>;
	turn sleeve to x-axis 0-pitch speed <180>;
	
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
		move barrel to z-axis [-3] now;
		emit-sfx 1024 + 0 from flare;
		sleep 150;
		wait-for-move barrel along z-axis;
		move barrel to z-axis [0.0] speed [6.0];
		return (0);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode armor type BITMAPONLY | NOHEATCLOUD;
		explode ljet type BITMAPONLY | NOHEATCLOUD;
		explode rjet type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode armor type BITMAPONLY | NOHEATCLOUD;
		explode ljet type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rjet type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode armor type BITMAPONLY | NOHEATCLOUD;
		explode ljet type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rjet type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode armor type BITMAPONLY | NOHEATCLOUD;
		explode ljet type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rjet type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return(corpsetype);
}
