
#include "../recoil_common_includes.h"

//#define DEBUG
//#include "../debug.h"
piece  ground, base, flare, turret, wake, sleeve, barrel;

static-var  restore_delay;
static-var  Stunned;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_MOVE 1
#define SIGNAL_IDLE 8

#define HOVER_BASE base
#define HOVER_BANKSPEED <12>
#define HOVER_ROCKBASE ground
#define HOVER_WOBBLE_PERIOD 46
#define HOVER_WOBBLE_AMPLITUDE [0.7]
#define HOVER_WAKEPIECE wake
#define HOVER_IDLE_SFX 1024 + 3
#define HOVER_WAKE_SFX_1 1024 + 1
#define HOVER_WAKE_SFX_2 1024 + 2
#include "../bar_hovercraft_common.h"

#define BASEPIECE ground
#define HITSPEED <15.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 4
#define MAXTILT 200
//#define RECOIL_POWER 40000 // DO NOT USE THIS FOR HOVERS!
#include "../unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide flare;
	hide wake;
	restore_delay = 3000;
	SLEEP_UNTIL_UNITFINISHED;
	start-script HoverCraftMotion();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.0> speed <90.0>;
	turn sleeve to x-axis <0.0> speed <50.0>;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <170.0>;
	turn sleeve to x-axis <0.0> - pitch speed <80.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [-6.0] speed [1250.0];
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.0] speed [7.500000];
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
