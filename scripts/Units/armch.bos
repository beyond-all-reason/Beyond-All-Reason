
#include "../recoil_common_includes.h"

piece  ground, base, beam, nanogun, doorr, doorl, post, wake, turret, cagelight, cagelight_emit;

static-var  readyToBuild;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_BUILD 2
#define SIGNAL_IDLE 8


#define HOVER_BASE base
#define HOVER_BANKSPEED <12>
#define HOVER_ROCKBASE ground
#define HOVER_WOBBLE_PERIOD 40
#define HOVER_WOBBLE_AMPLITUDE [0.6]
#define HOVER_WAKEPIECE wake
#define HOVER_IDLE_SFX 1024 + 2
#define HOVER_WAKE_SFX_1 1024 + 0
#define HOVER_WAKE_SFX_2 1024 + 1
#include "../bar_hovercraft_common.h"

#define BASEPIECE base
#define HITSPEED <35.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100

#include "../unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide wake;
	hide beam;
	hide cagelight_emit;
	readyToBuild = 1;

	while( get(BUILD_PERCENT_LEFT))
	{
		sleep 500;
	}
	start-script HoverCraftMotion();
}

Activate()
{

}

Deactivate()
{

}

StartBuilding(heading, pitch)
{	
	signal SIGNAL_BUILD;
	set-signal-mask SIGNAL_BUILD;

	if (!readyToBuild) {
		turn doorr to z-axis <-67> speed <99>;
		turn doorl to z-axis <67> speed <99>;
		wait-for-turn doorr around z-axis;

		move doorr to y-axis [-2.0] speed [2.0];
		move doorl to y-axis [-2.0] speed [2.0];
		wait-for-move doorr along y-axis;

		turn post to x-axis <90> speed <131>;
		turn nanogun to x-axis <-90> speed <131>;
		wait-for-turn post around x-axis;
		readyToBuild = TRUE;
	}

	turn post to y-axis heading speed <160.0>;
	wait-for-turn post around y-axis;

	set INBUILDSTANCE to 1;

	show beam;
	show cagelight_emit;
	spin cagelight around y-axis speed <225> accelerate <2>;
}

StopBuilding()
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;
	hide beam;
	hide cagelight_emit;
	stop-spin cagelight around y-axis decelerate <4>;

	sleep 6000;

	set INBUILDSTANCE to 0;
	readyToBuild = FALSE;

	
	turn post to y-axis <0> speed <160>;

	turn post to x-axis <0.0> speed <197.0>;
	turn nanogun to x-axis <0.0> speed <197.0>;
	wait-for-turn post around x-axis;

	move doorr to y-axis [0.0] speed [4.0];
	move doorl to y-axis [0.0] speed [4.0];
	wait-for-move doorr along y-axis;

	turn doorr to z-axis <0.0> speed <143.0>;
	turn doorl to z-axis <0.0> speed <143.0>;
	wait-for-turn doorr around z-axis;
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = beam;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorl type BITMAPONLY | NOHEATCLOUD;
		explode post type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorr type SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanogun type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode doorr type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nanogun type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
