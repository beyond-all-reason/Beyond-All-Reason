
#include "../recoil_common_includes.h"

piece  base, flare, wake1, wake2, door1, door2, neck, gun ;

static-var  readyToBuild;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_BUILD 2


#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 200
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.0> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.0> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}


#define TB_BASE base 
#define TB_TURNRATE <30.0> 
#define TB_TILT_X <-0.32>
#define TB_BANK_Z <0.5> // Do not define this if you dont want banking
#define TB_WAKE_PIECE wake1
#define TB_WAKE_PIECE2 wake2
#include "../tilt_bank_submarine.h"


StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}


Create()
{
	hide wake1;
	hide wake2;
	hide flare;
	readyToBuild = FALSE;
	call-script TB_Init();
}

StartBuilding(heading, pitch)
{
	signal SIGNAL_BUILD;
	set-signal-mask SIGNAL_BUILD;
	if (!readyToBuild){
		turn door1 to z-axis <-175> speed <209.241758>;
		turn door2 to z-axis <175> speed <208.917582>;
		wait-for-turn door1 around z-axis;
		
		move neck to y-axis [12] speed [20];
		wait-for-move neck along y-axis;
		
		readyToBuild = TRUE;
	}
	turn gun to y-axis heading speed <160.038462>;
	wait-for-turn gun around y-axis;

	show flare;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;
	hide flare;	

	sleep 6000;

	readyToBuild = FALSE;
	set INBUILDSTANCE to 0;

	turn gun to y-axis <0.0> speed <160.038462>;
	wait-for-turn neck around y-axis;

	move neck to y-axis [0] speed [20];
	wait-for-move neck along y-axis;

	turn door1 to z-axis <0.0> speed <185.258242>;
	turn door2 to z-axis <0.0> speed <184.972527>;
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = flare;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		explode door1 type BITMAPONLY | NOHEATCLOUD;
		explode neck type BITMAPONLY | NOHEATCLOUD;
		explode gun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode neck type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode neck type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode neck type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode gun type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
