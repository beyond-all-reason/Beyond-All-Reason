#include "../recoil_common_includes.h"
piece  tube1, tube2, base, wake;

static-var  gun_1;

// Signal definitions
#define SIGNAL_MOVE 1

//#define DEBUG
//#include "../debug.h"

#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 8
#define MAXTILT 200
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.0> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.0> speed HITSPEED / 4;
}

HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}


#define TB_BASE base 
#define TB_TURNRATE <30.0> 
#define TB_TILT_X <-0.32>
#define TB_BANK_Z <0.5> // Do not define this if you dont want banking
#define TB_WAKE_PIECE wake
#define TB_WAKE_FOAM 1024 + 1
#include "../tilt_bank_submarine.h"


Create()
{
	hide tube1;
	hide wake;
	hide tube2;
	gun_1 = tube1;
	call-script TB_Init();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	START_TILTBANK;
}

StopMoving()
{	
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = gun_1;
}

AimWeapon1(heading, pitch)
{
	return(1);
}

FireWeapon1()
{
	gun_1 = !gun_1;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = gun_1;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tube1 type BITMAPONLY | NOHEATCLOUD;
		explode tube2 type BITMAPONLY | NOHEATCLOUD;
		
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tube1 type FIRE | SMOKE | NOHEATCLOUD;
		explode tube2 type FIRE | SMOKE | NOHEATCLOUD;
		
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tube1 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode tube2 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tube1 type EXPLODE_ON_HIT | FIRE |  NOHEATCLOUD;
		explode tube2 type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
		
	return corpsetype;
}
