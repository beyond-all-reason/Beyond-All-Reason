
#include "../recoil_common_includes.h"
#include "../factories_common.h"

piece  base, pad, nano1, nano2, nano3, nano4, cyl1, cyl2, cyl3, cyl4, cov1_big, cov2_big, cov3_big, cov4_big, 
cov1_small, cov2_small, cov3_small, cov4_small, cover_big1, cover_big2, cover_small1, cover_small2, flare1, flare2, flare3, flare4, 
fan1, fan2, buildlight1, buildlight3, buildlight2, buildlight4, buildlight1Point, buildlight2Point, buildlight3Point, buildlight4Point;

static-var  buildAnimPiece;

// Signal definitions
#define SIGNAL_BUILD 2
#define SIGNAL_TURNON 4


Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide buildlight1Point;
	hide buildlight2Point;
	hide buildlight3Point;
	hide buildlight4Point;
	hide pad;
	buildAnimPiece = 0;
}

#define BASEPIECE base
#define MAXTILT 0
#include "../unit_hitbyweaponid_and_smoke.h"

QueryNanoPiece(pieceIndex)
{
	buildAnimPiece = (buildAnimPiece + 1) % 4;
	pieceIndex = flare1 + buildAnimPiece;
}

Activate()
{
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
	

	move cover_big1 to z-axis [8.5] speed [8.5];
	move cover_small1 to z-axis [-6] speed [6];
	move cover_big2 to z-axis [-8.5] speed [8.5];
	move cover_small2 to z-axis [6] speed [6];

	move cov1_small to x-axis [3] speed [10];
	move cov2_small to x-axis [-3] speed [10];
	move cov3_small to x-axis [3] speed [10];
	move cov4_small to x-axis [-3] speed [10];
	sleep(250);
	move cov1_small to z-axis [9] speed [10];
	move cov2_small to z-axis [9] speed [10];
	move cov3_small to z-axis [-9] speed [10];
	move cov4_small to z-axis [-9] speed [10];
	sleep(100);
	move cov1_big to z-axis [-4.5] speed [10];
	move cov2_big to z-axis [-4.5] speed [10];
	move cov3_big to z-axis [4.5] speed [10];
	move cov4_big to z-axis [4.5] speed [10];
	sleep(50);
	turn cyl1 to x-axis <-45> speed <45>;
	turn cyl2 to x-axis <-45> speed <45>;
	turn cyl3 to x-axis <45> speed <45>;
	turn cyl4 to x-axis <45> speed <45>;	
	wait-for-turn cyl1 around x-axis;
	move nano1 to z-axis [5.5] speed [10];
	move nano2 to z-axis [5.5] speed [10];
	move nano3 to z-axis [-5.5] speed [10];
	move nano4 to z-axis [-5.5] speed [10];
	wait-for-move nano1 along z-axis;
	
	FACTORY_OPEN_BUILD;
}

Deactivate()
{
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;

	move nano1 to z-axis [5.5] speed [10];
	move nano2 to z-axis [5.5] speed [10];
	move nano3 to z-axis [-5.5] speed [10];
	move nano4 to z-axis [-5.5] speed [10];
	turn nano1 to z-axis <0> speed <100>;
	turn nano2 to z-axis <0> speed <100>;
	turn nano3 to z-axis <0> speed <100>;
	turn nano4 to z-axis <0> speed <100>;

	sleep 5000;


	move nano1 to z-axis [0] speed [10];
	move nano2 to z-axis [0] speed [10];
	move nano3 to z-axis [0] speed [10];
	move nano4 to z-axis [0] speed [10];
	wait-for-move nano1 along z-axis;	
	turn cyl1 to x-axis <0> speed <35>;
	turn cyl2 to x-axis <0> speed <35>;
	turn cyl3 to x-axis <0> speed <35>;
	turn cyl4 to x-axis <0> speed <35>;
	wait-for-turn cyl1 around x-axis;
	move cov1_small to x-axis [0] speed [10];
	move cov2_small to x-axis [0] speed [10];
	move cov3_small to x-axis [0] speed [10];
	move cov4_small to x-axis [0] speed [10];
	sleep(350);
	move cov1_small to z-axis [0] speed [10];
	move cov2_small to z-axis [0] speed [10];
	move cov3_small to z-axis [0] speed [10];
	move cov4_small to z-axis [0] speed [10];
	sleep(150);
	move cov1_big to z-axis [0] speed [10];
	move cov2_big to z-axis [0] speed [10];
	move cov3_big to z-axis [0] speed [10];
	move cov4_big to z-axis [0] speed [10];

	move cover_big1 to z-axis [0] speed [8.5];
	move cover_small1 to z-axis [0] speed [6];
	move cover_big2 to z-axis [0] speed [8.5];
	move cover_small2 to z-axis [0] speed [6];

			
	FACTORY_CLOSE_BUILD;
}
MoveCranes()
{
	while(TRUE)
	{
		turn nano1 to z-axis rand(-6500, -4500) speed <100>;
		move nano1 to z-axis rand([0], [5]) speed [10];

		turn nano2 to z-axis rand(2500, 4500) speed <100>;
		move nano2 to z-axis rand([0], [5]) speed [10];

		turn nano3 to z-axis rand(-6500, -4500) speed <100>;
		move nano3 to z-axis rand([-5], [0]) speed [10];

		turn nano4 to z-axis rand(2500, 4500) speed <100>;
		move nano4 to z-axis rand([-5], [0]) speed [10];
		sleep(1000);
	}
}
StartBuilding()
{
	show flare1;
	show flare2;
	show flare3;
	show flare4;
	show buildlight1Point;
	show buildlight2Point;
	show buildlight3Point;
	show buildlight4Point;
	signal SIGNAL_BUILD;
	set-signal-mask SIGNAL_BUILD;
	spin fan1 around y-axis speed <500> accelerate <1>;
	spin fan2 around y-axis speed <500> accelerate <1>;
	start-script MoveCranes();
	move buildlight1 to x-axis [1] speed [0.5];
	move buildlight3 to x-axis [1] speed [0.5];
	move buildlight2 to x-axis [-1] speed [0.5];
	move buildlight4 to x-axis [-1] speed [0.5];
	wait-for-move buildlight4 along x-axis;
	spin buildlight1 around x-axis speed <-200> accelerate <1>;
	spin buildlight3 around x-axis speed <-200> accelerate <1>;
	spin buildlight2 around x-axis speed <200> accelerate <1>;
	spin buildlight4 around x-axis speed <200> accelerate <1>;

}

StopBuilding()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide buildlight1Point;
	hide buildlight2Point;
	hide buildlight3Point;
	hide buildlight4Point;
	stop-spin fan1 around y-axis decelerate <2>;
	stop-spin fan2 around y-axis decelerate <2>;
	stop-spin buildlight1 around x-axis decelerate <1>;
	stop-spin buildlight3 around x-axis decelerate <1>;
	stop-spin buildlight2 around x-axis decelerate <1>;
	stop-spin buildlight4 around x-axis decelerate <1>;
	signal SIGNAL_BUILD;
	wait-for-turn buildlight4 around x-axis;
	move buildlight1 to x-axis [0] speed [0.5];
	move buildlight3 to x-axis [0] speed [0.5];
	move buildlight2 to x-axis [0] speed [0.5];
	move buildlight4 to x-axis [0] speed [0.5]; 
	
	
//	hide cagelight_emit1;
//	hide cagelight_emit2;
//	stop-spin cagelight1 around y-axis decelerate <1>;
//	stop-spin cagelight2 around y-axis decelerate <1>;
}

QueryBuildInfo(pieceIndex)
{
	pieceIndex = pad;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode cyl2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type BITMAPONLY | NOHEATCLOUD;
		explode cyl3 type BITMAPONLY | NOHEATCLOUD;
		explode nano3 type BITMAPONLY | NOHEATCLOUD;
		explode cyl4 type BITMAPONLY | NOHEATCLOUD;
		explode nano4 type BITMAPONLY | NOHEATCLOUD;
		explode cyl1 type BITMAPONLY | NOHEATCLOUD;
		explode nano1 type BITMAPONLY | NOHEATCLOUD;
		explode pad type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode cyl2 type FALL | NOHEATCLOUD;
		explode nano2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode cyl3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano3 type FALL | NOHEATCLOUD;
		explode cyl4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode cyl1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type FALL | NOHEATCLOUD;
		explode pad type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode cyl2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode cyl3 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode nano3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode cyl4 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode nano4 type SMOKE | FALL | NOHEATCLOUD;
		explode cyl1 type SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode pad type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode cyl2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode cyl3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nano3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode cyl4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano4 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode cyl1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode pad type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
