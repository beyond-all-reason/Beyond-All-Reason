
#include "../recoil_common_includes.h"

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 	2
#define SIGNAL_FIRE1 	4

piece  base, armor, turret, sleeve, lbarrel, rbarrel, lflare, rflare, wheelfl, wheelfr, wheelml, wheelmr, wheelbl, wheelbr, radar;

static-var  restore_delay, currentSpeed, moveSpeed, wheelSpeed, oldHeading, wpn1_lasthead, gun_switch;

#define BASEPIECE base
#define HITSPEED <85.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <0.1>
#define TB_BANK_Z <0.1> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"

Steering(heading, steery, currentSpeed)
{
	while(1)
	{
		heading = get HEADING;
		steery = (heading - oldheading)*2;
		
		turn wheelfl to y-axis steery speed <120>;
		turn wheelfr to y-axis steery speed <120>;
		turn wheelbl to y-axis 0 - steery speed <120>;
		turn wheelbr to y-axis 0 - steery speed <120>;
		
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		wheelSpeed = currentSpeed * 50;
		if (currentSpeed<1) currentSpeed=1;	// prevent infinite timing	
		
		spin wheelfl around x-axis speed  (<1> * wheelSpeed);
		spin wheelfr around x-axis speed  (<1> * wheelSpeed);
		spin wheelml around x-axis speed  (<1> * wheelSpeed);         
		spin wheelmr around x-axis speed  (<1> * wheelSpeed);			
		spin wheelbl around x-axis speed  (<1> * wheelSpeed);			
		spin wheelbr around x-axis speed  (<1> * wheelSpeed);	
		sleep 66;
		oldheading = heading;
	}
}

Create()
{
	hide lflare;
	hide rflare;
	restore_delay = 6000;
	moveSpeed = get MAX_SPEED;
	oldheading = get HEADING;
	call-script TB_Init();
	start-script Steering();
	
	gun_switch = 0;
	
	SLEEP_UNTIL_UNITFINISHED;

    turn radar to x-axis <-45> speed <25.0>;
    spin radar around z-axis speed <60.0>;
	start-script ExecuteRestoreAfterDelay();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
    start-script Steering();
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	
    stop-spin wheelfl around x-axis;
    stop-spin wheelfr around x-axis;
    stop-spin wheelml around x-axis;
    stop-spin wheelmr around x-axis;
    stop-spin wheelbl around x-axis;
    stop-spin wheelbr around x-axis;
	STOP_TILTBANK;
}


SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
    turn sleeve to x-axis <-30> speed <25.00000>;
    spin turret around y-axis speed <25.0>;
	
	sleep restore_delay;
	wpn1_lasthead = 1000000;
	set-signal-mask 0;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	
	stop-spin turret around y-axis;

	turn turret to y-axis heading speed <240.0>;
	turn sleeve to x-axis <0.0> - pitch speed <120.0>;
	
	//wait-for-turn turret around y-axis;
	
	wpn1_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	spin lbarrel around z-axis speed <-2000.0>;
	spin rbarrel around z-axis speed <2000.0>;
	stop-spin lbarrel around z-axis decelerate <12>;
	stop-spin rbarrel around z-axis decelerate <12>;
	return (0);
}

QueryWeapon1(piecenum)
{
	piecenum = lflare + gun_switch;
	return (0);
}

Shot1(zero) //Barrel switcher so each minigun fires at the same time
{
	signal SIGNAL_FIRE1;
	set-signal-mask SIGNAL_FIRE1;
	
	
	if(gun_switch == 0)
	{
		emit-sfx 1024 + 0 from rflare;
	}
	else
	{
		emit-sfx 1024 + 0 from lflare;
	}
	
	gun_switch = !gun_switch;
	return(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}
Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode armor type BITMAPONLY | NOHEATCLOUD;
		//explode flare1 type BITMAPONLY | NOHEATCLOUD;
		//explode barrel2 type BITMAPONLY | NOHEATCLOUD;
		//explode flare2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode armor type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1 type FALL | NOHEATCLOUD;
		//explode barrel2 type FALL | NOHEATCLOUD;
		//explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode armor type SMOKE | FALL | NOHEATCLOUD;
		//explode flare1 type SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode armor type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
