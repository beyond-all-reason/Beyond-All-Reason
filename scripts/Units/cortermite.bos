
#include "../recoil_common_includes.h"

piece  body, head, barrel1, barrel2, flare1, flare2,  leg1a,leg1b,leg2a,leg2b,leg3a,leg3b,leg4a,leg4b,leg5a,leg5b,leg6a,leg6b, aimy1;

static-var  moving, firing, restore_delay, gun_1,moveSpeed, currentSpeed,WALK_PERIOD, wpn1_lasthead, wpn2_lasthead;

// Signal definitions
#define SIGNAL_AIM1 256

#define SIGNAL_MOVE 1

#define FRONT_RIGHT_UP\
	turn leg6a to y-axis <70> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg6a to z-axis <20> speed <20> *1000/(WALK_PERIOD);

#define FRONT_RIGHT_DOWN\
	turn leg6a to z-axis <-10> speed <30> *1000/(WALK_PERIOD);\
	turn leg6b to z-axis <85> speed <85> *1000/(WALK_PERIOD);

#define FRONT_RIGHT_BACK\
	turn leg6a to y-axis <45> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg6a to z-axis <0> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg6b to z-axis <0> speed <23.75> *1000/(WALK_PERIOD);


#define FRONT_LEFT_UP\
	turn leg1a to y-axis <-70> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg1a to z-axis <-20> speed <20> *1000/(WALK_PERIOD);

#define FRONT_LEFT_DOWN\
	turn leg1a to z-axis <10> speed <30> *1000/(WALK_PERIOD);\
	turn leg1b to z-axis <-85> speed <85> *1000/(WALK_PERIOD);

#define FRONT_LEFT_BACK\
	turn leg1a to y-axis <-45> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg1a to z-axis <0> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg1b to z-axis <0> speed <23.75> *1000/(WALK_PERIOD);


#define MIDDLE_RIGHT_UP\
	turn leg5a to y-axis <22.5> speed <22.5> *1000/(WALK_PERIOD);\
	turn leg5a to z-axis <20> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_RIGHT_DOWN\
	turn leg5a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_RIGHT_BACK\
	turn leg5a to y-axis <-22.5> speed <12.5> *1000/(WALK_PERIOD);


#define MIDDLE_LEFT_UP\
	turn leg2a to y-axis <-22.5> speed <22.5> *1000/(WALK_PERIOD);\
	turn leg2a to z-axis <-20> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_LEFT_DOWN\
	turn leg2a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_LEFT_BACK\
	turn leg2a to y-axis <22.5> speed <12.5> *1000/(WALK_PERIOD);\


#define REAR_RIGHT_UP\
	turn leg4a to y-axis <-45> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg4a to z-axis <20> speed <50> *1000/(WALK_PERIOD);\
	turn leg4b to z-axis <0> speed <55> *1000/(WALK_PERIOD);

#define REAR_RIGHT_DOWN\
	turn leg4a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define REAR_RIGHT_BACK\
	turn leg4a to y-axis <-70> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg4a to z-axis <-30> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg4b to z-axis <85> speed <23.75> *1000/(WALK_PERIOD);


#define REAR_LEFT_UP\
	turn leg3a to y-axis <45> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg3a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);\
	turn leg3b to z-axis <0> speed <55> *1000/(WALK_PERIOD);

#define REAR_LEFT_DOWN\
	turn leg3a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define REAR_LEFT_BACK\
	turn leg3a to y-axis <70> speed <6.25> *1000/(WALK_PERIOD);\
	turn leg3a to z-axis <30> speed <7.5> *1000/(WALK_PERIOD);\
	turn leg3b to z-axis <-85> speed <23.75> *1000/(WALK_PERIOD);


#define WAIT_WALK\
	sleep WALK_PERIOD;\
	while(!moving)\
	{\
		sleep 111;\
	}


DoTheWalking()
{
	while(TRUE)
	{
		move body to y-axis [0.7] speed [5];
		WAIT_WALK
		FRONT_RIGHT_UP
		MIDDLE_RIGHT_BACK
		REAR_LEFT_DOWN
		
		move body to y-axis [0] speed [5];
		WAIT_WALK
		FRONT_RIGHT_DOWN
		MIDDLE_LEFT_UP
		REAR_LEFT_BACK
		
		move body to y-axis [0.7] speed [5];
		WAIT_WALK
		FRONT_RIGHT_BACK
		MIDDLE_LEFT_DOWN
		REAR_RIGHT_UP
		
		move body to y-axis [0] speed [5];
		WAIT_WALK
		MIDDLE_LEFT_BACK
		REAR_RIGHT_DOWN
		FRONT_LEFT_UP
		
		move body to y-axis [0.7] speed [5];
		WAIT_WALK
		REAR_RIGHT_BACK
		FRONT_LEFT_DOWN
		MIDDLE_RIGHT_UP
		
		move body to y-axis [0] speed [5];
		WAIT_WALK
		FRONT_LEFT_BACK
		MIDDLE_RIGHT_DOWN
		REAR_LEFT_UP
	}
}

UnitSpeed()
{
	while(TRUE)
	{
		if (moving)
		{
			//currentSpeed = (moveSpeed * 80)/(get CURRENT_SPEED);
			//if (currentSpeed>300) currentSpeed=300;
			//WALK_PERIOD=currentSpeed;
			//get PRINT(1,WALK_PERIOD,moveSpeed);
			WALK_PERIOD=98;
		}
		sleep 142;
		//get PRINT(moving, currentSpeed,0,0);
	}
}

StopWalk()
{
	turn leg6a to z-axis <20> speed <50> *1000/(WALK_PERIOD);
	turn leg6b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg6a to y-axis <45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg6a to z-axis <0> speed <30> *1000/(WALK_PERIOD);
	turn leg6b to z-axis <20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);

	turn leg2a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);
	turn leg2b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg2a to y-axis <0> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg2a to z-axis <0> speed <10> *1000/(WALK_PERIOD);
	turn leg2b to z-axis <20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	
	turn leg4a to z-axis <20> speed <50> *1000/(WALK_PERIOD);
	turn leg4b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg4a to y-axis <-45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg4a to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	
	turn leg1a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);
	turn leg1b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg1a to y-axis <-45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg1a to z-axis <0> speed <30> *1000/(WALK_PERIOD);
	turn leg1b to z-axis <-20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);

	turn leg5a to z-axis <20> speed <50> *1000/(WALK_PERIOD);
	turn leg5b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg5a to y-axis <0> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg5a to z-axis <0> speed <10> *1000/(WALK_PERIOD);
	turn leg5b to z-axis <-20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);

	turn leg3a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);
	turn leg3b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg3a to y-axis <45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg3b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg3a to z-axis <0> speed <20> *1000/(WALK_PERIOD);
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	start-script UnitSpeed();
	start-script DoTheWalking();
	moving=TRUE;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	moving=FALSE;
	set-signal-mask SIGNAL_MOVE;
	start-script StopWalk();
}


#define BASEPIECE body
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 8
#define MAXTILT 100

#include "../unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide flare1;
	hide flare2;
	hide aimy1;
	moving = FALSE;
	gun_1 = 0;
	firing = 0;
	turn body to x-axis <-15.0> speed <55.0>;
	turn aimy1 to x-axis <15.0> speed <55.0>;
	restore_delay = 3000;
	turn leg6a to y-axis <30> now;
	turn leg4a to y-axis <-30> now;
	turn leg1a to y-axis <-30> now;//2
	turn leg3a to y-axis <30> now;//5
	moveSpeed = (get MAX_SPEED);
	WALK_PERIOD=400;
}




SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn head to y-axis <0.0> speed <55.0>;
	turn head to x-axis <0.0> speed <55.0>;
	wait-for-turn head around y-axis;
	wpn1_lasthead = 0xbadface;
	wpn2_lasthead = 0xbadface;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	set-signal-mask SIGNAL_AIM1;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	turn head to y-axis heading speed <180.0>;
	turn head to x-axis <0.0> - pitch speed <110.0>;
	if ((wpn1_lasthead == 0xbadface) OR ABSOLUTE_GREATER_THAN(WRAPDELTA(heading - wpn1_lasthead), <7>))
	{
		wpn1_lasthead = 0xbadface;
		wait-for-turn head around y-axis;
		wait-for-turn head around x-axis;
	}
	start-script RestoreAfterDelay();
	wpn1_lasthead = heading;
	return (1);
}

FireWeapon1()
{
	if( gun_1 == 0 AND firing == 0)
	{
		firing = 1;
		move barrel1 to z-axis [-1.900000] speed [400.0];
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.0] speed [5.0];
		wait-for-move barrel1 along z-axis;
		gun_1 = !gun_1;
		firing = 0;
		return (0);
	}
	if( gun_1 == 1 AND firing == 0)
	{
		firing = 1;
		move barrel2 to z-axis [-1.900000] speed [400.0];
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.0] speed [5.0];
		wait-for-move barrel2 along z-axis;
		gun_1 = !gun_1;
		firing = 0;
		return (0);
	}
	return (0);
}

AimFromWeapon1(pieceIndex)
{
	if( gun_1 == 0 )
	{
		pieceIndex = flare1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		pieceIndex = flare2;
		return (0);
	}
}

QueryWeapon1(pieceIndex)
{
	if( gun_1 == 0 )
	{
		pieceIndex = flare1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		pieceIndex = flare2;
		return (0);
	}

}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode body type BITMAPONLY | NOHEATCLOUD;
		explode head type BITMAPONLY | NOHEATCLOUD;
		explode barrel1 type BITMAPONLY | NOHEATCLOUD;
		explode barrel2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode body type BITMAPONLY | NOHEATCLOUD;
		explode head type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode body type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode head type SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode body type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode head type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}