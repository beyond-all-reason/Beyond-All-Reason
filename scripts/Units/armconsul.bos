
#include "../recoil_common_includes.h"

piece  base, rtracks, ltracks, larm1, larm2, larm3, rarm1,rarm2,rarm3,rturret,lturret,lnano,rnano;

static-var  buildHeading, readyToBuild, nano;

#define SIGNAL_MOVE 1
#define SIGNAL_BUILD 2

#define BASEPIECE base
#define HITSPEED <65.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100
#include "../unit_hitbyweaponid_and_smoke.h"


#define TB_BASE base 
#define TB_TURNRATE <20.0> 
#define TB_TILT_X <0.15>
#define TB_BANK_Z <0.15> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"


Create()
{
	hide rnano;
	hide lnano;
	buildHeading = 0;
	nano=0;
	readyToBuild = FALSE;
	call-script TB_Init();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}


QueryNanoPiece(pieceIndex)
{
	pieceIndex = lnano + nano;
	nano = !nano;
}


StartBuilding(heading)
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;
	buildHeading = heading;

	if (!readyToBuild){
		turn larm2 to y-axis <45> speed <180>;
		turn rarm2 to y-axis <-45> speed <180>;
		turn larm3 to y-axis <90> speed <360>;
		turn rarm3 to y-axis <-90> speed <360>;
		wait-for-turn larm3 around y-axis;
		
		turn larm1 to x-axis <-90> speed <360>;
		turn rarm1 to x-axis <-90> speed <360>;
		wait-for-turn larm1 around x-axis;

		turn larm2 to y-axis <0> speed <180>;
		turn rarm2 to y-axis <0> speed <180>;
		wait-for-turn larm2 around x-axis;
		readyToBuild = TRUE;
	}
	
	turn lturret to x-axis <-90> - buildHeading speed <360>;
	turn rturret to x-axis <-90> + buildHeading speed <360>;
	wait-for-turn lturret around x-axis;

	set INBUILDSTANCE to 1;

	show rnano;
	show lnano;
}

StopBuilding()
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;
	hide rnano;
	hide lnano;

	sleep 6000;

	set INBUILDSTANCE to 0;
	readyToBuild = FALSE;

	turn larm1 to x-axis <0> speed <360>;
	turn rarm1 to x-axis <0> speed <360>;
	turn lturret to x-axis <0> speed <360>;
	turn rturret to x-axis <0> speed <360>;
	wait-for-turn larm2 around x-axis;
	
	turn larm2 to y-axis <45> speed <180>;
	turn rarm2 to y-axis <-45> speed <180>;
	wait-for-turn larm1 around x-axis;

	turn larm2 to y-axis <0> speed <180>;
	turn rarm2 to y-axis <0> speed <180>;
	turn larm3 to y-axis <0> speed <360>;
	turn rarm3 to y-axis <0> speed <360>;
	wait-for-turn larm3 around y-axis;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode ltracks type BITMAPONLY | NOHEATCLOUD;
		explode larm3 type BITMAPONLY | NOHEATCLOUD;
		explode lturret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode ltracks type FALL | NOHEATCLOUD;
		explode larm3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lturret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ltracks type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode larm2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode larm3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lturret type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ltracks type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode larm1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode larm2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode larm3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lturret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
