
#include "../recoil_common_includes.h"

#define SIGNAL_BUILD 2

piece  base, door1, door2,  nano1, nano2, turret, ltrack, lwheels, lfwheel, lbwheel, rtrack, rwheels, rfwheel, rbwheel, cagelight, cagelight_emit;

static-var  readyToBuild, nanopiece,  currentSpeed, moveSpeed, wheelSpeed;

#define SIGNAL_MOVE 1

WheelControl()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		wheelSpeed = currentSpeed * 1.5; //original speed 7
		if (currentSpeed<0.5) currentSpeed=0.5;	// prevent infinite timing
		spin lfwheel around x-axis speed  (<10>*wheelSpeed); // was all *currentSpeed     
		spin lbwheel around x-axis speed  (<10>*wheelSpeed);			
		spin rfwheel around x-axis speed  (<10>*wheelSpeed);
		spin rbwheel around x-axis speed  (<10>*wheelSpeed);	
		sleep 96; 
	}
}

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100

#include "../unit_hitbyweaponid_and_smoke.h"



#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <0.1>
#define TB_BANK_Z <0.1> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"



Create()
{
	hide nano2;
	hide nano1;
	hide cagelight_emit;
	readyToBuild = 0;
	nanopiece=TRUE;
	moveSpeed = get MAX_SPEED; //new	
	call-script TB_Init();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;

	start-script WheelControl();
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	stop-spin lfwheel around x-axis;
	stop-spin lbwheel around x-axis;
	stop-spin rfwheel around x-axis;
	stop-spin rbwheel around x-axis;
	STOP_TILTBANK;
}

StartBuilding(heading, pitch)
{	
	signal SIGNAL_BUILD;
	set-signal-mask SIGNAL_BUILD;

	//get PRINT(333, readyToBuild, get TARGET_ID);
	if (!readyToBuild) {
		move door2 to z-axis [-6] speed [7];
		move door1 to z-axis [6] speed [7];
		wait-for-move door1 along z-axis;

		move turret to y-axis [5.4] speed [5.4];
		wait-for-move turret along y-axis;

		readyToBuild = TRUE;
	}

	turn turret to y-axis heading speed <160>;
	wait-for-turn turret around y-axis;

	set INBUILDSTANCE to 1;
	
	show nano2;
	show nano1;
	show cagelight_emit;
	spin cagelight around z-axis speed <150> accelerate <1>;
}

StopBuilding()
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;
	
	//get PRINT(444, readyToBuild);
	hide nano2;
	hide nano1;
	hide cagelight_emit;
	stop-spin cagelight around z-axis decelerate <1>;

	sleep 6000;

	set INBUILDSTANCE to 0;
	readyToBuild = FALSE;
	
	turn turret to y-axis <0> speed <160>;
	wait-for-turn turret around y-axis;

	move turret to y-axis [0] speed [12];
	wait-for-move turret along y-axis;

	move door1 to z-axis [0] speed [7];
	move door2 to z-axis [0] speed [7];
	wait-for-move door1 along z-axis;
}

QueryNanoPiece(pieceIndex)
{
	nanopiece= !nanopiece;
	pieceIndex = nano1 + nanopiece;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode nano1 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
