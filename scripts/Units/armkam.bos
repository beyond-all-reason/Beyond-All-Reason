
#include "../recoil_common_includes.h"

piece  base, lflare, rflare, lfin, rfin, rturret, lturret, thrusta, thrustb, engines;

// Signal definitions
#define SIGNAL_MOVE 1


#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base
#include "../idlehover.h"

static-var gun_1;
Create()
{
	hide lflare;
	hide rflare;
	hide thrusta;
	hide thrustb;
	turn thrusta to x-axis <-90> now; 
	turn thrustb to x-axis <-90> now; 
	gun_1=0;
	SLEEP_UNTIL_UNITFINISHED;
	start-script IdleHover();
}

Activate()
{
	show thrusta;
	show thrustb;
}

Deactivate()
{

	hide thrusta;
	hide thrustb;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn lturret to x-axis <0.0> speed <50.0>;
	turn rturret to x-axis <0.0> speed <50.0>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 500;
	start-script ExecuteRestoreAfterDelay();
}


#define BASEPIECE base
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

MoveRate1()
{
	start-script RestoreAfterDelay();
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	turn base to z-axis <0.0> speed <120.0>;
	//start-script ProcessFlames();
}

MoveRate2()
{
	start-script RestoreAfterDelay();
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	turn engines to x-axis <90> speed <90>;
	//start-script ProcessFlames();
	sleep 1000;
	turn base to z-axis <240.0> speed <120.0>;
	wait-for-turn base around z-axis;
	turn base to z-axis <120.0> speed <180.0>;
	wait-for-turn base around z-axis;
	turn base to z-axis <0.0> speed <120.0>;
	
}

MoveRate3()
{
	start-script RestoreAfterDelay();
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	//start-script ProcessFlames();
	turn base to z-axis <0.0> speed <120.0>;
	
	turn engines to x-axis <90> speed <90>;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = base;
}

AimWeapon1(heading, pitch)
{
	return (1);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = lflare + gun_1;
}

FireWeapon1()
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	
	gun_1=!gun_1;
	start-script RestoreAfterDelay();
	
	sleep 200;
	turn engines to x-axis <0> speed <90>;
}

Shot1(zero)
{
	if (gun_1==0)
	{
		emit-sfx 1024 + 0 from lflare;
	}
	else 
	{
		emit-sfx 1024 + 0 from rflare;
	}
	return(1);
}

StartMoving(reversing)
{
	start-script RestoreAfterDelay();
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	move lfin to z-axis [-8] speed [8];
	move rfin to z-axis [-8] speed [8];
	turn engines to x-axis <90> speed <90>;
	wait-for-move lfin along z-axis;
}

StopMoving()
{
	start-script RestoreAfterDelay();
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	move lfin to z-axis [0] speed [8];
	move rfin to z-axis [0] speed [8];
	
	turn engines to x-axis <0> speed <90>;
	wait-for-move lfin along z-axis;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rfin type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode engines type BITMAPONLY | NOHEATCLOUD;
		explode thrustb type BITMAPONLY | NOHEATCLOUD;
		explode thrusta type BITMAPONLY | NOHEATCLOUD;
		explode rturret type BITMAPONLY | NOHEATCLOUD;
		explode rflare type BITMAPONLY | NOHEATCLOUD;
		explode lfin type BITMAPONLY | NOHEATCLOUD;
		explode lturret type BITMAPONLY | NOHEATCLOUD;
		explode lflare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rfin type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode engines type BITMAPONLY | NOHEATCLOUD;
		explode thrustb type BITMAPONLY | NOHEATCLOUD;
		explode thrusta type BITMAPONLY | NOHEATCLOUD;
		explode rturret type BITMAPONLY | NOHEATCLOUD;
		explode rflare type BITMAPONLY | NOHEATCLOUD;
		explode lfin type BITMAPONLY | NOHEATCLOUD;
		explode lturret type BITMAPONLY | NOHEATCLOUD;
		explode lflare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rfin type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode engines type BITMAPONLY | NOHEATCLOUD;
		explode thrustb type BITMAPONLY | NOHEATCLOUD;
		explode thrusta type BITMAPONLY | NOHEATCLOUD;
		explode rturret type BITMAPONLY | NOHEATCLOUD;
		explode rflare type BITMAPONLY | NOHEATCLOUD;
		explode lfin type BITMAPONLY | NOHEATCLOUD;
		explode lturret type BITMAPONLY | NOHEATCLOUD;
		explode lflare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
    explode base type BITMAPONLY | NOHEATCLOUD;
    explode rfin type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
    explode engines type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
    explode thrustb type BITMAPONLY | NOHEATCLOUD;
    explode thrusta type BITMAPONLY | NOHEATCLOUD;
    explode rturret type BITMAPONLY | NOHEATCLOUD;
    explode rflare type BITMAPONLY | NOHEATCLOUD;
    explode lfin type BITMAPONLY | NOHEATCLOUD;
    explode lturret type BITMAPONLY | NOHEATCLOUD;
    explode lflare type BITMAPONLY | NOHEATCLOUD;
    return(corpsetype);
	return corpsetype;
}
