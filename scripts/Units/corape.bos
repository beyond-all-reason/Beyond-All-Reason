
#include "../recoil_common_includes.h"

piece  	base, body, lpaddle, rpaddle, rjet, rthrust, rwing, rmislink, rmissile, rflare, lflare,
		ljet, lthrust, lwing, lmislink, lmissile,  lhthrust1, lhthrust2, rhthrust1, rhthrust2  ;

static-var  gun_1, restore_delay;

// Signal definitions
#define SIGNAL_AIM1 256

#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base
#include "../idlehover.h"


#define BASEPIECE base
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

Create()
{
	hide lthrust;
	hide lflare;
	hide rthrust;
	hide rflare;
	hide lhthrust1;
	hide rhthrust2;
	hide lhthrust2;
	hide rhthrust1;
	hide rflare;
	hide lflare;
	gun_1 = rflare;

	turn rwing to z-axis <0> speed <90>;
	turn lwing to z-axis <0> speed <90>;
	turn rwing to x-axis <90> speed <90>;
	turn lwing to x-axis <90> speed <90>;
	//turn rmislink to x-axis <90> speed <90>;
	//turn lmislink to x-axis <90> speed <90>;
	//turn wing to x-axis <0> -pitch speed <300>;
	turn rjet to x-axis <-90> speed <90>;
	turn ljet to x-axis <-90> speed <90>;
	wait-for-turn rjet around x-axis;
	wait-for-turn ljet around x-axis;
	SLEEP_UNTIL_UNITFINISHED;
	start-script IdleHover();
}

Activate()
{
	show rthrust;
	show lthrust;

}

Deactivate()
{
	hide rthrust;
	hide lthrust;
}


//static-var  Stunned;
//ExecuteRestoreAfterDelay()
//{
//   if (Stunned) {
//       return (1);
//    }
//   turn rjet to x-axis <0> speed <90>;
//	turn ljet to x-axis <0> speed <90>;
// }
//SetStunned(State)
//{
//    Stunned = State;
//	if (!Stunned) {
//	    start-script ExecuteRestoreAfterDelay();
//	}
//}
RestoreAfterDelay()
{
	set-signal-mask SIGNAL_AIM1;
	sleep restore_delay;
	set-signal-mask 0;
	/*
   	turn rjet to x-axis <0> speed <90>;
	turn ljet to x-axis <0> speed <90>;
	turn rwing to z-axis <-45> speed <90>;
	turn lwing to z-axis <45> speed <90>;
	turn rwing to x-axis <0> speed <90>;
	turn lwing to x-axis <0> speed <90>;//*/
	//turn rmislink to x-axis <0> speed <90>;
	//turn lmislink to x-axis <-0> speed <90>;

	//sleep restore_delay;
	//start-script ExecuteRestoreAfterDelay();
}
// end block 



QueryWeapon1(pieceIndex)
{
	pieceIndex = rflare + gun_1;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	/*
	turn rwing to z-axis <0> speed <90>;
	turn lwing to z-axis <0> speed <90>;
	turn rwing to x-axis <90> speed <90>;
	turn lwing to x-axis <90> speed <90>;
	//turn rmislink to x-axis <90> speed <90>;
	//turn lmislink to x-axis <90> speed <90>;
	//turn wing to x-axis <0> -pitch speed <300>;
	turn rjet to x-axis <-90> speed <90>;
	turn ljet to x-axis <-90> speed <90>;
	wait-for-turn rjet around x-axis;
	wait-for-turn ljet around x-axis;//*/

	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	if( gun_1 == 0 )
	{
		show rmissile;
		sleep 150;
		hide rmissile;
	}
	if( gun_1 == 1 )
	{
		show lmissile;
		sleep 150;
		hide lmissile;
	}
	gun_1 = !gun_1;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rwing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lwing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode body type BITMAPONLY | NOHEATCLOUD;
		explode rjet type BITMAPONLY | NOHEATCLOUD;
		explode ljet type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rwing type FALL | NOHEATCLOUD;
		explode lwing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode body type BITMAPONLY | NOHEATCLOUD;
		explode rjet type BITMAPONLY | NOHEATCLOUD;
		explode ljet type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rwing type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode lwing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode body type BITMAPONLY | NOHEATCLOUD;
		explode rjet type BITMAPONLY | NOHEATCLOUD;
		explode ljet type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rwing type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lwing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rjet type BITMAPONLY | NOHEATCLOUD;
		explode ljet type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
