#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, rflare, lflare, pelvis,
       rarm, larm, aimy1, aimx1, leg2a, leg2b, leg3a, leg3b, leg4a, leg4b, leg5a, leg5b,
	   shield, shldbot, shldout, shldin, shldtop, rhand, rheatray,
	   backpack, neck, head;

static-var  bMoving, bAiming, ReadyToAim, restore_delay, gun_1, wpn1_lasthead, statechg_DesiredState,
			statechg_StateChanging, WALK_PERIOD, moveSpeed, tdamage, shieldup;

// Signal definitions
#define SIG_AIM				2
#define SIG_WALK			4
#define SIG_AIM_2			8

#define BASEPIECE pelvis
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	tdamage = dmg + tdamage;
	if ((tdamage > 30000) AND (shieldup == 1))
	{
		explode Shield type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;	
		hide Shield;
		explode Shldbot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;	
		hide Shldbot;
		explode Shldout type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;	
		hide Shldout;
		explode Shldin type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;	
		hide Shldin;
		explode Shldtop type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;	
		hide Shldtop;
		set ARMORED to 0;
		shieldup = 0;
	}
	return (100); //return damage percent
}

//#define FRONT_RIGHT_UP\
//	turn leg6a to y-axis <70> speed <12.5> *1000/(WALK_PERIOD);\
//	turn leg6a to z-axis <20> speed <20> *1000/(WALK_PERIOD);

//#define FRONT_RIGHT_DOWN\
//	turn leg6a to z-axis <-10> speed <30> *1000/(WALK_PERIOD);\
//	turn leg6b to z-axis <85> speed <85> *1000/(WALK_PERIOD);

//#define FRONT_RIGHT_BACK\
//	turn leg6a to y-axis <45> speed <6.25> *1000/(WALK_PERIOD);\
//	turn leg6a to z-axis <0> speed <7.5> *1000/(WALK_PERIOD);\
//	turn leg6b to z-axis <0> speed <23.75> *1000/(WALK_PERIOD);

//#define FRONT_LEFT_UP\
//	turn leg1a to y-axis <-70> speed <12.5> *1000/(WALK_PERIOD);\
//	turn leg1a to z-axis <-20> speed <20> *1000/(WALK_PERIOD);

//#define FRONT_LEFT_DOWN\
//	turn leg1a to z-axis <10> speed <30> *1000/(WALK_PERIOD);\
//	turn leg1b to z-axis <-85> speed <85> *1000/(WALK_PERIOD);

//#define FRONT_LEFT_BACK\
//	turn leg1a to y-axis <-45> speed <6.25> *1000/(WALK_PERIOD);\
//	turn leg1a to z-axis <0> speed <7.5> *1000/(WALK_PERIOD);\
//	turn leg1b to z-axis <0> speed <23.75> *1000/(WALK_PERIOD);
	
#define MIDDLE_RIGHT_UP\
	turn leg5a to y-axis <45> speed <22.5> *1000/(WALK_PERIOD);\
	turn leg5a to z-axis <20> speed <20> *1000/(WALK_PERIOD);\
	turn leg5b to z-axis <20> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_RIGHT_DOWN\
	turn leg5a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_RIGHT_BACK\
	turn leg5a to y-axis <0> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg5b to z-axis <-5> speed <10> *1000/(WALK_PERIOD);

#define MIDDLE_LEFT_UP\
	turn leg2a to y-axis <-45> speed <22.5> *1000/(WALK_PERIOD);\
	turn leg2a to z-axis <-20> speed <20> *1000/(WALK_PERIOD);\
	turn leg2b to z-axis <-20> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_LEFT_DOWN\
	turn leg2a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define MIDDLE_LEFT_BACK\
	turn leg2a to y-axis <0> speed <12.5> *1000/(WALK_PERIOD);\
	turn leg2b to z-axis <5> speed <10> *1000/(WALK_PERIOD);

#define REAR_RIGHT_UP\
	turn leg4a to y-axis <-15> speed <22.5> *1000/(WALK_PERIOD);\
	turn leg4a to z-axis <20> speed <30> *1000/(WALK_PERIOD);\
	turn leg4b to z-axis <-10> speed <40> *1000/(WALK_PERIOD);

#define REAR_RIGHT_DOWN\
	turn leg4a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define REAR_RIGHT_BACK\
	turn leg4a to y-axis <-60> speed <12.25> *1000/(WALK_PERIOD);\
	turn leg4a to z-axis <-10> speed <4.5> *1000/(WALK_PERIOD);\
	turn leg4b to z-axis <50> speed <20> *1000/(WALK_PERIOD);


#define REAR_LEFT_UP\
	turn leg3a to y-axis <15> speed <22.5> *1000/(WALK_PERIOD);\
	turn leg3a to z-axis <-20> speed <30> *1000/(WALK_PERIOD);\
	turn leg3b to z-axis <10> speed <40> *1000/(WALK_PERIOD);

#define REAR_LEFT_DOWN\
	turn leg3a to z-axis <0> speed <20> *1000/(WALK_PERIOD);

#define REAR_LEFT_BACK\
	turn leg3a to y-axis <60> speed <12.25> *1000/(WALK_PERIOD);\
	turn leg3a to z-axis <10> speed <4.5> *1000/(WALK_PERIOD);\
	turn leg3b to z-axis <-50> speed <20> *1000/(WALK_PERIOD);


#define WAIT_WALK\
	sleep WALK_PERIOD;\
	while(!bMoving)\
	{\
		sleep 111;\
	}

DoTheWalking()
{
	while(TRUE)
	{
		move pelvis to y-axis [0.77] speed [5.5];
		WAIT_WALK
		MIDDLE_RIGHT_BACK
		REAR_LEFT_DOWN
		
		move pelvis to y-axis [0] speed [5.5];
		WAIT_WALK
		MIDDLE_LEFT_UP
		REAR_LEFT_BACK
		
		move pelvis to y-axis [0.77] speed [5.5];
		WAIT_WALK
		MIDDLE_LEFT_DOWN
		REAR_RIGHT_UP
		
		move pelvis to y-axis [0] speed [5.5];
		WAIT_WALK
		MIDDLE_LEFT_BACK
		REAR_RIGHT_DOWN
		
		move pelvis to y-axis [0.77] speed [5.5];
		WAIT_WALK
		REAR_RIGHT_BACK
		MIDDLE_RIGHT_UP
		
		move pelvis to y-axis [0] speed [5.5];
		WAIT_WALK
		MIDDLE_RIGHT_DOWN
		REAR_LEFT_UP
	}
}


UnitSpeed()
{
	while(TRUE)
	{
		if (bMoving)
		{
			//currentSpeed = (moveSpeed * 80)/(get CURRENT_SPEED);
			//if (currentSpeed>300) currentSpeed=300;
			//WALK_PERIOD=currentSpeed;
			//get PRINT(1,WALK_PERIOD,moveSpeed);
			WALK_PERIOD=120;
		}
		sleep 142;
		//get PRINT(bMoving, currentSpeed,0,0);
	}
}

StartMoving()
{
	signal SIG_WALK;
	set-signal-mask SIG_WALK;
	bMoving=TRUE;
}

StopMoving()
{
	signal SIG_WALK;
	set-signal-mask SIG_WALK;
	bMoving=FALSE;
	sleep 20*(WALK_PERIOD);
	
	turn leg2a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);
	turn leg2b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg2a to y-axis <0> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg2a to z-axis <0> speed <10> *1000/(WALK_PERIOD);
	turn leg2b to z-axis <20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	
	turn leg4a to z-axis <20> speed <50> *1000/(WALK_PERIOD);
	turn leg4b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg4a to y-axis <-45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg4a to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);

	turn leg5a to z-axis <20> speed <50> *1000/(WALK_PERIOD);
	turn leg5b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg5a to y-axis <0> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg5a to z-axis <0> speed <10> *1000/(WALK_PERIOD);
	turn leg5b to z-axis <-20> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);

	turn leg3a to z-axis <-20> speed <50> *1000/(WALK_PERIOD);
	turn leg3b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg3a to y-axis <45> speed <25> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg3b to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	sleep (WALK_PERIOD);
	turn leg3a to z-axis <0> speed <20> *1000/(WALK_PERIOD);
	
}

ready()
{
	sleep 15;
	turn neck to x-axis <110> speed <110>;
	turn head to x-axis <-110> speed <110>;
	turn rarm to x-axis <-90> speed <145>;
	turn larm to x-axis <-45> speed <45>;
	turn larm to y-axis <-30> speed <30>;
	turn shield to x-axis <45> speed <45>;
	turn shield to y-axis <-30> speed <30>;
	turn shield to z-axis <-45> speed <45>;
	turn shldin to x-axis <50> speed <50>;
	turn shldin to y-axis <120> speed <120>;
	turn shldin to z-axis <110> speed <110>;
	turn shldout to x-axis <-20> speed <20>;
	turn shldout to y-axis <160> speed <160>;
	turn shldout to z-axis <-80> speed <80>;
	move shield to x-axis [-1.76] speed [1.76];
	move shldbot to x-axis [3.3] speed [3.3];
	move shldbot to y-axis [-4.4] speed [4.4];
	move shldbot to z-axis [-1.1] speed [1.1];
	move shldtop to x-axis [-3.3] speed [3.3];
	move shldtop to y-axis [4.4] speed [4.4];
	move shldtop to z-axis [1.1] speed [1.1];
	sleep 100;
}

holster()
{
	sleep 15;
	turn neck to x-axis <0> speed <90>;
	turn head to x-axis <0> speed <90>;
	turn rarm to x-axis <0> speed <90>;
	turn larm to x-axis <0> speed <45>;
	turn larm to y-axis <0> speed <30>;
	turn shield to x-axis <0> speed <45>;
	turn shield to y-axis <0> speed <30>;
	turn shield to z-axis <0> speed <45>;
	turn shldin to x-axis <0> speed <50>;
	turn shldin to y-axis <0> speed <120>;
	turn shldin to z-axis <0> speed <110>;
	turn shldout to x-axis <0> speed <20>;
	turn shldout to y-axis <0> speed <160>;
	turn shldout to z-axis <0> speed <80>;
	move shield to x-axis [0] speed [2.2];
	move shldbot to x-axis [0] speed [3.3];
	move shldbot to y-axis [0] speed [4.4];
	move shldbot to z-axis [0] speed [1.1];
	move shldtop to x-axis [0] speed [3.3];
	move shldtop to y-axis [0] speed [4.4];
	move shldtop to z-axis [0] speed [1.1];
	show Shield;
	show Shldbot;
	show Shldout;
	show Shldin;
	show Shldtop;
	tdamage = 0;
	set ARMORED to 1;
	shieldup = 1;
	sleep 100;
	return (0);
}

Go()
{
	call-script ready();
	ReadyToAim = 1;
}

Stop()
{
	ReadyToAim = 0;
	call-script holster();
	bAiming = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script UnitSpeed();
	start-script DoTheWalking();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide rflare;
	hide lflare;
	hide aimx1;
	hide aimy1;
	hide rflare;
	hide lflare;
//	turn leg6a to y-axis <30> now;
	turn leg4a to y-axis <-30> now;
//	turn leg1a to y-axis <-30> now;//2
	turn leg3a to y-axis <30> now;//5
	moveSpeed = (get MAX_SPEED);
	WALK_PERIOD=800;
	bMoving = FALSE;
	bAiming = FALSE;
	ReadyToAim = 0;
	restore_delay = 10000;
	gun_1 = rflare;
	tdamage = 0;
	shieldup = 1;
	set ARMORED to 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = 10000;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	start-script RequestState(1);
	turn aimy1 to y-axis <0.000000> speed <90.000000>;
	turn aimx1 to x-axis <0.000000> speed <45.000000>;
	wait-for-turn aimy1 around y-axis;
	wait-for-turn aimx1 around x-axis;
	wpn1_lasthead = 1000000;
	bAiming = FALSE;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimFromPrimary(piecenum)
{
	piecenum = rflare;
}

AimFromSecondary(piecenum)
{
	piecenum = lflare;
}

QueryPrimary(piecenum)
{
	piecenum = rflare;
}

QuerySecondary(piecenum)
{
	piecenum = lflare;
}

FirePrimary()
{
	show rflare;
	sleep 100;
	hide rflare;
}
FireSecondary()
{
	show lflare;
	emit-sfx 1024 + 0 from lflare;
	move shield to z-axis [-0.5500000] speed [1375.000000];
	move shield to x-axis [-1.210000] speed [1375.000000];
	move shield to y-axis [0.55000] speed [1375.000000];
	turn torso to y-axis <30> speed <200>;
	wait-for-move shield along z-axis;
	move shield to z-axis [0.000000] speed [1.375000];
	move shield to x-axis [-1.7600000] speed [1.375000];
	move shield to y-axis [0.000000] speed [1.375000];
	turn torso to y-axis <0> speed <10>;
	hide lflare;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	start-script RequestState(0);
	bAiming = TRUE;
	while( !ReadyToAim )
	{
		return(0);
	}
	turn aimy1 to y-axis heading speed <200.000000>;
	turn aimx1 to x-axis <0.000000> - pitch speed <200.000000>;
	if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > 1300) AND ((get ABS(wpn1_lasthead - heading)) < 64236)))
	{
		wpn1_lasthead = 1000000;
		wait-for-turn aimy1 around y-axis;
		wait-for-turn aimx1 around x-axis;
}
	start-script RestoreAfterDelay();
	wpn1_lasthead = heading;
	return (1);
}
AimSecondary(heading, pitch)
{
	signal SIG_AIM;
	bAiming = TRUE;
	while( !ReadyToAim )
	{
		return(0);
	}
	return (1);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		//explode rthigh type BITMAPONLY | NOHEATCLOUD;
		//explode rleg type BITMAPONLY | NOHEATCLOUD;
		//explode lthigh type BITMAPONLY | NOHEATCLOUD;
		//explode lleg type BITMAPONLY | NOHEATCLOUD;
		explode torso type BITMAPONLY | NOHEATCLOUD;
		//explode larm type BITMAPONLY | NOHEATCLOUD;
		//explode lflare type BITMAPONLY | NOHEATCLOUD;
		//explode rarm type BITMAPONLY | NOHEATCLOUD;
		//explode rflare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		//explode rthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rleg type FALL | NOHEATCLOUD;
		//explode lthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type FALL | NOHEATCLOUD;
		//explode larm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lflare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rarm type FALL | NOHEATCLOUD;
		//explode rflare type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode pelvis type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode lleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode larm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lflare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rarm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rflare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode pelvis type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lleg type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode torso type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode larm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lflare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode rarm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rflare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
