
#include "../recoil_common_includes.h"

piece  ground, base, door1, door2, NanoTurret, Nanoemit;

static-var  buildHeading, readyToBuild, oldHead;

// Signal definitions
#define SIGNAL_MOVE 1

#define SIGNAL_BUILD 2

#define RB_MASS 20
#define RB_LENGTH 5
#define RB_WIDTH 2
#define RB_PITCH_SPEED 200
#define RB_PITCH_ACCELERATION 10
#define RB_ROLL_ACCELERATION 6
#define RB_WAKE_PIECE ground
#define RB_WAKE_PERIOD 6 
#define RB_WAKE_CEG 1024 + 0
#include "../bar_ships_common.h"

Create()
{
	hide nanoemit;
	hide ground;
	buildHeading = 0;
	readyToBuild = FALSE;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}

StartBuilding(heading)
{
	signal SIGNAL_BUILD;
	set-signal-mask SIGNAL_BUILD;

	show nanoemit;
	buildHeading = heading;

	if (!readyToBuild){
		move door1 to y-axis [1] speed [3];
		move door2 to y-axis [1] speed [3];
		wait-for-move door1 along y-axis;
		
		move door1 to x-axis [3.4] speed [9];
		move door2 to x-axis [-3.4] speed [9];
		wait-for-move door1 along x-axis;
		
		move nanoturret to y-axis [8] speed [24];
		wait-for-move nanoturret along y-axis;
		readyToBuild = TRUE;
	}	

	turn NanoTurret to y-axis <180>+buildHeading speed <160.0>;
	wait-for-turn NanoTurret around y-axis;
	set INBUILDSTANCE to 1;
	show nanoemit;
}

StopBuilding()
{
	signal SIGNAL_BUILD;
	set-signal-mask SIGNAL_BUILD;

	hide nanoemit;

	sleep 6000;

	set INBUILDSTANCE to 0;
	readyToBuild = FALSE;

	turn NanoTurret to y-axis <0.0> speed <180.0>;
	wait-for-turn NanoTurret around y-axis;

	move nanoturret to y-axis [0] speed [24];
	wait-for-move nanoturret along y-axis;
	
	
	move door1 to x-axis [0] speed [9];
	move door2 to x-axis [0] speed [9];
	wait-for-move door1 along x-axis;
	
	move door1 to y-axis [0] speed [3];
	move door2 to y-axis [0] speed [3];
	wait-for-move door1 along y-axis;
}


StartMoving(reversing)
{
}

StopMoving()
{
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = nanoemit;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanoturret type SMOKE | FALL | NOHEATCLOUD;
		explode door2 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanoturret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
