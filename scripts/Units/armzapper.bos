
#include "../recoil_common_includes.h"

piece  base, lfwheel, rfwheel, lbwheel, rbwheel, gun, flare;

static-var  restore_delay, moveSpeed, wheelSpeed, gun_2, oldHeading, wpn1_lasthead;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256

Steering(heading, steer, currentSpeed)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	while(1)
	{
		heading = get HEADING;
		steer = (heading - oldheading)*2;
		turn rfwheel to y-axis steer speed <180>;	
		turn lfwheel to y-axis steer speed <180>;	
		currentSpeed = <8> *((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if (currentSpeed < <100>) currentSpeed = <100>;
		spin rfwheel around x-axis speed currentSpeed;
		spin lfwheel around x-axis speed currentSpeed;
		spin lbwheel around x-axis speed currentSpeed;
		spin rbwheel around x-axis speed currentSpeed;
		sleep 66;
		oldheading = heading;
	}
}

//WheelControl()
//{
//	while(TRUE)
//	{
//		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
//		wheelSpeed = currentSpeed * 40; //original speed 7
//		if (currentSpeed<1) currentSpeed=1;	// prevent infinite timing
//		spin lfwheel around x-axis speed  (<1> * wheelSpeed);         //(<1.0> * wheelSpeed ) * 2 accelerate <5.0> * currentSpeed;
//		spin rfwheel around x-axis speed  (<1> * wheelSpeed);				//(<0.5.0> * wheelSpeed ) * 2 accelerate <5.0> * currentSpeed;
//		spin bwheels around x-axis speed  (<0.7> * wheelSpeed);		 //(<0.5.0> * wheelSpeed ) * 2 accelerate <5.0> * currentSpeed;
//		sleep 50; //200
//	}
// }



#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "../unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide flare;
	oldheading = get HEADING;
}


StartMoving(reversing)
{
	start-script Steering();
}

StopMoving()
{
	signal SIGNAL_MOVE;
	stop-spin rfwheel around x-axis;
	stop-spin lfwheel around x-axis;
	stop-spin lbwheel around x-axis;
	stop-spin rbwheel around x-axis;
}



//following block returns weapon in straight position after firing

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
   if (Stunned) {
       return (1);
    }
	turn gun to y-axis <0.0> speed <90.0>;
	turn gun to x-axis <0.0> speed <50.0>;
	wait-for-turn gun around y-axis;
	wpn1_lasthead = 0xbadface;
 }
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}





AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn gun to y-axis heading speed <300.0>;
	turn gun to x-axis <0.0> - pitch speed <300.0>;
	if ((wpn1_lasthead == 0xbadface) OR ABSOLUTE_GREATER_THAN(WRAPDELTA(heading - wpn1_lasthead), <7>))
	{
		wpn1_lasthead = 0xbadface;
		wait-for-turn gun around y-axis;
	}
	wpn1_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	return (0);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = gun;
	return (0);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
	return (0);
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gun type BITMAPONLY | NOHEATCLOUD;
		explode rfwheel type BITMAPONLY | NOHEATCLOUD;
		explode lfwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lbwheel type BITMAPONLY | NOHEATCLOUD;
		explode rbwheel type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gun type FALL | NOHEATCLOUD;
		explode lfwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lfwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lbwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rbwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun type SMOKE | FALL | NOHEATCLOUD;
		explode lfwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rfwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lfwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rfwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lbwheel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rbwheel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
