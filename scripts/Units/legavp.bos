
#include "../recoil_common_includes.h"
#include "../factories_common.h"

piece  base, 
		doorA, subdoorA, subdoorAA,
		doorB, subdoorB, subdoorBB,
		doorC,
		gatebackR, nanoarmbackR, nanobackR,
		gatebackL, nanoarmbackL, nanobackL,
		gatefrontR, nanoarmfrontR, nanofrontR,
		gatefrontL, nanoarmfrontL, nanofrontL, 
		pad;

static-var  spray;

// Signal definitions
#define SIGNAL_BUILD 2
#define SIGNAL_TURNON 4


Create()
{
	spray = 0;
}


#define BASEPIECE base
#define MAXTILT 0
#include "../unit_hitbyweaponid_and_smoke.h"

QueryNanoPiece(pieceIndex)
{
	//spray = (spray + 1) % 8;
	//pieceIndex = nano1 + spray;
}

Activate()
{
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
	
	// move doorl to x-axis [-27.0] speed [27];
	// move doorr to x-axis [27.0] speed [27];
	// wait-for-move doorl along x-axis;

	move gatebackR to y-axis [10] speed [35];
	move gatebackL to y-axis [10] speed [35];
	move gatefrontR to y-axis [10] speed [35];
	move gatefrontL to y-axis [10] speed [35];

	move doorA to y-axis [-31] speed [93];
	sleep 100;
	move doorB to y-axis [-31] speed [93];
	sleep 100;
	move doorC to y-axis [-31] speed [93];

	wait-for-move gatebackR along y-axis;

	turn gatefrontR to z-axis <-70> speed <180>;
	turn gatefrontL to z-axis <70> speed <180>;
	sleep 100;
	turn gatebackR to z-axis <-70> speed <180>;
	turn gatebackL to z-axis <70> speed <180>;
	
	wait-for-move doorC along y-axis;
	move subdoorA to z-axis [-11] speed [55];
	move subdoorAA to z-axis [-9] speed [45];
	wait-for-move subdoorAA along z-axis;
	//sleep 50;
	move subdoorB to z-axis [-11] speed [55];
	move subdoorBB to z-axis [-9] speed [45];

	wait-for-turn gatebackL around z-axis;
	
	turn nanoarmfrontR to z-axis <120> speed <90>;
	turn nanoarmbackR to z-axis <120> speed <90>;
	turn nanoarmfrontL to z-axis <-120> speed <90>;
	turn nanoarmbackL to z-axis <-120> speed <90>;
	sleep 100;
	FACTORY_OPEN_BUILD;

	
}

Deactivate()
{
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
	sleep 5000;
	
	// move doorl to x-axis [0.0] speed [24];
	// move doorr to x-axis [0.0] speed [24];
	// wait-for-move doorl along x-axis;
	
	FACTORY_CLOSE_BUILD;
}

MoveCranes()
{
	while(TRUE)
	{
		// turn nanoarmfrontR to z-axis rand(<45>, <120>) speed <30>;
		// turn nanoarmbackR to z-axis rand(<45>, <120>) speed <30>;
		// turn nanoarmfrontL to z-axis rand(<-45>, <-120>) speed <30>;
		// turn nanoarmbackL to z-axis rand(<-45>, <-120>) speed <30>;
		turn nanoarmfrontR to z-axis <45> speed <30>;
		sleep 100;
		turn nanoarmfrontL to z-axis <-45> speed <30>;
		sleep 100;
		turn nanoarmbackR to z-axis <45> speed <30>;
		sleep 100;
		turn nanoarmbackL to z-axis <-45> speed <30>;
		wait-for-turn nanoarmfrontR around z-axis;
		turn nanoarmfrontR to z-axis <120> speed <30>;
		sleep 100;
		turn nanoarmfrontL to z-axis <-120> speed <30>;
		sleep 100;
		turn nanoarmbackR to z-axis <120> speed <30>;
		sleep 100;
		turn nanoarmbackL to z-axis <-120> speed <30>;
		wait-for-turn nanoarmfrontR around z-axis;
	}
}


StartBuilding()
{
	signal SIGNAL_BUILD;
	set-signal-mask SIGNAL_BUILD;
	wait-for-turn nanoarmfrontR around z-axis;
	sleep 500;
	start-script MoveCranes();
}

StopBuilding()
{

	signal SIGNAL_BUILD;
	
	/*
	set BUGGER_OFF to 1; // tell units to get out of here
	set INBUILDSTANCE to 0; // we turn it off, to wait for the unit to clear the build pad (large aircraft)
	sleep 500;   // then we wait for 0.5 sec
	set INBUILDSTANCE to 1; // we turn it on again, as the next startbuilding and construction will begin when this is 1 again.
	set BUGGER_OFF to 0; // ok now we dont mind if they are here
	*/
}

QueryBuildInfo(pieceIndex)
{
	pieceIndex = pad;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		// explode base type BITMAPONLY | NOHEATCLOUD;
		// explode doorl type FIRE | SMOKE | FALL | BITMAPONLY | NOHEATCLOUD;
		// explode nano1 type BITMAPONLY | NOHEATCLOUD;
		// explode nano2 type BITMAPONLY | NOHEATCLOUD;
		// explode nano3 type BITMAPONLY | NOHEATCLOUD;
		// explode nano4 type BITMAPONLY | NOHEATCLOUD;
		// explode doorr type BITMAPONLY | NOHEATCLOUD;
		// explode nano5 type BITMAPONLY | NOHEATCLOUD;
		// explode nano6 type BITMAPONLY | NOHEATCLOUD;
		// explode nano7 type BITMAPONLY | NOHEATCLOUD;
		// explode nano8 type BITMAPONLY | NOHEATCLOUD;
		// explode pad type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		// explode base type BITMAPONLY | NOHEATCLOUD;
		// explode nano1 type FALL | NOHEATCLOUD;
		// explode nano2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano5 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano6 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano7 type FALL | NOHEATCLOUD;
		// explode nano8 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode pad type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		// explode base type BITMAPONLY | NOHEATCLOUD;
		// explode doorl type BITMAPONLY | NOHEATCLOUD;
		// explode nano1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode doorr type BITMAPONLY | NOHEATCLOUD;
		// explode nano5 type SMOKE | FALL | NOHEATCLOUD;
		// explode nano6 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano7 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano8 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode pad type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		// explode base type BITMAPONLY | NOHEATCLOUD;
		// explode doorl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		// explode nano3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		// explode nano4 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		// explode doorr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano5 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano6 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano7 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode nano8 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode pad type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
