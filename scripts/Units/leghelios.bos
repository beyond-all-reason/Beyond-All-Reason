#include "../recoil_common_includes.h"


piece 		base, tracks, turret, barrel, flare;

static-var  restore_delay, shotcount, lastpitch;

// Signal definitions
#define SIGNAL_AIM		1
#define SIGNAL_MOVE		2


#define BASEPIECE base
#define HITSPEED <65.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100

#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <0.1>
#define TB_BANK_Z <0.1> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"

Create()
{
	shotcount = 0;
	lastpitch = 0;
	hide flare;
	restore_delay = 3000;
	
	call-script TB_Init();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	
	STOP_TILTBANK;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn barrel to x-axis <0> speed <60>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIGNAL_AIM;
	set-signal-mask SIGNAL_AIM;
	
	lastpitch = pitch;

	turn turret to y-axis heading speed <180.0>;
	turn barrel to x-axis <0.0> - pitch speed <30.0>;
	
	wait-for-turn turret around y-axis;

	start-script RestoreAfterDelay();
	return (1);
}

lua_UnitScriptLight(lightIndex, count)
{
	return 0;
}

FirePrimary()
{
	++shotcount;
	emit-sfx 1024 + 0 from flare;
	call-script lua_UnitScriptLight(1, shotcount);
	
	move barrel to z-axis [-1.5] now;
	turn barrel to x-axis <-5> - lastpitch now;
	
	move barrel to z-axis [0.0] speed [6];
	sleep 33;
}

AimFromPrimary(piecenum)
{
	piecenum = barrel;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode barrel type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode turret type FIRE | SMOKE | FALL;
		explode barrel type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL;
		explode turret type SMOKE | FALL;
		explode barrel type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL;
		return(corpsetype);
}
