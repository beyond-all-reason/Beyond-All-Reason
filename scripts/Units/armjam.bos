
#include "../recoil_common_includes.h"

piece  base, eye, blwheel, blthigh, blleg, flwheel, flthigh, flleg, brwheel, brthigh, brleg, frwheel, frthigh, frleg, jam;

static-var  turnClock, turnCounter, wheelSpeed, currentSpeed, moveSpeed;

static-var recently_damaged, desired_activation;

#define SIGNAL_MOVE 1
#define SIGNAL_TURNON 4
#define SIGNAL_OFF 	8


#define TB_BASE base 
#define TB_TURNRATE <20.0> 
#define TB_TILT_X <0.15>
#define TB_BANK_Z <0.15> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"


TurnControl()
{
	var lastHeading, currHeading, diffHeading;
	lastHeading = GET HEADING;
	while (TRUE)
	{
		currHeading = GET HEADING;
		diffHeading = currHeading - lastHeading;
		// Set values for tilt
		
		if ( !get ACTIVATION )
		{
	
		//Remove Extreme values
		if ( diffHeading > 1500 ) diffHeading = 1500;
		if ( diffHeading < -1500 ) diffHeading = -1500;
			turn base to z-axis 2 * diffHeading speed <13>;
		}
		// Set Values for differential system
		if ( get ACTIVATION )
		{
		turnClock = 2;
		turnCounter = 2;	
		if (diffHeading >= 500)
			{
			turnClock = <0.01>;
			}
		if (diffHeading <= -500)
			{
			turnCounter = <0.01>;
			}
		}
		lastHeading = currHeading;
		sleep 67;
	}
}

WheelControl()
{
	sleep 33;
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		wheelSpeed = currentSpeed * 7;
		if (currentSpeed<4) currentSpeed=4;	// prevent infinite timing
		//get PRINT(currentSpeed,turnCounter,turnClock);	
		if ( get ACTIVATION )
		{
		//	get PRINT((<6.8> * wheelSpeed ) * turnClock)
			//left wheels
			spin flwheel around x-axis speed (<1.0> * wheelSpeed ) * turnClock accelerate <5.0> * currentSpeed;
			spin blwheel around x-axis speed (<1.0> * wheelSpeed ) * turnClock accelerate <5.0> * currentSpeed;
		
			//right wheels
			spin frwheel around x-axis speed (<1.0> * wheelSpeed ) * turnCounter accelerate <5.0> * currentSpeed;
			spin brwheel around x-axis speed (<1.0> * wheelSpeed ) * turnCounter accelerate <5.0> * currentSpeed;
		}
		if ( !get ACTIVATION )
		{
			spin flwheel around x-axis speed (<1.0> * wheelSpeed ) * 2 accelerate <5.0> * currentSpeed;
			spin blwheel around x-axis speed (<1.0> * wheelSpeed ) * 2 accelerate <5.0> * currentSpeed;
			spin frwheel around x-axis speed (<1.0> * wheelSpeed ) * 2 accelerate <5.0> * currentSpeed;
			spin brwheel around x-axis speed (<1.0> * wheelSpeed ) * 2 accelerate <5.0> * currentSpeed;
		}
		sleep 67;
	}
}



#include "../damagedsmoke.h"
Create()
{
	hide jam;
	recently_damaged = 0;
	desired_activation = 1;
	moveSpeed = get MAX_SPEED;
	call-script TB_Init();	
	SLEEP_UNTIL_UNITFINISHED;
	start-script WheelControl();
	start-script TurnControl();
	start-script DamagedSmoke();
}

Activate()
{
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
	desired_activation = 1;
	show jam;
	// if we are in this function, the unit is already on
	// implied set ACTIVATION to 1;
	// turn off if unit is in the recently_damaged state
	// this turn off action calls the Deactivate function
	if( recently_damaged == 1)
	{
		set ACTIVATION to 0;
		return(0);
	}

	turn blleg to y-axis <0> speed <90>;
	turn blthigh to y-axis <0> speed <90>;
	turn flleg to y-axis <0> speed <90>;
	turn flthigh to y-axis <0> speed <90>;
	turn brleg to y-axis <0> speed <90>;
	turn brthigh to y-axis <0> speed <90>;
	turn frleg to y-axis <0> speed <90>;
	turn frthigh to y-axis <0> speed <90>;
	return (0);
}

Deactivate()
{
	// get PRINT(0, desired_activation,desired_activation,get GAME_FRAME);
	// no easy way to tell if an on-off action is 
	// script/gadget controlled or user controlled
	// assume a deactivate command is a user command 
	// if the unit has not been recently damaged
	// However, we need to wait a few frames, 
	// unit_paralyze_on_off deactivates this unit before it is 
	// stunned, so it is actually turned off, but we need to wait to see if the
	// unit is "damaged" by stun.
	hide jam;
	sleep 100;
	if (recently_damaged == 0)
	{
		//set desired state if deactivated and not recently damaged
		desired_activation = 0;
	}
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;

	turn base to z-axis <0> speed 400;
	wait-for-turn base around z-axis;
	turn blleg to y-axis <-55> speed <90>;
	turn blthigh to y-axis <55> speed <90>;
	turn flleg to y-axis <55> speed <90>;
	turn flthigh to y-axis <-55> speed <90>;
	turn brleg to y-axis <55> speed <90>;
	turn brthigh to y-axis <-55> speed <90>;
	turn frleg to y-axis <-55> speed <90>;
	turn frthigh to y-axis <55> speed <90>;
	return (0);
}


StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}

static-var  Stunned;
SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    start-script Deactivate();
	} else {
	    set ACTIVATION to desired_activation;
	}
}

OffOnHit()
{
signal SIGNAL_OFF;
set-signal-mask SIGNAL_OFF;
recently_damaged = 1;
set ACTIVATION to 0; // turn off unit
sleep 8000; //hardcoded time to stay off after being hit
recently_damaged = 0;
set ACTIVATION to desired_activation;
}

HitByWeapon(anglex, anglez)
{

	start-script OffOnHit();
	turn base to z-axis anglez speed <105.0>;
	turn base to x-axis <0> - anglex speed <105.0>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.0> speed <30.0>;
	turn base to x-axis <0.0> speed <30.0>;
	return (0);
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode eye type BITMAPONLY | NOHEATCLOUD;
		explode blthigh type BITMAPONLY | NOHEATCLOUD;
		explode blleg type BITMAPONLY | NOHEATCLOUD;
		explode blwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flthigh type BITMAPONLY | NOHEATCLOUD;
		explode flleg type BITMAPONLY | NOHEATCLOUD;
		explode flwheel type BITMAPONLY | NOHEATCLOUD;
		explode brthigh type BITMAPONLY | NOHEATCLOUD;
		explode brleg type BITMAPONLY | NOHEATCLOUD;
		explode brwheel type BITMAPONLY | NOHEATCLOUD;
		explode frthigh type BITMAPONLY | NOHEATCLOUD;
		explode frleg type BITMAPONLY | NOHEATCLOUD;
		explode frwheel type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode eye type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode blthigh type FALL | NOHEATCLOUD;
		explode blleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode blwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flthigh type FALL | NOHEATCLOUD;
		explode flleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode brthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode brleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode brwheel type FALL | NOHEATCLOUD;
		explode frthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode frleg type FALL | NOHEATCLOUD;
		explode frwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode eye type SMOKE | FALL | NOHEATCLOUD;
		explode blthigh type SMOKE | FALL | NOHEATCLOUD;
		explode blleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode blwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flleg type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flwheel type SMOKE | FALL | NOHEATCLOUD;
		explode brthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode brleg type SMOKE | FALL | NOHEATCLOUD;
		explode brwheel type SMOKE | FALL | NOHEATCLOUD;
		explode frthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode frleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode frwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode eye type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode blthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode blleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode blwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode brthigh type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode brleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode brwheel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode frthigh type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode frleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode frwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
