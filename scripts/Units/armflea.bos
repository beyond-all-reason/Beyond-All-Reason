
#include "../recoil_common_includes.h"

piece  base, turret, flare, rrleg, rfleg, lrleg, lfleg, aimy1;

static-var  isMoving, isAiming, restore_delay, wpn1_lasthead;
#define SIGNAL_AIM1 256

// Signal definitions
// Generated for N:\animations\armflea_anim_walk.blend
// Using https://github.com/Beherith/Skeletor_S3O 
// this animation uses the static-var animFramesPerKeyframe which contains how many frames each keyframe takes
static-var animSpeed, maxSpeed, animFramesPerKeyframe;
#define SIGNAL_MOVE 1


Walk() {//Created by https://github.com/Beherith/Skeletor_S3O from N:\animations\armflea_anim_walk.blend 
	// Author Beherith mysterme@gmail.com. License: GNU GPL v2.
	set-signal-mask SIGNAL_MOVE;
	if (isMoving) { //Frame:4
			turn lfleg to y-axis <66.599993> speed <1997.999789> / animSpeed; //delta=66.60 
			turn lrleg to x-axis <1.400000> speed <41.999996> / animSpeed; //delta=-1.40 
			turn lrleg to z-axis <0.400000> speed <11.999999> / animSpeed; //delta=-0.40 
			turn lrleg to y-axis <-42.599996> speed <1277.999872> / animSpeed; //delta=-42.60 
			turn rfleg to y-axis <-66.599993> speed <1997.999789> / animSpeed; //delta=-66.60 
			turn rrleg to x-axis <1.400000> speed <41.999996> / animSpeed; //delta=-1.40 
			turn rrleg to z-axis <-0.400000> speed <11.999999> / animSpeed; //delta=0.40 
			turn rrleg to y-axis <42.599996> speed <1277.999872> / animSpeed; //delta=42.60 
		sleep ((33*animSpeed) -1);
	}
	while(isMoving) {
		if (isMoving) { //Frame:8
			move base to y-axis [1.465000] speed [43.949997] / animSpeed; //delta=1.46 
			turn base to x-axis <-14.099999> speed <422.999976> / animSpeed; //delta=14.10 
			turn lfleg to y-axis <35.933328> speed <919.999946> / animSpeed; //delta=-30.67 
			turn lrleg to x-axis <8.300000> speed <206.999997> / animSpeed; //delta=-6.90 
			turn lrleg to z-axis <9.899996> speed <284.999891> / animSpeed; //delta=-9.50 
			turn lrleg to y-axis <63.099992> speed <3170.999641> / animSpeed; //delta=105.70 
			turn rfleg to y-axis <-35.933328> speed <919.999946> / animSpeed; //delta=30.67 
			turn rrleg to x-axis <8.300000> speed <206.999997> / animSpeed; //delta=-6.90 
			turn rrleg to z-axis <-9.899996> speed <284.999891> / animSpeed; //delta=9.50 
			turn rrleg to y-axis <-63.099992> speed <3170.999641> / animSpeed; //delta=-105.70 
			turn turret to x-axis <22.299997> speed <668.999920> / animSpeed; //delta=-22.30 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:12
			move base to y-axis [2.930000] speed [43.949997] / animSpeed; //delta=1.46 
			turn base to x-axis <-0.200000> speed <416.999979> / animSpeed; //delta=-13.90 
			turn lfleg to y-axis <5.266663> speed <919.999946> / animSpeed; //delta=-30.67 
			turn lrleg to x-axis <6.0> speed <69.0> / animSpeed; //delta=2.30 
			turn lrleg to z-axis <6.733333> speed <94.999906> / animSpeed; //delta=3.17 
			turn lrleg to y-axis <27.866663> speed <1056.999880> / animSpeed; //delta=-35.23 
			turn rfleg to y-axis <-5.266663> speed <919.999946> / animSpeed; //delta=30.67 
			turn rrleg to x-axis <6.0> speed <69.0> / animSpeed; //delta=2.30 
			turn rrleg to z-axis <-6.733333> speed <94.999906> / animSpeed; //delta=-3.17 
			turn rrleg to y-axis <-27.866663> speed <1056.999880> / animSpeed; //delta=35.23 
			turn turret to x-axis <12.900000> speed <281.999924> / animSpeed; //delta=9.40 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:16
			move base to y-axis [1.350000] speed [47.399994] / animSpeed; //delta=-1.58 
			turn base to x-axis <13.299999> speed <404.999960> / animSpeed; //delta=-13.50 
			turn lfleg to y-axis <-25.399996> speed <919.999792> / animSpeed; //delta=-30.67 
			turn lrleg to x-axis <3.700001> speed <68.999963> / animSpeed; //delta=2.30 
			turn lrleg to z-axis <3.566667> speed <94.999989> / animSpeed; //delta=3.17 
			turn lrleg to y-axis <-7.366666> speed <1056.999880> / animSpeed; //delta=-35.23 
			turn rfleg to y-axis <25.399996> speed <919.999792> / animSpeed; //delta=30.67 
			turn rrleg to x-axis <3.700001> speed <68.999963> / animSpeed; //delta=2.30 
			turn rrleg to z-axis <-3.566667> speed <94.999989> / animSpeed; //delta=-3.17 
			turn rrleg to y-axis <7.366666> speed <1056.999880> / animSpeed; //delta=35.23 
			turn turret to x-axis <5.599998> speed <219.0> / animSpeed; //delta=7.30 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:20
			move base to y-axis [0.0] speed [40.500001] / animSpeed; //delta=-1.35 
			turn base to x-axis <-0.0> speed <398.999963> / animSpeed; //delta=13.30 
			turn lfleg to y-axis <66.599993> speed <2759.999684> / animSpeed; //delta=92.00 
			turn lrleg to x-axis <1.400000> speed <69.0> / animSpeed; //delta=2.30 
			turn lrleg to z-axis <0.400000> speed <94.999996> / animSpeed; //delta=3.17 
			turn lrleg to y-axis <-42.599996> speed <1056.999880> / animSpeed; //delta=-35.23 
			turn rfleg to y-axis <-66.599993> speed <2759.999684> / animSpeed; //delta=-92.00 
			turn rrleg to x-axis <1.400000> speed <69.0> / animSpeed; //delta=2.30 
			turn rrleg to z-axis <-0.400000> speed <94.999996> / animSpeed; //delta=-3.17 
			turn rrleg to y-axis <42.599996> speed <1056.999880> / animSpeed; //delta=35.23 
			turn turret to x-axis <-0.0> speed <167.999935> / animSpeed; //delta=5.60 
		sleep ((33*animSpeed) -1);
		}
	}
}
// Call this from StopMoving()!
StopWalking() {
	move base to y-axis [0.0] speed [11.849999];
	turn base to x-axis <0.0> speed <105.749994>;
	turn lfleg to y-axis <0.0> speed <689.999921>;
	turn lrleg to x-axis <0.0> speed <51.749999>;
	turn lrleg to y-axis <0.0> speed <792.749910>;
	turn lrleg to z-axis <0.0> speed <71.249973>;
	turn rfleg to y-axis <0.0> speed <689.999921>;
	turn rrleg to x-axis <0.0> speed <51.749999>;
	turn rrleg to y-axis <0.0> speed <792.749910>;
	turn rrleg to z-axis <0.0> speed <71.249973>;
	turn turret to x-axis <0.0> speed <167.249980>;
}
// REMEMBER TO animspeed = 4 in Create() !!
UnitSpeed(){
	maxSpeed = get MAX_SPEED; // this returns cob units per frame i think
	animFramesPerKeyframe = 4; //we need to calc the frames per keyframe value, from the known animtime
	maxSpeed = maxSpeed + (maxSpeed /(2*animFramesPerKeyframe)); // add fudge
	while(TRUE){
		animSpeed = (get CURRENT_SPEED);
		if (animSpeed<1) animSpeed=1;
		animSpeed = (maxSpeed * 4) / animSpeed; 
		//get PRINT(maxSpeed, animFramesPerKeyframe, animSpeed); //how to print debug info from bos
		if (animSpeed<2) animSpeed=2;
		if (animspeed>8) animSpeed = 8;
		sleep 131;
	}
}


StartMoving(reversing){
	signal SIGNAL_MOVE;
	isMoving=TRUE;
  set-signal-mask SIGNAL_MOVE;
	start-script UnitSpeed();
  start-script Walk();
}
StopMoving(){
	signal SIGNAL_MOVE;
	isMoving=FALSE;
	call-script StopWalking();
}

#define BASEPIECE base
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "../unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide flare;
	hide aimy1;
	hide flare;
	isMoving = FALSE;
	isAiming = FALSE;
	restore_delay = 3000;
	animSpeed = 4;
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}



static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn aimy1 to y-axis <0.0> speed <300.0>;
	wait-for-turn aimy1 around y-axis;
	wpn1_lasthead = 0xbadface;
	isAiming = FALSE;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	set-signal-mask SIGNAL_AIM1;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	isAiming = TRUE;
	turn aimy1 to y-axis heading speed <450.0>;

	if ((wpn1_lasthead == 0xbadface) OR ABSOLUTE_GREATER_THAN(WRAPDELTA(heading - wpn1_lasthead), <7>))
	{
		wpn1_lasthead = 0xbadface;
		wait-for-turn aimy1 around y-axis;
	}
	wpn1_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 + 0 from flare;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode turret type FALL | NOHEATCLOUD;
		explode flare type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode turret type SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
