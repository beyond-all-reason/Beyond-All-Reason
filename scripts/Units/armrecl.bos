
#include "../recoil_common_includes.h"

piece  base, flare, barrel, ldoor, rdoor, lfin, rfin, screw;

static-var  readyToBuild;

#define SIGNAL_MOVE 1
#define SIGNAL_BUILD 2

#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 200

#include "../unit_hitbyweaponid_and_smoke.h"


#define TB_BASE base 
#define TB_TURNRATE <30.0> 
#define TB_TILT_X <-0.32>
#define TB_BANK_Z <0.5> // Do not define this if you dont want banking
#define TB_WAKE_PIECE base
//#define TB_WAKE_FOAM 1024 + 0
#include "../tilt_bank_submarine.h"

Propcontrol()
{
	var currentSpeed;
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*1000/TB_maxSpeed;
		spin screw around z-axis speed <1.0>*currentSpeed accelerate <10.0>;
		sleep 100;
	}
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	move lfin to x-axis [-5.0] speed [4.0];
	move rfin to x-axis [5.0] speed [4.0];
	start-script Propcontrol();
	emit-sfx 1024 + 0 from base;
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	move lfin to x-axis [0.0] speed [4.0];
	move rfin to x-axis [0.0] speed [4.0];
	STOP_TILTBANK;
	stop-spin screw around z-axis decelerate <10.0>;
}


Create()
{
	hide flare;
	readyToBuild = FALSE;
	call-script TB_Init();
}

StartBuilding(heading)
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;

	if (!readyToBuild){
		move ldoor to x-axis [-1.200000] speed [2.0];
		move rdoor to x-axis [1.200000] speed [2.0];
		wait-for-move ldoor along x-axis;

		move barrel to z-axis [2.0] speed [2.0];
		wait-for-move barrel along z-axis;
		readyToBuild = TRUE;
	}

	set INBUILDSTANCE to 1;

	show flare;
}

StopBuilding()
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;
	hide flare;
	
	sleep 6000;

	set INBUILDSTANCE to 0;
	readyToBuild = FALSE;

	move ldoor to x-axis [0] speed [2.0];
	move rdoor to x-axis [0] speed [2.0];
	wait-for-move ldoor along x-axis;

	move barrel to z-axis [0] speed [2.0];
	wait-for-move barrel along z-axis;
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = flare;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rfin type FIRE | SMOKE | NOHEATCLOUD;
		explode barrel type BITMAPONLY | NOHEATCLOUD;
		explode screw type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rfin type FIRE | SMOKE | NOHEATCLOUD;
		explode rdoor type FIRE | SMOKE | NOHEATCLOUD;
		explode barrel type NOHEATCLOUD;
		explode screw type FIRE | SMOKE | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | NOHEATCLOUD;
		explode rfin type SMOKE | NOHEATCLOUD;
		explode rdoor type SMOKE | NOHEATCLOUD;
		explode lfin type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode screw type FIRE | SMOKE | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode rfin type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
		explode rdoor type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode lfin type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode screw type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
	return corpsetype;
}
