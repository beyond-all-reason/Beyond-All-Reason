
#include "../recoil_common_includes.h"

//piece  base, column, turret, barrel1, barrel2, flare1, flare2;
piece  base, pins, clock, shaft, emp, flare, aimy;

static-var  resourceRate, restore_delay, Stunned;

// Signal definitions
#define SIGNAL_AIM1 256

Create()
{
	hide flare;
	resourceRate = 500;
}


#define BASEPIECE base
#define MAXTILT 0
#include "../unit_hitbyweaponid_and_smoke.h"

Activate()
{
	spin clock around y-axis speed resourceRate accelerate <0.500000>;
}

Deactivate()
{
	stop-spin clock around y-axis decelerate <1.0>;
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 8;
}

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	spin clock around y-axis speed resourceRate accelerate <0.500000>;
	turn shaft to y-axis <0> speed <60>;
	turn emp to x-axis <0>  speed <70>;
}

SetStunned(State)
{
	Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
	if (Stunned) {
	    call-script Deactivate();
	}else{
	    call-script Activate();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

SetSpeed(windOrMetal)
{
	resourceRate = windOrMetal * 2;
	if (resourceRate > 0) call-script Activate(); // Because SetSpeed is called after Activate
}

AimWeapon1(heading, pitch)
{
	
	  if ( resourceRate == 0 ) // only allow attacking when extracting
		  {
		  return (0);
		  }
	
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn shaft to y-axis heading speed <60>;
	turn emp to x-axis <0.0> - pitch speed <70>;
	wait-for-turn shaft around y-axis;
	wait-for-turn emp around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 + 0 from flare;
}


QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimy;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pins type BITMAPONLY | NOHEATCLOUD;
		explode shaft type BITMAPONLY | NOHEATCLOUD;
		explode emp type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		explode clock type BITMAPONLY | NOHEATCLOUD;
		explode aimy type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode shaft type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emp type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FALL | NOHEATCLOUD;
		explode aimy type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pins type BITMAPONLY | NOHEATCLOUD;
		explode shaft type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emp type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flare type SMOKE | FALL | NOHEATCLOUD;
		explode clock type BITMAPONLY | NOHEATCLOUD;
		explode aimy type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pins type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode shaft type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emp type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode clock type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode aimy type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return(corpsetype);
}