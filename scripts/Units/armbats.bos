
#include "../recoil_common_includes.h"

piece  flare1a, flare1b, flare2a, flare2b,  base, turret1,
       turret2, sleeve1, sleeve2, barrel1a, barrel1b, barrel2a, barrel2b,
        ground, wake, bow, barrelblast;

static-var  weapon1barrel, weapon2barrel, restore_delay, gun_1, gun_2, oldHead, aimDir1, aimDir2;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512
#define SIGNAL_MOVE 1


MoveBarrelBlast(flarepiece) // Pass whichever piece you want to locate on XZ
{

	var flarepiece_xz;	
	
	flarepiece_xz = get PIECE_XZ(flarepiece); // returns packed xz worldpos of piece
	/*
	var flare_x;
	var flare_z;
	flare_z = (flarepiece_xz & 0x0000ffff); // silly unpack
	flare_x = (flarepiece_xz & 0xffff0000) / 0x00010000; // yes this works
	//get PRINT(get GAME_FRAME, flarepiece, flare_x, flare_z);
	
	var unit_xz;
	unit_xz = get UNIT_XZ(0); // returns packed xz worldpos of unit
	var unit_x;
	var unit_z;
	unit_z = (unit_xz & 0x0000ffff);
	unit_x = (unit_xz & 0xffff0000) / 0x00010000;
	
	//Transform from world space to unit space	
	flare_x = flare_x - unit_x;
	flare_z = flare_z - unit_z;
	
	var unit_h;
	unit_h = get HEADING(0); // gets the units angle
	
	var sin_h ;
	var cos_h ; 
	sin_h = get KSIN(unit_h); // transform into sine and cosine
	cos_h = get KCOS(unit_h);
	// When the unit is pointing towards +Z, the heading is 0, the sinh is 0, the cosh is 1024
	
	
	//get PRINT(666, unit_h, sin_h, cos_h);
	// rotate the vector by HEADING angle
	var delta_x;
	var delta_z;
	delta_x = (flare_x * cos_h + flare_z * sin_h) / 1024;
	delta_z = (flare_z * cos_h - flare_x * sin_h) /1024;
	
	
	//get PRINT(get GAME_FRAME, 0, delta_x, delta_z);
	// move the piece into the correct pos, and rotate it upward
	move barrelblast to x-axis [-1] * (delta_x) now; // x is inverted, fuck if I know why
	move barrelblast to z-axis [1] * (delta_z) now;
	turn barrelblast to x-axis <-90> now;
	
	// emit the effect
	emit-sfx 1024 + 0 from barrelblast;
	*/
}

// Pass whichever piece you want to locate on XZ, AND the turret that it rotates around in Y
// Also tell how many percent further out you want the emit to happend (100% is exactly under flarepiece, 200% is 2x further from TURRET)
MoveBarrelBlastTurret(flarepiece, turretpiece, percentfurther) 
{
	
	var flarepiece_xz;	
	flarepiece_xz = get PIECE_XZ(flarepiece); // returns packed xz worldpos of piece
	/*
	var flare_x;
	var flare_z;
	flare_z = (flarepiece_xz & 0x0000ffff); // silly unpack
	flare_x = (flarepiece_xz & 0xffff0000) / 0x00010000; // yes this works
	//get PRINT(get GAME_FRAME, flarepiece, flare_x, flare_z);
	
	var unit_xz;
	unit_xz = get UNIT_XZ(0); // returns packed xz worldpos of unit
	var unit_x;
	var unit_z;
	unit_z = (unit_xz & 0x0000ffff);
	unit_x = (unit_xz & 0xffff0000) / 0x00010000;
	
	var turret_xz;
	turret_xz = get PIECE_XZ(turretpiece); // returns packed xz worldpos of unit
	var turret_x;
	var turret_z;
	turret_z = (turret_xz & 0x0000ffff);
	turret_x = (turret_xz & 0xffff0000) / 0x00010000;
	
	//Transform from world space to unit space
	// Make flare relative to turret here
	flare_x = flare_x - turret_x;
	flare_z = flare_z - turret_z;
	
	// Make turret relative to unit:
	turret_x = turret_x - unit_x;
	turret_z = turret_z - unit_z;
	
	get PRINT(flare_x, flare_z, turret_x, turret_z);
	var unit_h;
	unit_h = get HEADING(0); // gets the units angle
	
	var sin_h ;
	var cos_h ; 
	sin_h = get KSIN(unit_h); // transform into sine and cosine
	cos_h = get KCOS(unit_h);
	// When the unit is pointing towards +Z, the heading is 0, the sinh is 0, the cosh is 1024
	
	
	//get PRINT(666, unit_h, sin_h, cos_h);
	// rotate the vector by HEADING angle
	var delta_x;
	var delta_z;
	delta_x = percentfurther *(flare_x * cos_h + flare_z * sin_h) /(1024*100);
	delta_z = percentfurther *(flare_z * cos_h - flare_x * sin_h) /(1024*100);
	
	delta_x = delta_x + (turret_x * cos_h + turret_z * sin_h) /1024;
	delta_z = delta_z + (turret_z * cos_h - turret_x * sin_h) /1024;
	
	
	//get PRINT(get GAME_FRAME, 0, delta_x, delta_z);
	// move the piece into the correct pos, and rotate it upward
	move barrelblast to x-axis [-1] * (delta_x) now; // x is inverted, fuck if I know why
	move barrelblast to z-axis [1] * (delta_z) now;
	turn barrelblast to x-axis <-90> now;
	
	// emit the effect
	emit-sfx 1024 + 0 from barrelblast;
	*/
}

#define RB_MASS 50
#define RB_LENGTH 10
#define RB_WIDTH 4
#define RB_PITCH_ACCELERATION 10
#define RB_ROLL_ACCELERATION 8
#define RB_RECOIL_ENERGY_1 250
#define RB_RECOIL_ENERGY_2 250
#define RB_BOWSPLASH_PIECE bow

#include "../bar_ships_common.h"



Create()
{
	hide bow;
	hide wake;
	hide flare2b;
	hide flare2a;
	hide flare1a;
	hide flare1b;
	hide ground;
	weapon1barrel = 0;
	weapon2barrel = 0;
	gun_1 = flare1a;
	gun_2 = flare1a;
	restore_delay = 3000;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 8;
}

RestoreWeapon1()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.0> speed <55.0>;
	turn sleeve1 to x-axis <-5.0> speed <30.0>;
	weapon1barrel = 1;
}

RestoreWeapon2()
{
	sleep restore_delay;
	turn turret2 to y-axis <0.0> speed <55.0>;
	turn sleeve2 to x-axis <-5.0> speed <30.0>;
	weapon2barrel = 1;
}



StartMoving(reversing)
{

}

StopMoving()
{
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	aimDir1 = heading;
	turn turret1 to y-axis heading speed <55.0>;
	turn sleeve1 to x-axis RB_AIMPITCHCORRECTION(heading) - pitch speed <30.0>;
	wait-for-turn turret1 around y-axis;
	//wait-for-turn sleeve1 around x-axis;
/* 	while( gun_1 )
	{
		wait-for-move barrel1a along z-axis;
		wait-for-move barrel1b along z-axis;
		weapon1barrel = 0;
		gun_1 = flare1a;
	} */
	start-script RestoreWeapon1();
	return (1);
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	aimDir2 = heading;
	turn turret2 to y-axis heading speed <55.0>;
	turn sleeve2 to x-axis RB_AIMPITCHCORRECTION(heading) - pitch speed <30.0>;
	wait-for-turn turret2 around y-axis;
	//wait-for-turn sleeve2 around x-axis;
/* 	while( gun_2 )
	{
		wait-for-move barrel2a along z-axis;
		wait-for-move barrel2b along z-axis;
		weapon2barrel = 1;
		gun_2 = flare1a;
	} */
	start-script RestoreWeapon2();
	return (1);
}

FireWeapon1()
{
	weapon1barrel = !weapon1barrel;
	if( weapon1barrel )
	{
	    emit-sfx 1024 + 0 from flare1a;
		move barrel1a to z-axis [-2.500000] now;
		sleep 100;
		move barrel1a to z-axis [0.0] speed [1.0];
		call-script MoveBarrelBlast(barrel1a);
	}
	else
	{
	    emit-sfx 1024 + 0 from flare1b;
		move barrel1b to z-axis [-2.500000] now;
		sleep 100;
		move barrel1b to z-axis [0.0] speed [1.0];
	}
	
	RB_RECOILBOAT(aimDir1, RB_RECOIL_ENERGY_1);
	
}

FireWeapon2()
{
	weapon2barrel = !weapon2barrel;
	if( weapon2barrel )
	{
	    emit-sfx 1024 + 0 from flare2a;
		move barrel2a to z-axis [-2.500000] now;
		sleep 100;
		move barrel2a to z-axis [0.0] speed [1.0];
		call-script MoveBarrelBlastTurret(barrel2a, turret2, 300);
	}
	else
	{
	    emit-sfx 1024 + 0 from flare2b;
		move barrel2b to z-axis [-2.500000] now;
		sleep 100;
		move barrel2b to z-axis [0.0] speed [1.0];
	}
	RB_RECOILBOAT(aimDir1, RB_RECOIL_ENERGY_2);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret1;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare1a + weapon1barrel;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = turret2;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flare2a + weapon2barrel;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type BITMAPONLY | NOHEATCLOUD;
		explode sleeve2 type BITMAPONLY | NOHEATCLOUD;
		explode barrel2b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2a type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type FALL | NOHEATCLOUD;
		explode sleeve2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type SMOKE | FALL | NOHEATCLOUD;
		explode sleeve2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2a type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeve2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel2b type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare2b type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel2a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
