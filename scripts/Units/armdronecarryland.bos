#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  ground, base, radar, nano1, nano2, nano3, nano4, wake1, wake2, blink, drone1, drone2, drone3, drone4, drone5, drone6, drone7, drone8, drone9, drone10, drone11, drone12, drone13, drone14, drone15, drone16, frontwheels, backwheels;

static-var  Stunned, oldHeading;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


#define BASEPIECE base
#define HITSPEED <10.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 8
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"

Lights()
{
	while( TRUE )
	{
	    if (!Stunned) {
		    emit-sfx 1024 + 0 from blink;
		}
		sleep 2500;
	}
	sleep 50;
	start-script Lights();
}

Go()
{
	spin radar around y-axis speed <-50.043956> accelerate <2>;
	return (0);
}

Stop()
{
	spin radar around y-axis speed <0.000000>;
	return (0);
}

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
}

SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    call-script Stop();
	} else {
	    call-script Go();
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep 3000;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide blink;
	hide wake1;
	hide wake2;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
}

Activate()
{
	start-script Lights();
	start-script Go();
}

Deactivate()
{
	start-script Stop();
}

Steering(heading, steer, currentSpeed)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while(1)
	{
		heading = get HEADING;
		steer = (heading - oldheading)*7;
		turn frontwheels to y-axis steer speed <40>;
		steer = (heading - oldheading)*2;
		turn backwheels to y-axis steer * -1 speed <30>;
		currentSpeed = <3.92> *((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if (currentSpeed < <100>) currentSpeed = <100>;
		sleep 85;
		oldheading = heading;
	}
}

StartMoving()
{
	start-script Steering();
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <1.0>;
	move base to y-axis [0.0] speed [0.17];
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script RestoreAfterDelay();
	return (0);
}

FirePrimary()
{
	sleep 150;
}

QueryPrimary(piecenum)
{
	piecenum = radar;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = radar;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		return(corpsetype);
	}
	corpsetype = 3 ;
	return corpsetype;
}
