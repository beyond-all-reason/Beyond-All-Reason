
#include "../recoil_common_includes.h"

piece  flare1, flare2, base, turret, sleeve1, sleeve2, depthturret, depthflare, barrel1, barrel2, ground, wake, bow;

static-var  gun_1, restore_delay, aimDir1, aimDir2;

// Signal definitions
#define SIGNAL_AIM1 256


#define RB_MASS 30
#define RB_LENGTH 7
#define RB_WIDTH 3
#define RB_PITCH_SPEED 200
#define RB_PITCH_ACCELERATION 10
#define RB_ROLL_ACCELERATION 8
#define RB_RECOIL_ENERGY_1 700
#define RB_RECOIL_ENERGY_2 250
#define RB_BOWSPLASH_PIECE bow

#include "../bar_ships_common.h"


Create()
{
	hide bow;
	hide wake;
	hide depthflare;
	hide flare2;
	hide flare1;
	hide ground;
	hide flare1;
	hide flare2;
	gun_1 = flare1;
	restore_delay = 3000;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turret to y-axis <0.0> speed <35.0>;
	turn sleeve1 to x-axis <0.0> speed <15.0>;
	turn sleeve2 to x-axis <0.0> speed <15.0>;

	turn depthturret to y-axis <0.0> speed <35.0>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}


StartMoving(reversing)
{
}

StopMoving()
{
}

AimWeapon2(heading, pitch)
{
	aimDir2 = heading;
	turn depthturret to y-axis heading speed <180.0>;
	wait-for-turn depthturret around y-axis;
	return (1);
}

FireWeapon2()
{
	sleep 100;
	RB_RECOILBOAT(aimDir2, RB_RECOIL_ENERGY_2);
}


AimFromWeapon2(pieceIndex)
{
	pieceIndex = base;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = depthflare;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <100.0>;
	turn sleeve1 to x-axis RB_AIMPITCHCORRECTION(heading) - pitch speed <40.0>;
	turn sleeve2 to x-axis RB_AIMPITCHCORRECTION(heading) - pitch speed <40.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve1 around x-axis;
	aimDir1 = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	RB_RECOILBOAT(aimDir1, RB_RECOIL_ENERGY_1);
	if( gun_1 )
	{
	    emit-sfx 1024 + 0 from flare2;
		move barrel2 to z-axis [-3.0] speed [500.0];
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.0] speed [3.0];
	}
	else
	{
	    emit-sfx 1024 + 0 from flare1;
		move barrel1 to z-axis [-3.0] speed [500.0];
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.0] speed [3.0];
	}
	gun_1 = !gun_1;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare1 + gun_1;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode depthturret type BITMAPONLY | NOHEATCLOUD;
		explode depthflare type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve2 type BITMAPONLY | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FALL | NOHEATCLOUD;
		explode depthturret type FALL | NOHEATCLOUD;
		explode depthflare type FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve2 type FALL | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode depthturret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode depthflare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode depthturret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode depthflare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
