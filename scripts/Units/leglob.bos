
#include "../recoil_common_includes.h"

//#define DEBUG
#include "../debug.h"

piece pelvis, aimy1, torso, aimx1, sleeve, barrel, flare, armor, flap, lthigh, lleg, lfoot, rthigh, rleg, rfoot;

static-var  isMoving, animSpeed, maxSpeed, animFramesPerKeyframe, StompXZ, StompHeading, aimingClose;

lua_UnitScriptDecal(lightIndex, xpos,zpos, heading) 
{
	return 0;
}

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_MOVE 1
#define SIGNAL_RESETDELAY 2

// this animation uses the static-var animFramesPerKeyframe which contains how many frames each keyframe takes
Walk() {
	while(isMoving) {
		if (isMoving) { //Frame:5
			turn lfoot to x-axis <31.054165> speed <1326.618251> / animSpeed; 
			turn lleg to x-axis <-35.823946> speed <1334.371472> / animSpeed; 
			turn lthigh to x-axis <35.216022> speed <637.496184> / animSpeed; 
			move pelvis to y-axis [0.570596] speed [35.561886] / animSpeed; 
			turn pelvis to x-axis <2.066654> speed <101.777603> / animSpeed; 
			turn rfoot to x-axis <4.774714> speed <645.380788> / animSpeed; 
			turn rleg to x-axis <13.336621> speed <873.716441> / animSpeed; 
			turn rthigh to x-axis <-18.445684> speed <1450.012756> / animSpeed; 
			turn sleeve to x-axis <3.607040> speed <232.250440> / animSpeed; 
			turn torso to y-axis <-0.115018> speed <137.816968> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:10
			turn lfoot to x-axis <38.013346> speed <208.775421> / animSpeed; 
			turn lleg to x-axis <-36.284465> speed <13.815560> / animSpeed; 
			turn lthigh to x-axis <-27.932629> speed <1894.459517> / animSpeed; 
			move pelvis to y-axis [0.381378] speed [5.676527] / animSpeed; 
			turn pelvis to x-axis <6.292695> speed <126.781212> / animSpeed; 
			turn rfoot to x-axis <-43.374693> speed <1444.482211> / animSpeed; 
			turn rleg to x-axis <33.225411> speed <596.663683> / animSpeed; 
			turn rthigh to x-axis <6.151785> speed <737.924067> / animSpeed; 
			turn sleeve to x-axis <-1.258213> speed <145.957588> / animSpeed; 
			turn torso to y-axis <5.230284> speed <160.359056> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:15
			turn lfoot to x-axis <26.238622> speed <353.241709> / animSpeed; 
			turn lleg to x-axis <42.567600> speed <2365.561946> / animSpeed; 
			turn lthigh to x-axis <-66.836311> speed <1167.110453> / animSpeed; 
			move pelvis to y-axis [-0.608589] speed [29.699020] / animSpeed; 
			turn pelvis to x-axis <-1.310487> speed <228.095449> / animSpeed; 
			turn rfoot to x-axis <-13.170352> speed <906.130214> / animSpeed; 
			turn rleg to x-axis <8.702399> speed <735.690365> / animSpeed; 
			turn rthigh to x-axis <56.407087> speed <1507.659049> / animSpeed; 
			turn sleeve to x-axis <-4.140616> speed <86.472093> / animSpeed; 
			turn torso to y-axis <4.709129> speed <15.634636> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:20
			turn lfoot to x-axis <4.774726> speed <643.916904> / animSpeed; 
			turn lleg to x-axis <13.349676> speed <876.537711> / animSpeed; 
			turn lthigh to x-axis <-18.453160> speed <1451.494531> / animSpeed; 
			move pelvis to y-axis [0.571506] speed [35.402842] / animSpeed; 
			turn pelvis to x-axis <2.066654> speed <101.314238> / animSpeed; 
			turn rfoot to x-axis <31.053148> speed <1326.705003> / animSpeed; 
			turn rleg to x-axis <-35.810470> speed <1335.386062> / animSpeed; 
			turn rthigh to x-axis <35.208174> speed <635.967383> / animSpeed; 
			turn sleeve to x-axis <3.608301> speed <232.467512> / animSpeed; 
			turn torso to y-axis <0.115018> speed <137.823335> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:25
			turn lfoot to x-axis <-43.399712> speed <1445.233126> / animSpeed; 
			turn lleg to x-axis <33.359115> speed <600.283162> / animSpeed; 
			turn lthigh to x-axis <6.079200> speed <735.970778> / animSpeed; 
			move pelvis to y-axis [0.389326] speed [5.465384] / animSpeed; 
			turn pelvis to x-axis <6.270102> speed <126.103435> / animSpeed; 
			turn rfoot to x-axis <37.992514> speed <208.180990> / animSpeed; 
			turn rleg to x-axis <-36.202014> speed <11.746320> / animSpeed; 
			turn rthigh to x-axis <-27.937593> speed <1894.372996> / animSpeed; 
			turn sleeve to x-axis <-1.226293> speed <145.037814> / animSpeed; 
			turn torso to y-axis <-5.230000> speed <160.350537> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:30
			turn lfoot to x-axis <-13.166443> speed <906.998066> / animSpeed; 
			turn lleg to x-axis <8.655103> speed <741.120365> / animSpeed; 
			turn lthigh to x-axis <56.465894> speed <1511.600845> / animSpeed; 
			move pelvis to y-axis [-0.614800] speed [30.123796] / animSpeed; 
			turn pelvis to x-axis <-1.325932> speed <227.881038> / animSpeed; 
			turn rfoot to x-axis <26.287407> speed <351.153207> / animSpeed; 
			turn rleg to x-axis <42.460503> speed <2359.875506> / animSpeed; 
			turn rthigh to x-axis <-66.779443> speed <1165.255493> / animSpeed; 
			turn sleeve to x-axis <-4.134641> speed <87.250456> / animSpeed; 
			turn torso to y-axis <-4.708917> speed <15.632484> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
	}
}
// Call this from StopMoving()!
StopWalking() {
	animSpeed = 10; // tune restore speed here, higher values are slower restore speeds
	move pelvis to y-axis [0] speed [100.0] / animSpeed;
	turn lfoot to x-axis <0> speed <2890.466252> / animSpeed;
	turn lleg to x-axis <0> speed <4731.123891> / animSpeed;
	turn lthigh to x-axis <0> speed <3788.919035> / animSpeed;
	turn pelvis to x-axis <0> speed <456.190898> / animSpeed;
	turn rfoot to x-axis <0> speed <2888.964422> / animSpeed;
	turn rleg to x-axis <0> speed <4719.751012> / animSpeed;
	turn rthigh to x-axis <0> speed <3788.745992> / animSpeed;
	turn sleeve to x-axis <0> speed <464.935024> / animSpeed;
	turn torso to y-axis <0> speed <320.718111> / animSpeed;
	
	
	turn lthigh to y-axis <10> speed <600> / animSpeed;
	turn rthigh to y-axis <-10> speed <600> / animSpeed;
	turn lleg to y-axis <5> speed <600> / animSpeed;
	turn rleg to y-axis <-5> speed <600> / animSpeed;
}

// REMEMBER TO animspeed = 5 in Create() !!
UnitSpeed(){
	maxSpeed = get MAX_SPEED; // this returns cob units per frame i think
	animFramesPerKeyframe = 5; //we need to calc the frames per keyframe value, from the known animtime
	maxSpeed = maxSpeed + (maxSpeed /(2*animFramesPerKeyframe)); // add fudge
	while(TRUE){
		animSpeed = (get CURRENT_SPEED);
		if (animSpeed<1) animSpeed=1;
		animSpeed = (maxSpeed * 4) / animSpeed; 
		//get PRINT(maxSpeed, animFramesPerKeyframe, animSpeed); //how to print debug info from bos
		if (animSpeed<2) animSpeed=2;
		if (animspeed>10) animSpeed = 10;
		sleep 164;
	}
}

#define BASEPIECE pelvis
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100

RockUnit(anglex, anglez)
{
	turn pelvis to x-axis anglex speed <50.000000>;
	turn pelvis to z-axis <0> - anglez speed <50.000000>;
	wait-for-turn pelvis around z-axis;
	wait-for-turn pelvis around x-axis;
	turn pelvis to z-axis <0.000000> speed <20.000000>;
	turn pelvis to x-axis <0.000000> speed <20.000000>;
}


Create()
{
	hide flare;
	hide aimx1;
	hide aimy1;
	animSpeed = 3;
	isMoving = FALSE;
	animSpeed = 4;
	aimingClose = 0;
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	
	isMoving = TRUE;
	
	turn lthigh to y-axis <0> speed <600> / animSpeed;
	turn rthigh to y-axis <0> speed <600> / animSpeed;
	turn lleg to y-axis <0> speed <600> / animSpeed;
	turn rleg to y-axis <0> speed <600> / animSpeed;
	
	set-signal-mask SIGNAL_MOVE;
	start-script Walk();
	start-script UnitSpeed();
}

StopMoving()
{
	signal SIGNAL_MOVE;
	isMoving = FALSE;
	call-script StopWalking();
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimx1;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = aimx1;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flare;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	
    turn aimy1 to y-axis <0.0> speed <90>;
    turn aimx1 to x-axis <-5.0> speed <45>;
	
	move flap to y-axis [0.0] speed [1];
	move flap to z-axis [0.0] speed [6];
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{

	set-signal-mask SIGNAL_AIM1;
    sleep 2750;
	start-script ExecuteRestoreAfterDelay();
}

ResetAimingClose()
{
	signal SIGNAL_RESETDELAY;
	set-signal-mask SIGNAL_RESETDELAY;
	sleep 200;
	aimingClose = 0;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	aimingClose = 1;
	start-script ResetAimingClose();

	if (pitch >= <13>)
	{
		move flap to y-axis [1.6] speed [4];
		move flap to z-axis [-5] speed [6];
	}
	else
	{
		move flap to y-axis [0.0] speed [1];
		move flap to z-axis [0.0] speed [6];
	}
	
	turn aimy1 to y-axis heading speed <140>;
	turn aimx1 to x-axis <0.0> - pitch speed <50>;
	
	wait-for-turn aimy1 around y-axis; 
	wait-for-turn aimx1 around x-axis;
	
	start-script RestoreAfterDelay();

		var reloading;
	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(2));
	if( reloading )
	{
		return(0);
	}

	return (1);
}

AimWeapon2(heading, pitch)
{
	if (aimingClose == 1){
		return (0);
	}
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;

	if (pitch >= <13>)
	{
		move flap to y-axis [1.6] speed [4];
		move flap to z-axis [-5] speed [6];
	}
	else
	{
		move flap to y-axis [0.0] speed [1];
		move flap to z-axis [0.0] speed [6];
	}
	
	turn aimy1 to y-axis heading speed <140>;
	turn aimx1 to x-axis <0.0> - pitch speed <50>;
	
	wait-for-turn aimy1 around y-axis; 
	wait-for-turn aimx1 around x-axis;

	start-script RestoreAfterDelay();
		
	var reloading;
	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(1));
	if( reloading )
	{
		return(0);
	}

	return (1);
}

FireWeapon1()
{
	move barrel to z-axis [-3.000000] speed [60.000000];
	emit-sfx 1024 + 0 from flare;
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.000000] speed [4.000000];
	wait-for-move barrel along z-axis;
	return (0);
}

FireWeapon2()
{
	move barrel to z-axis [-5.000000] speed [60.000000];
	emit-sfx 1024 + 0 from flare;
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.000000] speed [4.000000];
	wait-for-move barrel along z-axis;
	return (0);
}

//use call-script DeathAnim(); from Killed()
DeathAnim() 
{
	signal SIGNAL_MOVE;
	signal SIGNAL_AIM1;
	call-script StopWalking();
	sleep (100);
	
	turn aimy1 to y-axis <0> speed <600>;
	turn aimx1 to x-axis <0> speed <200>;
	
	turn torso to y-axis <40> speed <200>;
	turn sleeve to x-axis <-40> speed <200>;
	
	move pelvis to y-axis [-9] speed [30];
	turn pelvis to x-axis <75> speed <300>;
	
	turn lthigh to y-axis <60> speed <200>;
	turn rthigh to y-axis <-60> speed <200>;
	
	turn lthigh to x-axis <-25> speed <200>;
	turn rthigh to x-axis <-25> speed <200>;
	
	turn lleg to x-axis <15> speed <200>;
	turn rleg to x-axis <15> speed <200>;
	
	sleep (300);
}


Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		call-script DeathAnim();
		corpsetype = 1 ;
		explode barrel type BITMAPONLY | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		explode flap type BITMAPONLY | NOHEATCLOUD;
		explode aimy1 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode pelvis type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode armor type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode aimy1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode pelvis type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lleg type SMOKE | FALL | NOHEATCLOUD;
		explode armor type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lthigh type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode aimy1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode pelvis type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode torso type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lleg type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode armor type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lthigh type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode aimy1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
