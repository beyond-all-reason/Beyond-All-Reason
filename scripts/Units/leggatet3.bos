#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, shield, light1, light2, light3, bigshield_1, bigshield_2, bigshield_3, smallshield_1, smallshield_2, smallshield_3;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, damage_tally, damage, current_piece;

#define SIG_RESTORE_ARMOR			2

ShieldOn()
{
	Static_Var_1 = 1;
}

ShieldOff()
{
	Static_Var_1 = 0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script ShieldOn();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script ShieldOff();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide shield;
	Static_Var_1 = 1;
	call-script InitState();
	current_piece = bigshield_1;
	set ARMORED to 1;
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

RestoreArmor()
{
	set-signal-mask SIG_RESTORE_ARMOR;
	sleep 5000;
	set ARMORED to 1;
	damage_tally = 0;
	if (current_piece == bigshield_1) {
		show bigshield_1;
		return (0);
	}
	
	current_piece = current_piece - 1;
	
	if (current_piece == bigshield_2) {
		show bigshield_2;
	} else if (current_piece == bigshield_3) {
		show bigshield_3;
	} else if (current_piece == smallshield_1) {
		show smallshield_1;
	} else if (current_piece == smallshield_2) {
		show smallshield_2;
	} else if (current_piece == smallshield_3) {
		show smallshield_3;
	}
	
	start-script RestoreArmor();
}

HitByWeaponId(anglex, anglez, weaponid, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	damage_tally = damage + damage_tally;
	signal SIG_RESTORE_ARMOR;
	set-signal-mask SIG_RESTORE_ARMOR;
	start-script RestoreArmor();
	
	if ((damage_tally > 120000) AND (current_piece != (smallshield_3 + 1)))
	{
		if (current_piece == bigshield_1 ) {
			explode bigshield_1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
			hide bigshield_1;
		}else if (current_piece == bigshield_2) {
			explode bigshield_2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
			hide bigshield_2;
		}else if (current_piece == bigshield_3) {
			explode bigshield_3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
			hide bigshield_3;
		}else if (current_piece == smallshield_1) {
			explode smallshield_1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
			hide smallshield_1;
		}else if (current_piece == smallshield_2) {
			explode smallshield_2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
			hide smallshield_2;
		}else if (current_piece == smallshield_3) {
			explode smallshield_3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
			hide smallshield_3;
			set ARMORED to 0;
		}
		current_piece = current_piece + 1;
		damage_tally = 0;
	}
	return (100);
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	sleep 100;
	return (Static_Var_1);
}

FirePrimary()
{
	sleep 100;
}

QueryPrimary(piecenum)
{
	piecenum = shield;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

AimSecondary(heading, pitch)
{

	sleep 100;
	return (Static_Var_1);
}

FireSecondary()
{
	sleep 100;
}

QuerySecondary(piecenum)
{
	piecenum = base;
}

AimFromSecondary(piecenum)
{
	piecenum = base;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode shield type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode shield type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode shield type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode shield type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
