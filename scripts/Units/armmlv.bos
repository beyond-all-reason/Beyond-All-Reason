
#include "../recoil_common_includes.h"

piece  	base, tracks, turret, shoulder, leg, lankle, rankle, lwheel, rwheel, 
 		nanosleeve, lnano, rnano, lflare, rflare; 


static-var  gun_2, oldHeading;

#define SIGNAL_MOVE 1
#define SIGNAL_BUILD 2

Steering(heading, steer, currentSpeed)
{
	while(1)
	{
		heading = get HEADING;
		steer = (heading - oldheading)*3;  //3
		turn rankle to y-axis steer speed <75>;	
		turn lankle to y-axis steer speed <75>;
		steer = (heading - oldheading)*1.0; 
		turn turret to y-axis steer speed <75>;	
		currentSpeed = <3.92> *((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if (currentSpeed < <100>) currentSpeed = <100>;
		spin rwheel around x-axis speed currentSpeed;
		spin lwheel around x-axis speed currentSpeed;
		sleep 66;
		oldheading = heading;
	}
}


#define BASEPIECE base
#define HITSPEED <75.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "../unit_hitbyweaponid_and_smoke.h"


#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <0.1>
#define TB_BANK_Z <0.1> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"



Create()
{
	hide rflare;
	hide lflare;
	gun_2 = nanosleeve;
	oldheading = get HEADING;
	call-script TB_Init();
}

StartBuilding(heading, pitch)
{
	show rflare;
	show lflare;
	signal SIGNAL_BUILD;
	turn lwheel to y-axis <90> speed <120.0>;
	turn rwheel to y-axis <90> speed <120.0>;
	spin lwheel around x-axis speed <120>;  //how to turn wheels in right direction?
	spin rwheel around x-axis speed <120>;  //how to turn wheels in right direction?
	turn turret to y-axis heading speed <60.0>;
	turn lnano to y-axis heading speed <160>;  //nanos pointing in wrong direction in the end => probably sth to do with aiming in combination with turret
	turn rnano to y-axis heading speed <160>;
	wait-for-turn turret around y-axis;
	wait-for-turn lnano around y-axis;
	wait-for-turn rnano around y-axis;
	stop-spin lwheel around x-axis;
	stop-spin rwheel around x-axis;	
	turn lwheel to y-axis <0> speed <120.0>;
	turn rwheel to y-axis <0> speed <120.0>;
	
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	hide rflare;
	hide lflare;
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIGNAL_BUILD;	
	set INBUILDSTANCE to 0;
	turn lwheel to y-axis <90> speed <120.0>;
	turn rwheel to y-axis <90> speed <120.0>;
	spin lwheel around x-axis speed <120>; 
	spin rwheel around x-axis speed <120>;
	turn lnano to y-axis <0.0> speed <160.0>;
	turn rnano to y-axis <0.0> speed <160.0>;
	turn turret to y-axis <0.0> speed <60.0>;
	wait-for-turn lnano around y-axis;  //how to turn wheels in right direction?
	wait-for-turn lnano around y-axis;  //how to turn wheels in right direction?
	wait-for-turn turret around y-axis;
	stop-spin lwheel around x-axis;
	stop-spin rwheel around x-axis;
	turn lwheel to y-axis <0> speed <120.0>;
	turn rwheel to y-axis <0> speed <120.0>;
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	start-script Steering();

	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	stop-spin rwheel around x-axis;
	stop-spin lwheel around x-axis;
	
	STOP_TILTBANK;
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = lnano;
}



AimWeapon1(heading, pitch)
{
	while( !gun_2 )
	{
		sleep 250;
	}
	return (1);
}

FireWeapon1()
{
	gun_2 = turret;
	//sleep 3000;
	//gun_2 = nanosleeve;
}

QueryWeapon1(pieceIndex)
{
	//pieceIndex = turret;
	//pieceIndex = lnano;
	pieceIndex = rnano;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}
/*
AimWeapon2(heading, pitch)
{
	while( !gun_2 )
	{
		sleep 250;
	}
	return (1);
}

FireWeapon2()
{
	gun_2 = base;
	sleep 3000;
	gun_2 = leftnano;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = rightnano;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = rightnano;
}
*/
Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanosleeve type BITMAPONLY | NOHEATCLOUD;
		explode shoulder type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanosleeve type FALL | NOHEATCLOUD;
		explode shoulder type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode nanosleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode shoulder type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nanosleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode shoulder type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lwheel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode leg type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
