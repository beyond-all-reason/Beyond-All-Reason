
#include "../recoil_common_includes.h"

piece base, turret, launcher, radar, wake1, flare1, flare2, flare3, blink;

static-var  gun_1, restore_delay, fired, aiming;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256
#define SIGNAL_AIM3 1024

#define RB_MASS 10
#define RB_LENGTH 5
#define RB_WIDTH 3
#define RB_PITCH_ACCELERATION 10
#define RB_ROLL_ACCELERATION 8
#define RB_RECOIL_ENERGY_2 500
#define RB_WAKE_PIECE wake1
#define RB_WAKE_CEG 1024 + 0
#define RB_IDLE_KICK 10000
#define RB_ROCKUNIT 75

#include "../bar_ships_common.h"


Lights()
{
	while( TRUE )
	{
		emit-sfx 1024 + 1 from blink;
		sleep 2500;
	}
	sleep 50;
	start-script Lights();
}

Go()
{
	spin radar around x-axis speed <-50.043956> accelerate <2>;
	return (0);
}

Stop()
{
	spin radar around x-axis speed <0.0>;
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide wake1;
	fired = 0;
	aiming = 0;
	gun_1 = 1;
	restore_delay = 3000;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
	start-script Lights();
}

ResetFire()
{
	signal SIGNAL_SHOOT1;
	set-signal-mask SIGNAL_SHOOT1;
	fired = 1;
	sleep 1500;
	fired = 0;
}


ResetAiming()
{
	signal SIGNAL_IDLE;
	set-signal-mask SIGNAL_IDLE;
	aiming = 1;
	sleep 500;
	aiming = 0;
}

Activate()
{
	start-script Go();
}

Deactivate()
{
	start-script Stop();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turret to y-axis <0.0> speed <150.0>;
	turn turret to x-axis <0.0> speed <150.0>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

StartMoving(reversing)
{

}

StopMoving()
{
}


AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	start-script ResetAiming();
	turn turret to y-axis heading speed <300.0>;
	turn launcher to x-axis <0> - pitch speed <300>;  //?
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	if(fired == 1)
	{
		return (0);
	}
	return (1);
}

FireWeapon1()
{
	start-script ResetFire();
	gun_1 = (gun_1 + 1) % 3;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = launcher;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare1 + gun_1;
}


AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	if(aiming == 1)
	{
		return (0);
	}
	turn turret to y-axis heading speed <300.0>;
	turn launcher to x-axis <0> - pitch speed <300>;  //?
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	sleep 33;
	if(fired == 1)
	{
		return (0);
	}
	return (1);
}

FireWeapon2()
{
	start-script ResetFire();
	gun_1 = (gun_1 + 1) % 3;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = launcher;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flare1 + gun_1;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode launcher type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode radar type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode launcher type FALL | NOHEATCLOUD;
		explode radar type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode launcher type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode radar type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode launcher type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode radar type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
