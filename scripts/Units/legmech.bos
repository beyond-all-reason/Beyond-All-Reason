#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece pelvis, lthigh, lknee, lleg, Main_hull, AA_turret_main, AA_turret_gun_hull, AA_turret_gun_1, 
			AA_turret_gun_2, AA_turret_radar, Left_turret_main, Left_turret_gun, Right_turret_main, Right_turret_gun, 
			Torso_turret_main, Torso_turret_left_hull_1, Torso_turret_left_hull_2, Torso_turret_left_gun, 
			Torso_turret_right_hull_1, Torso_turret_right_hull_2, Torso_turret_right_gun, rthigh, rknee, rleg, AA_turret_gun_1_flare, AA_turret_gun_2_flare, Left_turret_gun_flare, Right_turret_gun_flare,
			Torso_turret_left_gun_flare, Torso_turret_right_gun_flare, Ref_Point, mis1, mis2, mis3, mis4;  

static-var gun_1, torsoaim, miniguncount, animFramesPerKeyframe, movespeed,
            restore_delay, wpn1_lasthead, wpn2_lasthead, wpn3_lasthead, wpn4_lasthead, bMoving, animSpeed, maxspeed, missile_count;

// Signal definitions
#define SIG_AIM_1	2
#define SIG_AIM_2 	4
#define SIG_AIM_3 	8
#define SIG_AIM_4 	16
#define SIG_FIRE1 	32
#define SIG_AIM_5 	64
#define SIG_WALK	128
#define SIG_FIRE2 	256

// REMEMBER TO animspeed = 4 in Create() !!
//--------------------------------------------------------
//--start ups :)
//--------------------------------------------------------

walk() 	// (c) CC BY NC ND Beherith mysterme@gmail.com
{
	set-signal-mask SIG_WALK;	if (bMoving) { //Frame:4
			//turn lfoot to x-axis <-45.174461> speed <1339.883614> / animSpeed; 
			//turn lfoot to z-axis <-8.711228> speed <587.665429> / animSpeed; 
			//turn lfoot to y-axis <-2.849490> speed <76.187203> / animSpeed; 
			turn lknee to x-axis <-15.469228> speed <442.477796> / animSpeed; 
			turn lknee to z-axis <1.487861> speed <131.493251> / animSpeed; 
			turn lknee to y-axis <1.188732> speed <40.966077> / animSpeed; 
			turn lleg to x-axis <0> speed <415.8> / animSpeed; 
			turn lleg to z-axis <0.432714> speed <87.882955> / animSpeed; 
			turn lleg to y-axis <-0.824043> speed <151.248443> / animSpeed; 
			turn lthigh to x-axis <25> speed <393> / animSpeed; 
			turn lthigh to z-axis <3.2> speed <191.5> / animSpeed; 
			turn lthigh to y-axis <-0.56> speed <61.8> / animSpeed; 
			turn pelvis to x-axis <-0.000000> speed <149.999983> / animSpeed; 
			//turn rfoot to x-axis <38.546265> speed <1128.417134> / animSpeed; 
			//turn rfoot to z-axis <-6.897524> speed <101.979838> / animSpeed; 
			//turn rfoot to y-axis <-1.430482> speed <57.160004> / animSpeed; 
			turn rknee to x-axis <-3.807909> speed <92.923470> / animSpeed; 
			turn rknee to z-axis <-1.404396> speed <130.789327> / animSpeed; 
			turn rknee to y-axis <-0.318391> speed <16.013834> / animSpeed; 
			turn rleg to x-axis <0> speed <688.531183> / animSpeed; 
			turn rleg to z-axis <-0.818183> speed <96.474476> / animSpeed; 
			turn rleg to y-axis <1.904704> speed <175.370213> / animSpeed; 
			turn rthigh to x-axis <-23> speed <456.5> / animSpeed; 
			turn rthigh to z-axis <-0.71> speed <112.9> / animSpeed; 
			turn rthigh to y-axis <1.017> speed <71.8> / animSpeed; 
		sleep 131;
	}
	while(bMoving) {
		if (bMoving) { //Frame:8
			//turn lfoot to x-axis <-39.050804> speed <183.709720> / animSpeed; 
			//turn lfoot to z-axis <-3.901796> speed <144.282974> / animSpeed; 
			//turn lfoot to y-axis <-0.770642> speed <62.365451> / animSpeed; 
			turn lknee to x-axis <-29.895461> speed <432.787014> / animSpeed; 
			turn lknee to z-axis <2.111918> speed <18.721710> / animSpeed; 
			turn lknee to y-axis <0.518455> speed <20.108322> / animSpeed; 
			turn lleg to x-axis <-10> speed <293.4> / animSpeed; 
			turn lleg to z-axis <-0.204225> speed <19.108161> / animSpeed; 
			turn lleg to y-axis <3.951526> speed <143.267072> / animSpeed; 
			turn lthigh to x-axis <42> speed <409.4> / animSpeed; 
			turn lthigh to z-axis <2.61> speed <17.87> / animSpeed; 
			turn lthigh to y-axis <0.44> speed <30.19> / animSpeed; 
			move pelvis to y-axis [-0.870000] speed [26] / animSpeed; 
			turn pelvis to x-axis <4.568749> speed <137.062482> / animSpeed; 
			turn pelvis to y-axis <-4.000000> speed <119.999986> / animSpeed; 
			//turn rfoot to x-axis <5.633654> speed <987.378323> / animSpeed; 
			//turn rfoot to z-axis <0.002615> speed <207.004152> / animSpeed; 
			//turn rfoot to y-axis <-0.002489> speed <42.839816> / animSpeed; 
			turn rknee to x-axis <-36.445131> speed <979.116668> / animSpeed; 
			turn rknee to z-axis <1.049664> speed <73.621793> / animSpeed; 
			turn rknee to y-axis <-0.903029> speed <17.539158> / animSpeed; 
			turn rleg to x-axis <60> speed <1996.137709> / animSpeed; 
			turn rleg to z-axis <-2.989707> speed <65.145727> / animSpeed; 
			turn rleg to y-axis <5.000039> speed <92.860037> / animSpeed; 
			turn rthigh to x-axis <-45> speed <449.5> / animSpeed; 
			turn rthigh to z-axis <-1.83> speed <33.38> / animSpeed; 
			turn rthigh to y-axis <2.71> speed <50.75> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:12
			//turn lfoot to x-axis <-41.708304> speed <79.725007> / animSpeed; 
			//turn lfoot to z-axis <-0.001299> speed <117.014899> / animSpeed; 
			//turn lfoot to y-axis <-0.002305> speed <23.050116> / animSpeed; 
			turn lknee to x-axis <12.063780> speed <1258.777235> / animSpeed; 
			turn lknee to z-axis <0.544262> speed <47.029656> / animSpeed; 
			turn lknee to y-axis <2.208493> speed <50.701146> / animSpeed; 
			turn lleg to x-axis <-20> speed <1419.958139> / animSpeed; 
			turn lleg to z-axis <0.636072> speed <25.208903> / animSpeed; 
			turn lleg to y-axis <-0.754344> speed <141.176087> / animSpeed; 
			turn lthigh to x-axis <25> speed <314.38> / animSpeed; 
			turn lthigh to z-axis <1.04> speed <47.1> / animSpeed; 
			turn lthigh to y-axis <0.9> speed <13.97> / animSpeed; 
			move pelvis to y-axis [-1.30000] speed [12.500000] / animSpeed; 
			turn pelvis to x-axis <5.899999> speed <39.937499> / animSpeed; 
			turn pelvis to y-axis <-7.999999> speed <119.999986> / animSpeed; 
			//turn rfoot to x-axis <46.754711> speed <1233.631710> / animSpeed; 
			//turn rfoot to z-axis <8.642268> speed <259.189607> / animSpeed; 
			//turn rfoot to y-axis <-0.478550> speed <14.281834> / animSpeed; 
			turn rknee to x-axis <-25> speed <750> / animSpeed; 
			turn rknee to z-axis <-2.553244> speed <108.087247> / animSpeed; 
			turn rknee to y-axis <-1.395354> speed <14.769742> / animSpeed; 
			turn rleg to x-axis <25> speed <1542.375167> / animSpeed; 
			turn rleg to z-axis <-2.090712> speed <26.969858> / animSpeed; 
			turn rleg to y-axis <2.358406> speed <79.248967> / animSpeed; 
			turn rthigh to x-axis <-23> speed <410.5> / animSpeed; 
			turn rthigh to z-axis <-3.02> speed <35.8> / animSpeed; 
			turn rthigh to y-axis <0.9> speed <53.8> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:16
			//turn lfoot to x-axis <-3.910388> speed <1133.937479> / animSpeed; 
			turn lknee to x-axis <25.256626> speed <395.785377> / animSpeed; 
			turn lknee to z-axis <-1.943760> speed <74.640670> / animSpeed; 
			turn lknee to y-axis <2.843982> speed <19.064674> / animSpeed; 
			turn lleg to x-axis <-33.895357> speed <1143.500171> / animSpeed; 
			turn lleg to z-axis <-0.878377> speed <45.433473> / animSpeed; 
			turn lleg to y-axis <-1.882219> speed <33.836252> / animSpeed; 
			turn lthigh to x-axis <4.47> speed <387.7> / animSpeed; 
			turn lthigh to z-axis <-1.085> speed <63.7> / animSpeed; 
			turn lthigh to y-axis <0.96> speed <1.65> / animSpeed; 
			move pelvis to y-axis [-0.440000] speed [26] / animSpeed; 
			turn pelvis to x-axis <2.950000> speed <88.499984> / animSpeed; 
			turn pelvis to y-axis <-5.453124> speed <76.406240> / animSpeed; 
			//turn rfoot to x-axis <3.958173> speed <1283.896135> / animSpeed; 
			//turn rfoot to z-axis <6.352542> speed <68.691797> / animSpeed; 
			//turn rfoot to y-axis <2.455468> speed <88.020537> / animSpeed; 
			turn rknee to x-axis <0.377261> speed <530.359321> / animSpeed; 
			turn rknee to z-axis <-2.164658> speed <11.657583> / animSpeed; 
			turn rknee to y-axis <-0.058077> speed <40.118300> / animSpeed; 
			turn rleg to x-axis <-5.276465> speed <37.303552> / animSpeed; 
			turn rleg to z-axis <-1.611442> speed <14.378110> / animSpeed; 
			turn rleg to y-axis <2.467168> speed <3.262835> / animSpeed; 
			turn rthigh to x-axis <-1.75> speed <417.07> / animSpeed; 
			turn rthigh to z-axis <-1.91> speed <33.35> / animSpeed; 
			turn rthigh to y-axis <0.81> speed <3.14> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:20
			//turn lfoot to x-axis <38.552084> speed <1273.874173> / animSpeed; 
			turn lknee to x-axis <-3.971019> speed <876.829355> / animSpeed; 
			turn lknee to z-axis <1.007743> speed <88.545099> / animSpeed; 
			turn lknee to y-axis <0.243404> speed <78.017357> / animSpeed; 
			turn lleg to x-axis <0> speed <454.732207> / animSpeed; 
			turn lleg to z-axis <0.901724> speed <53.403025> / animSpeed; 
			turn lleg to y-axis <-1.555921> speed <9.788949> / animSpeed; 
			turn lthigh to x-axis <-23> speed <562> / animSpeed; 
			turn lthigh to z-axis <0.69> speed <53.29> / animSpeed; 
			turn lthigh to y-axis <-0.985> speed <53.47> / animSpeed; 
			move pelvis to y-axis [0.000000] speed [13.00000] / animSpeed; 
			turn pelvis to x-axis <-0.000000> speed <88.499997> / animSpeed; 
			turn pelvis to y-axis <0.000000> speed <163.593733> / animSpeed; 
			//turn rfoot to x-axis <-45.601082> speed <1486.777649> / animSpeed; 
			//turn rfoot to z-axis <8.777723> speed <72.755435> / animSpeed; 
			//turn rfoot to y-axis <2.942875> speed <14.622197> / animSpeed; 
			turn rknee to x-axis <-16.417879> speed <503.854208> / animSpeed; 
			turn rknee to z-axis <-0.843632> speed <39.630789> / animSpeed; 
			turn rknee to y-axis <-0.998536> speed <28.213757> / animSpeed; 
			turn rleg to x-axis <10> speed <562.2> / animSpeed; 
			turn rleg to z-axis <-1.124071> speed <14.621108> / animSpeed; 
			turn rleg to y-axis <0.868008> speed <47.974791> / animSpeed; 
			turn rthigh to x-axis <25> speed <488.3> / animSpeed; 
			turn rthigh to z-axis <-3.325> speed <42.37> / animSpeed; 
			turn rthigh to y-axis <0.525> speed <8.57> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:24
			//turn lfoot to x-axis <5.205345> speed <1000.402167> / animSpeed; 
			turn lknee to x-axis <-38.112097> speed <1024.232325> / animSpeed; 
			turn lknee to z-axis <0.216327> speed <23.742493> / animSpeed; 
			turn lknee to y-axis <0.622121> speed <11.361511> / animSpeed; 
			turn lleg to x-axis <60> speed <2050.471932> / animSpeed; 
			turn lleg to z-axis <1.523417> speed <18.650803> / animSpeed; 
			turn lleg to y-axis <-3.307911> speed <52.559711> / animSpeed; 
			turn lthigh to x-axis <-45> speed <428.1> / animSpeed; 
			turn lthigh to z-axis <3.17> speed <74.21> / animSpeed; 
			turn lthigh to y-axis <-1.85> speed <25.96> / animSpeed; 
			move pelvis to y-axis [-0.870000] speed [26] / animSpeed; 
			turn pelvis to x-axis <3.300000> speed <98.999991> / animSpeed; 
			turn pelvis to y-axis <5.203125> speed <156.093737> / animSpeed; 
			//turn rfoot to x-axis <-40.266223> speed <160.045778> / animSpeed; 
			//turn rfoot to z-axis <3.971081> speed <144.199270> / animSpeed; 
			//turn rfoot to y-axis <0.879173> speed <61.911060> / animSpeed; 
			turn rknee to x-axis <-32.900280> speed <494.472023> / animSpeed; 
			turn rknee to z-axis <-0.960615> speed <3.509498> / animSpeed; 
			turn rknee to y-axis <0.006480> speed <30.150478> / animSpeed; 
			turn rleg to x-axis <-10> speed <313.7> / animSpeed; 
			turn rleg to z-axis <-1.445631> speed <9.646799> / animSpeed; 
			turn rleg to y-axis <-3.438915> speed <129.207697> / animSpeed; 
			turn rthigh to x-axis <42> speed <446> / animSpeed; 
			turn rthigh to z-axis <-3.57> speed <7.295> / animSpeed; 
			turn rthigh to y-axis <0.0675> speed <13.77> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:28
			//turn lfoot to x-axis <47.099178> speed <1256.814981> / animSpeed; 
			//turn lfoot to z-axis <-8.698515> speed <260.859201> / animSpeed; 
			//turn lfoot to y-axis <0.555569> speed <16.591946> / animSpeed; 
			turn lknee to x-axis <-25> speed <750> / animSpeed; 
			turn lknee to z-axis <2.513023> speed <68.900890> / animSpeed; 
			turn lknee to y-axis <0.972606> speed <10.514551> / animSpeed; 
			turn lleg to x-axis <25> speed <1598.663435> / animSpeed; 
			turn lleg to z-axis <1.837094> speed <9.410316> / animSpeed; 
			turn lleg to y-axis <-2.029812> speed <38.342974> / animSpeed; 
			turn lthigh to x-axis <-23> speed <377.8> / animSpeed; 
			turn lthigh to z-axis <2.947> speed <6.55> / animSpeed; 
			turn lthigh to y-axis <-0.914> speed <28.115> / animSpeed; 
			move pelvis to y-axis [-1.30000] speed [12.500000] / animSpeed; 
			turn pelvis to x-axis <6.599999> speed <98.999991> / animSpeed; 
			turn pelvis to y-axis <7.499999> speed <68.906244> / animSpeed; 
			//turn rfoot to x-axis <-40.971177> speed <21.148622> / animSpeed; 
			//turn rfoot to z-axis <0.001255> speed <119.094757> / animSpeed; 
			//turn rfoot to y-axis <0.002255> speed <26.307519> / animSpeed; 
			turn rknee to x-axis <11.970984> speed <1346.137924> / animSpeed; 
			turn rknee to z-axis <-0.705707> speed <7.647249> / animSpeed; 
			turn rknee to y-axis <-1.833327> speed <55.194210> / animSpeed; 
			turn rleg to x-axis <-20> speed <1460.973186> / animSpeed; 
			turn rleg to z-axis <-0.618065> speed <24.826988> / animSpeed; 
			turn rleg to y-axis <0.373843> speed <114.382761> / animSpeed; 
			turn rthigh to x-axis <25> speed <371.12> / animSpeed; 
			turn rthigh to z-axis <-1.04> speed <75.7> / animSpeed; 
			turn rthigh to y-axis <-0.975> speed <31.25> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:32
			//turn lfoot to x-axis <3.635010> speed <1303.925050> / animSpeed; 
			//turn lfoot to z-axis <-6.350171> speed <70.450323> / animSpeed; 
			//turn lfoot to y-axis <-2.491368> speed <91.408108> / animSpeed; 
			turn lknee to x-axis <0.643623> speed <541.405473> / animSpeed; 
			turn lknee to z-axis <1.906281> speed <18.202251> / animSpeed; 
			turn lknee to y-axis <0.014545> speed <28.741805> / animSpeed; 
			turn lleg to x-axis <-5.504502> speed <54.815073> / animSpeed; 
			turn lleg to z-axis <1.555275> speed <8.454562> / animSpeed; 
			turn lleg to y-axis <-2.302874> speed <8.191873> / animSpeed; 
			turn lthigh to x-axis <-1.59> speed <430.5> / animSpeed; 
			turn lthigh to z-axis <1.75> speed <35.8> / animSpeed; 
			turn lthigh to y-axis <-.757> speed <4.7> / animSpeed; 
			move pelvis to y-axis [-0.430000] speed [26] / animSpeed; 
			turn pelvis to x-axis <3.299998> speed <99.000036> / animSpeed; 
			turn pelvis to y-axis <3.749998> speed <112.500029> / animSpeed; 
			//turn rfoot to x-axis <-2.631426> speed <1150.192505> / animSpeed; 
			turn rknee to x-axis <25.001153> speed <390.905062> / animSpeed; 
			turn rknee to z-axis <0.615286> speed <39.629771> / animSpeed; 
			turn rknee to y-axis <-1.938775> speed <3.163436> / animSpeed; 
			turn rleg to x-axis <-33.503249> speed <1137.722138> / animSpeed; 
			turn rleg to z-axis <1.376570> speed <59.839061> / animSpeed; 
			turn rleg to y-axis <2.130256> speed <52.692376> / animSpeed; 
			turn rthigh to x-axis <3.565> speed <403.8> / animSpeed; 
			turn rthigh to z-axis <0.95> speed <59.9> / animSpeed; 
			turn rthigh to y-axis <-0.791> speed <5.479> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:36
			//turn lfoot to x-axis <-45.174461> speed <1464.284129> / animSpeed; 
			//turn lfoot to z-axis <-8.711228> speed <70.831730> / animSpeed; 
			//turn lfoot to y-axis <-2.849490> speed <10.743672> / animSpeed; 
			turn lknee to x-axis <-15.469228> speed <483.385509> / animSpeed; 
			turn lknee to z-axis <1.487861> speed <12.552627> / animSpeed; 
			turn lknee to y-axis <1.188732> speed <35.225604> / animSpeed; 
			turn lleg to x-axis <10> speed <1124.900652> / animSpeed; 
			turn lleg to z-axis <0.432714> speed <33.676850> / animSpeed; 
			turn lleg to y-axis <-0.824043> speed <44.364927> / animSpeed; 
			turn lthigh to x-axis <14.23> speed <474.6> / animSpeed; 
			turn lthigh to z-axis <3.207> speed <43.6> / animSpeed; 
			turn lthigh to y-axis <-0.564> speed <5.8> / animSpeed; 
			move pelvis to y-axis [0.000000] speed [13] / animSpeed; 
			turn pelvis to x-axis <-0.000000> speed <98.999946> / animSpeed; 
			turn pelvis to y-axis <0.000000> speed <112.499952> / animSpeed; 
			//turn rfoot to x-axis <38.366183> speed <1229.928296> / animSpeed; 
			turn rknee to x-axis <-3.925581> speed <867.802018> / animSpeed; 
			turn rknee to z-axis <-1.245253> speed <55.816170> / animSpeed; 
			turn rknee to y-axis <-0.489125> speed <43.489496> / animSpeed; 
			turn rleg to x-axis <-19.001783> speed <435.043999> / animSpeed; 
			turn rleg to z-axis <-0.676431> speed <61.590037> / animSpeed; 
			turn rleg to y-axis <1.782341> speed <10.437450> / animSpeed; 
			turn rthigh to x-axis <-14.34> speed <537.25> / animSpeed; 
			turn rthigh to z-axis <-0.63> speed <47.52> / animSpeed; 
			turn rthigh to y-axis <1.017> speed <54.26> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
	}
}
// Call this from MotionControl()!
StopWalking() {
	move pelvis to y-axis [0.000000] speed [2.2];
	//turn lfoot to x-axis <-0.511674> speed <366.071032>;
	//turn lfoot to y-axis <-0.309917> speed <22.852027>;
	//turn lfoot to z-axis <10.877619> speed <146.916357>;
	turn lknee to x-axis <-0.719968> speed <105>;
	turn lknee to y-axis <-0.176804> speed <6.5>;
	turn lknee to z-axis <-2.895248> speed <11>;
	turn lleg to x-axis <4.602746> speed <171>;
	turn lleg to y-axis <4.217571> speed <12.6>;
	turn lleg to z-axis <-2.496718> speed <7.3>;
	turn lthigh to x-axis <1.12> speed <47>;
	turn lthigh to y-axis <1.495> speed <5.15>;
	turn lthigh to z-axis <-3.177> speed <16>;
	turn pelvis to x-axis <-4.999999> speed <12.5>;
	turn pelvis to y-axis <0.000000> speed <13.6>;
	//turn rfoot to x-axis <0.932360> speed <371.694412>;
	//turn rfoot to y-axis <0.474851> speed <22.005134>;
	//turn rfoot to z-axis <-10.296852> speed <64.797402>;
	turn rknee to x-axis <-0.710460> speed <112>;
	turn rknee to y-axis <0.215404> speed <4.6>;
	turn rknee to z-axis <2.955248> speed <10.9>;
	turn rleg to x-axis <3.792608> speed <166.5>;
	turn rleg to y-axis <-3.940970> speed <14.6>;
	turn rleg to z-axis <2.397633> speed <8>;
	turn rthigh to x-axis <0.87> speed <44.7>;
	turn rthigh to y-axis <-1.376> speed <6>;
	turn rthigh to z-axis <3.05> speed <9.4>;
}
UnitSpeed(){
 maxSpeed = get MAX_SPEED; // this returns cob units per frame i think
 animFramesPerKeyframe = 5; //we need to calc the frames per keyframe value, from the known animtime
 maxSpeed = maxSpeed + (maxSpeed /(2*animFramesPerKeyframe)); // add fudge
 while(TRUE){
  animSpeed = (get CURRENT_SPEED);
  if (animSpeed<1) animSpeed=1;
  animSpeed = (maxSpeed * 10) / animSpeed; 
  //get PRINT(maxSpeed, animFramesPerKeyframe, animSpeed);
  if (animSpeed<2) animSpeed=4;
  if (animspeed>20) animSpeed = 20;
  sleep 131;
 }
}



#define BASEPIECE pelvis
#define HITSPEED <65.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

StartMoving()
{
	signal SIG_WALK;
	set-signal-mask SIG_WALK;
	bMoving = 1;
	start-script UnitSpeed();
	start-script walk();
}

StopMoving()
{
	signal SIG_WALK;
	bMoving = 0;
	start-script StopWalking();
}


Create(){
	spin AA_turret_radar around y-axis speed <100>; //Spin(dish, y-axis, 2.5)
	gun_1 = 0;
	torsoaim = 0;
	miniguncount = 0;
	missile_count=0;
	moveSpeed = get MAX_SPEED;
	animSpeed = 12;
	hide AA_turret_gun_1_flare;
	hide AA_turret_gun_2_flare;
	hide Left_turret_gun_flare;
	hide Right_turret_gun_flare;
	hide Torso_turret_left_gun_flare;
	hide Torso_turret_right_gun_flare;
	hide Ref_Point;
	hide mis1;
	hide mis2;
	hide mis3;
	hide mis4;
}

RestoreAfterDelay(){
	set-signal-mask SIG_AIM_1;
	sleep 3000;
	turn Main_hull to  y-axis <0> speed <105.0000> ; //-- Turn(torso, y-axis, 0, math.rad(305))
	turn AA_turret_main to y-axis <0> speed <180>;
	turn AA_turret_gun_hull to x-axis <0> speed <180>;
	turn Left_turret_main to y-axis <0> speed <120>;
	turn Right_turret_main to y-axis <0> speed <120>;
	turn Left_turret_main to x-axis <0> speed <120>;
	turn Right_turret_main to x-axis <0> speed <120>;
	turn Torso_turret_main to y-axis <0> speed <120>;
	turn Torso_turret_left_hull_2 to x-axis <0> speed <120>;
	turn Torso_turret_right_hull_2 to x-axis <0> speed <120>;
	torsoaim = 0;
	wpn1_lasthead = 1000000;
}

SweetSpot(piecenum)
{
	piecenum = Main_hull;
	return (0);
}

QueryWeapon1(piecenum) //Hull Rotation
{
	if(missile_count==0)
	{
		piecenum=mis1;	
	}
	if(missile_count==1)
	{
		piecenum=mis2;
	}
	if(missile_count==2)
	{
		piecenum=mis3;
	}
	if(missile_count==3)
	{
		piecenum=mis4;
	}
}

AimFromWeapon1(piecenum)
{
	piecenum = Main_hull;
	return (0);
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	turn Main_hull to y-axis heading speed <90.0000> ; //-- Turn(torso, y-axis, heading, math.rad(300))
	var gun_xz;
    gun_xz = get PIECE_XZ(Main_hull);                                //get packed gun coordinates
    var gun_x;
    gun_x = (gun_xz & 0xffff0000) / 0x00010000;                //unpack x coordinates of gun (credit for unpack code goes to Beherith)
    var gun_z;
    gun_z = (gun_xz & 0x0000ffff);                            //unpack z coordinates of gun
    
    var turret_xz;
    turret_xz = get PIECE_XZ(Torso_turret_main);                        //get packed turret coordinates
    var turret_x;
    turret_x = (turret_xz & 0xffff0000) / 0x00010000;        //unpack x coordinates of turret
    var turret_z;
    turret_z = (turret_xz & 0x0000ffff);                    //unpack z coordinates of turret
    
    var aim_x;
    var aim_z;
    aim_x = gun_x - turret_x;                                //calculate relative coordinates of the gun to the turret (how far away it is in each direction)
    aim_z = gun_z - turret_z;
    
    
    var hull_xz;
    hull_xz = get PIECE_XZ(pelvis);                            //get packed hull coordinates
    var hull_x;
    hull_x = (hull_xz & 0xffff0000) / 0x00010000;            //unpack x coordinates of hull
    var hull_z;
    hull_z = (hull_xz & 0x0000ffff);                        //unpack z coordinates of hull
    
    var smoke_xz;
    smoke_xz = get PIECE_XZ(Ref_Point);                            //get packed smoke coordinates
    var smoke_x;
    smoke_x = (smoke_xz & 0xffff0000) / 0x00010000;            //unpack x coordinates of smoke
    var smoke_z;
    smoke_z = (smoke_xz & 0x0000ffff);                        //unpack z coordinates of smoke
    
    var face_x;
    var face_z;
    face_x = hull_x - smoke_x;                                //calculate relative coordinates of the hull to the smoke (how far away it is in each direction)
    face_z = hull_z - smoke_z;
	
	var cauaim;
    var cauface;
    cauaim = get ATAN(aim_z, aim_x);                        //use arctan (ATAN) to calculate the angle of the turret. The result is in cau, which is the unit this code format uses for angles. Its up to 32768 (180 degrees), positive or negative depending on direction
    cauface = get ATAN(face_z, face_x);                        //use arctan (ATAN) to calculate the angle of the hull. The result is in cau, which is the unit this code format uses for angles. Its up to 32768 (180 degrees), positive or negative depending on direction
    
    //var torsoaim;
    torsoaim = cauface - cauaim;                                //calculate angle of turret relative to the hull
	//torsoaim = heading;
	if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > 1300) AND ((get ABS(wpn1_lasthead - heading)) < 64236)))
	{
		wpn1_lasthead = 1000000;
		wait-for-turn Main_hull around y-axis;
	}
	wpn1_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	return (1);
}

Shot1(zero)
{
	signal SIG_FIRE1;
	set-signal-mask SIG_FIRE1;
	sleep 32;
	++missile_count;
	if(missile_count>=4)
	{
		missile_count=0;
	}
	return(1);
}

QueryWeapon2(piecenum) //R Shotgun
{
	piecenum = Right_turret_gun_flare;
	return (0);
}

AimFromWeapon2(piecenum)
{
	piecenum = Right_turret_main;
	return (0);
}

AimWeapon2(heading, pitch) //pew pew
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn Right_turret_main to y-axis heading - torsoaim speed <100.0000>; //-- Turn(torso, y-axis, heading, math.rad(300))
	turn Right_turret_main to x-axis -1*pitch speed <100.0000>;
	if (((get ABS(wpn2_lasthead - heading)) > 65536) OR(((get ABS(wpn2_lasthead - heading)) > 2500) AND ((get ABS(wpn2_lasthead - heading)) < 64236)))
	{
		wpn2_lasthead = 1000000;
		wait-for-turn Right_turret_main around y-axis;
		wait-for-turn Right_turret_main around x-axis;
	}
	wpn2_lasthead = heading;
	return (1);
}

FireWeapon2()
{
	emit-sfx 1024 from Right_turret_gun_flare;
	move Right_turret_main to z-axis [-5.5] speed [27.5];
	sleep 200;
	move Right_turret_main to z-axis [0] speed [4.4];
	return (1);
}

QueryWeapon3(piecenum) //L Railgun
{
	piecenum = Left_turret_gun_flare;
	return (0);
}

AimFromWeapon3(piecenum)
{
	piecenum = Left_turret_main;
	return (0);
}

AimWeapon3(heading, pitch) //pew pew
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn Left_turret_main to y-axis heading - torsoaim speed <100.0000> ; //-- Turn(torso, y-axis, heading, math.rad(300))
	turn Left_turret_main to x-axis -1*pitch speed <100.0000> ;
	if (((get ABS(wpn3_lasthead - heading)) > 65536) OR(((get ABS(wpn3_lasthead - heading)) > 2500) AND ((get ABS(wpn3_lasthead - heading)) < 64236)))
	{
		wpn3_lasthead = 1000000;
		wait-for-turn Left_turret_main around y-axis;
		wait-for-turn Left_turret_main around x-axis;
	}
	wpn3_lasthead = heading;
	return (1);
}

FireWeapon3()
{
	emit-sfx 1024 from Left_turret_gun_flare;
	move Left_turret_gun to z-axis [-5.5] speed [27.5];
	sleep 200;
	move Left_turret_gun to z-axis [0] speed [4.4];
	return (1);
}

QueryWeapon4(piecenum) //Mid Guns
{
	if(miniguncount == 0)
	{
		piecenum = Torso_turret_Right_gun;
	}
	if(miniguncount == 1)
	{
		piecenum = Torso_turret_left_gun;
	}
	return (0);
}

AimFromWeapon4(piecenum)
{
	piecenum = Torso_turret_main;
	return (0);
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	turn Torso_turret_main to y-axis heading - torsoaim speed <200.0000>; //-- Turn(torso, y-axis, heading, math.rad(300))
	turn Torso_turret_right_hull_2 to x-axis -1*pitch speed <200.0000>;
	turn Torso_turret_left_hull_2 to x-axis -1*pitch speed <200.0000>;
	if (((get ABS(wpn4_lasthead - heading)) > 65536) OR(((get ABS(wpn4_lasthead - heading)) > 1300) AND ((get ABS(wpn4_lasthead - heading)) < 64236)))
	{
		wpn4_lasthead = 1000000;
		wait-for-turn Torso_turret_main around y-axis;
		wait-for-turn Torso_turret_left_hull_1 around x-axis;
		wait-for-turn Torso_turret_left_hull_2 around x-axis;
	}
	wpn4_lasthead = heading;
	return (1);
}

FireWeapon4()
{
	return (1);
}

Shot4(zero)
{
	signal SIG_FIRE2;
	set-signal-mask SIG_FIRE2;
	
	if(miniguncount == 0)
	{
		emit-sfx 1024 + 0 from Torso_turret_right_gun_flare;
	}
	if(miniguncount == 1)
	{
		emit-sfx 1024 + 0 from Torso_turret_left_gun_flare;
	}
	sleep 32;
	++miniguncount;
	if(miniguncount>=2)
	{
		miniguncount=0;
	}
	return(1);
}

QueryWeapon5(piecenum) //top AA
{
	if(gun_1 == 0)
	{
		piecenum = AA_turret_gun_1;
	}
	if(gun_1 == 1)
	{
		piecenum = AA_turret_gun_2;
	}
	return (0);
}

AimFromWeapon5(piecenum)
{
	piecenum = Torso_turret_main;
	return (0);
}

AimWeapon5(heading, pitch) //pew pew
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;
	turn AA_turret_main to  y-axis heading - torsoaim speed <200.0000> ; //-- Turn(torso, y-axis, heading, math.rad(300))
	turn AA_turret_gun_hull to x-axis -1*pitch speed <200>;
	wait-for-turn AA_turret_main around y-axis;
	wait-for-turn AA_turret_gun_hull around x-axis;
	return (1);
}

FireWeapon5()
{
	if(gun_1 == 0)
	{
		emit-sfx 1024 + 0 from AA_turret_gun_1_flare;
	}
	if(gun_1 == 1)
	{
		emit-sfx 1024 + 0 from AA_turret_gun_2_flare;
	}
	sleep 32;
	++gun_1;
	if(gun_1>=2)
	{
		gun_1=0;
	}
	return (1);
}

//-----------------------------------------------------------------------
//-- death stuffs
//-----------------------------------------------------------------------

Killed( severity, corpsetype )
{
	corpsetype = 1;
	return(corpsetype);
}
