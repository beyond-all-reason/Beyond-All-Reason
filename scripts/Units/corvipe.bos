
#include "../recoil_common_includes.h"

piece  base, turret, flare, door1, door2, exhaust, aimpoint, lock1, lock2;

static-var  restore_delay, is_open;
static-var  Stunned;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_TURNON 4

#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 0

#include "../unit_hitbyweaponid_and_smoke.h"

Close()
{
	set-signal-mask SIGNAL_AIM1;
	is_open = 0;
	move turret to y-axis [-44.0] speed [69.0];
	wait-for-move turret along y-axis;
	move door1 to x-axis [8.54000000] speed [47.600000];
	move door2 to x-axis [-8.54000000] speed [47.600000];
	move lock1 to z-axis [0] speed [12.700000];
	move lock2 to z-axis [0] speed [12.700000];
	wait-for-move door1 along x-axis;
	set ARMORED to 1;
}

Open()
{
	set ARMORED to 0;
	move door1 to x-axis [-5] speed [47.600000];
	move door2 to x-axis [5] speed [47.600000];
	move lock1 to z-axis [3.6000000] speed [12.700000];
	move lock2 to z-axis [-3.6000000] speed [12.700000];
	wait-for-move door1 along x-axis;
	move turret to y-axis [0] speed [69.0];
	wait-for-move turret along y-axis;
	is_open = 1;
}

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	start-script Close();
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide flare;
	restore_delay = 3000;
	is_open = 0;
	SLEEP_UNTIL_UNITFINISHED;
	// close and armor once construction is done
	// only if no target in range when done
	sleep 1000;
	if ( is_open == 0 )
	{
		start-script Close();
	}
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	if ( is_open == 0 )
	{
		start-script Open();
		start-script RestoreAfterDelay();
	}
	while( is_open == 0 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <200.0>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 + 0 from exhaust;
}

QueryWeapon1(pieceIndex)
{
	if (is_open == 1)
	{
		pieceIndex = flare;
	}
	else
	{
		pieceIndex = aimpoint;
	}
}



AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimpoint;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode door1 type BITMAPONLY | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		explode lock1 type BITMAPONLY | NOHEATCLOUD;
		explode lock2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lock1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lock2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lock1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lock2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lock1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lock2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}