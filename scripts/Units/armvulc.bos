
#include "../recoil_common_includes.h"

piece  base, flare, turret, barrel01, barrel02, barrel03, barrel04,
       housing01, housing02, housing03, housing04, spindle, neck, back;

static-var  gun_1, restore_delay, shotcount, spin_speed, last_primary_heading, last_primary_pitch;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_SHOOT1 16


Create()
{
	hide flare;
	hide flare;
	//gun_1 = base;
	spin flare around z-axis speed <250.060440>;
	restore_delay = 500;
	spin_speed = 230;
	last_primary_heading = -1000000;
	last_primary_pitch = -1000000;
	move back to z-axis [4.0] speed [4.0];
	return (0);
}

lua_UnitScriptLight(lightIndex, count) 
{
	return 0;
}


#define BASEPIECE base
#define MAXTILT 0
#include "../unit_hitbyweaponid_and_smoke.h"

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask SIGNAL_AIM1;
	move back to z-axis [4.0] speed [4.0];
	return (0);
}

AimWeapon1(heading, pitch)
{
	move back to z-axis [-6.0] speed [12.0];
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;

	// values in <> are degrees per second
	// otherwise angles are in COB angular unit (cau) - There are 65536 cau in a circle
	// In general, 6 cau per frame ~= 1 degree per second
	turn turret to y-axis heading speed <15.0>;
	turn neck to x-axis <0.0> - pitch speed <6.0>;
	// only wait-for-turn if it takes more than 3 frames to finish the turn
	if ( (get ABS(last_primary_heading - heading)>270) OR (get ABS(last_primary_pitch - pitch)>108) )
	{
		// seems to take 3 frames for wait-for-turn to process
		wait-for-turn turret around y-axis;
		wait-for-turn neck around x-axis;
	}
	last_primary_heading = heading;
	last_primary_pitch = pitch;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 + 0 from flare;

	//make spindle turn faster as unit gains XP and decreases reload time
	//GET WEAPON_RELOADSTATE is in frames, we need seconds (factor of 30)
	//use -1 so animation finishes 1 frame before it is ready to fire again
	// use 90 here so spindle turns 90 degrees during its reload time
	spin_speed = 30*90/((GET WEAPON_RELOADSTATE(1)) - (GET GAME_FRAME) - 1);

	// bleh, <30>*90/((GET WEAPON_RELOADSTATE(1)) - (GET GAME_FRAME) - 1); 
	// is not equal to
	// <90>*30/((GET WEAPON_RELOADSTATE(1)) - (GET GAME_FRAME) - 1); 
	// so just use <1>*30*90/((GET WEAPON_RELOADSTATE(1)) - (GET GAME_FRAME) - 1);
	// Weird math?

	if( gun_1 == 1 )
	{
		shotcount = shotcount + 1;
		move barrel01 to z-axis [-15.0] now;
		move housing01 to z-axis [-6.0] now;
		move spindle to z-axis [-2.0] now;
		//move back to z-axis [-6.0] now;
		call-script lua_UnitScriptLight(1, shotcount);
		move barrel01 to z-axis [0.0] speed [8.0];
		move housing01 to z-axis [0.0] speed [1.500000];
		move spindle to z-axis [0.0] speed [11.0];
		//move back to z-axis [4.0] speed [10.0];
		turn spindle to z-axis <90.0> speed <1>*spin_speed;
	}
	if( gun_1 == 2 )
	{
		shotcount = shotcount + 1;
		move barrel02 to z-axis [-15.0] now;
		move housing02 to z-axis [-6.0] now;
		move spindle to z-axis [-2.0] now;
		//move back to z-axis [-6.0] now;
		call-script lua_UnitScriptLight(2, shotcount);
		move barrel02 to z-axis [0.0] speed [8.0];
		move housing02 to z-axis [0.0] speed [1.500000];
		move spindle to z-axis [0.0] speed [11.0];
		//move back to z-axis [4.0] speed [10.0];
		turn spindle to z-axis <180.0> speed <1>*spin_speed;
	}
	if( gun_1 == 3 )
	{
		shotcount = shotcount + 1;
		move barrel03 to z-axis [-15.0] now;
		move housing03 to z-axis [-6.0] now;
		move spindle to z-axis [-2.0] now;
		//move back to z-axis [-6.0] now;
		call-script lua_UnitScriptLight(3, shotcount);
		move barrel03 to z-axis [0.0] speed [8.0];
		move housing03 to z-axis [0.0] speed [1.500000];
		move spindle to z-axis [0.0] speed [11.0];
		//move back to z-axis [4.0] speed [10.0];
		turn spindle to z-axis <270.0> speed <1>*spin_speed; 
	}
	if( gun_1 == 4 )
	{
		shotcount = shotcount + 1;
		move barrel04 to z-axis [-15.0] now;
		move housing04 to z-axis [-6.0] now;
		move spindle to z-axis [-2.0] now;
		//move back to z-axis [-6.0] now;
		call-script lua_UnitScriptLight(4, shotcount);
		move barrel04 to z-axis [0.0] speed [8.0];
		move housing04 to z-axis [0.0] speed [1.500000];
		move spindle to z-axis [0.0] speed [11.0];
		//move back to z-axis [4.0] speed [10.0];
		turn spindle to z-axis <0.0> speed <1>*spin_speed;
	}
	++gun_1;
	if( gun_1 == 5 )
	{
		gun_1 = flare;
	}

	// After 1 second, last_primary_heading and last_primary_pitch should be reset
	signal SIGNAL_SHOOT1;
	set-signal-mask SIGNAL_SHOOT1;
	sleep 1000;
	last_primary_heading = -1000000;
	last_primary_pitch = -1000000;

}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = spindle;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode neck type BITMAPONLY | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		explode spindle type BITMAPONLY | NOHEATCLOUD;
		explode housing03 type BITMAPONLY | NOHEATCLOUD;
		explode barrel03 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode housing01 type BITMAPONLY | NOHEATCLOUD;
		explode barrel01 type BITMAPONLY | NOHEATCLOUD;
		explode housing04 type BITMAPONLY | NOHEATCLOUD;
		explode barrel04 type BITMAPONLY | NOHEATCLOUD;
		explode housing02 type BITMAPONLY | NOHEATCLOUD;
		explode barrel02 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode spindle type FALL | NOHEATCLOUD;
		explode housing03 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel03 type FALL | NOHEATCLOUD;
		explode housing01 type FALL | NOHEATCLOUD;
		explode barrel01 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode housing04 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel04 type FALL | NOHEATCLOUD;
		explode housing02 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel02 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode neck type BITMAPONLY | NOHEATCLOUD;
		explode flare type SMOKE | FALL | NOHEATCLOUD;
		explode spindle type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode housing03 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel03 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode housing01 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel01 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode housing04 type SMOKE | FALL | NOHEATCLOUD;
		explode barrel04 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode housing02 type SMOKE | FALL | NOHEATCLOUD;
		explode barrel02 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode neck type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode spindle type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode housing03 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel03 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode housing01 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel01 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode housing04 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel04 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode housing02 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel02 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
