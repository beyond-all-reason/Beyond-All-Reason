
#include "../recoil_common_includes.h"

piece  base, turret, sleeve,barrel1,  barrel2, barrel3,flare1, flare2, flare3,  foreturret, foregun, aftturret, aftgun, foreflare, aftflare, wake, bow;

static-var  gun_1, restore_delay, gun_2, aimDir3, aimDir;

// Signal definitions
#define SIGNAL_AIM2 512
#define SIGNAL_AIM1 256

#define RB_MASS 40
#define RB_LENGTH 8
#define RB_WIDTH 3
#define RB_PITCH_ACCELERATION 10
#define RB_ROLL_ACCELERATION 8
#define RB_RECOIL_ENERGY_1 700
#define RB_RECOIL_ENERGY_3 250
#define RB_BOWSPLASH_PIECE bow

#include "../bar_ships_common.h"

// -------------------------------- END WARSHIP --------------------

Create()
{
	hide bow;
	hide wake;
	hide flare2;
	hide flare3;
	hide flare1;
	hide aftflare;
	hide foreflare;
	//hide ground;
	hide flare1;
	hide flare2;
	hide foreflare;
	hide aftflare;
	gun_1 = 0;
	gun_2 = 0;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turret to y-axis <0.0> speed <55.0>;
	turn sleeve to x-axis <0.0> speed <15.0>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

RestoreDeckLaser()
{
	sleep 3000;
	set-signal-mask 0;
	turn foreturret to y-axis <0.0> speed <150.0>;
	turn foregun to x-axis <0.0> speed <100.0>;
	turn aftturret to y-axis <0.0> speed <150.0>;
	turn aftgun to x-axis <0.0> speed <100.0>;
}


StartMoving(reversing)
{
	RB_bounce_frame = RAND(0, <180>);
}

StopMoving()
{
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	if( gun_2 )
	{
		turn aftturret to y-axis heading speed <300.0>;
		turn aftgun to x-axis <0.0> - pitch speed <200.0>;
		wait-for-turn aftturret around y-axis;
		wait-for-turn aftgun around x-axis;
		start-script RestoreDeckLaser();
		return (1);
	}
	else
	{
		turn foreturret to y-axis heading speed <300.0>;
		turn foregun to x-axis <0.0> - pitch speed <200.0>;
		wait-for-turn foreturret around y-axis;
		wait-for-turn foregun around x-axis;
		start-script RestoreDeckLaser();
		return (1);
	}
}

FireWeapon2()
{
	gun_2 = !gun_2;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = foregun + gun_2;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = foreflare + gun_2;
}

AimWeapon3(heading, pitch)
{
	aimDir3 = heading;
	return (1);
}

FireWeapon3()
{
	sleep 150;
	
	//call-script RecoilRockBoat(aimDir3, RB_RECOIL_ENERGY_3);
	RB_RECOILBOAT(aimDir3, RB_RECOIL_ENERGY_3);
}

AimFromWeapon3(pieceIndex)
{
	pieceIndex = base;
}

QueryWeapon3(pieceIndex)
{
	pieceIndex = base;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	aimDir = heading;
	
	turn turret to y-axis heading speed <110.0>;	
	turn sleeve to x-axis RB_AIMPITCHCORRECTION(heading) - pitch speed <30.0>;
	
	wait-for-turn turret around y-axis;

	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	//start-script RockZ(-7, aimDir);
	if( gun_1 ==0)
	{
	    emit-sfx 1024 + 0 from flare1;
		move barrel1 to z-axis [-2.300000] now;
		move barrel1 to z-axis [0.0] speed [1.500000];
	}
	else if (gun_1==1)
	{
	    emit-sfx 1024 + 0 from flare2;
		move barrel2 to z-axis [-2.300000] now;
		move barrel2 to z-axis [0.0] speed [1.500000];
	}else
	{
	    emit-sfx 1024 + 0 from flare3;
		move barrel3 to z-axis [-2.300000] now;
		move barrel3 to z-axis [0.0] speed [1.500000];
	}
	gun_1= ( gun_1 + 1 ) % 3;
	
	sleep 65 - 32 * RB_FRAMES;
	//call-script RecoilRockBoat(aimDir, RB_RECOIL_ENERGY_1);
	RB_RECOILBOAT(aimDir, RB_RECOIL_ENERGY_1);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare1 + gun_1;
}


Killed(severity, corpsetype)
{
	
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FALL | NOHEATCLOUD;
		explode barrel1 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
