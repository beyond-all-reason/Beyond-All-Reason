
#include "../recoil_common_includes.h"

#define SIGNAL_MOVE 1
#define SIGNAL_BUILD 2

piece base, tyre2, tyre3, ltyre, lcover, rtyre, rcover,cabin ,w_glass, container, rdoor, ldoor, box, loturret, upturret, nano, beam, cagelight, cagelight_emit;

static-var  readyToBuild,restore_delay, currentSpeed, moveSpeed, wheelSpeed;


#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <0.1>
#define TB_BANK_Z <0.1> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"


WheelControl()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		wheelSpeed = currentSpeed * 20; //original speed 7
		if (currentSpeed<1) currentSpeed=1;	// prevent infinite timing
		spin tyre2 around x-axis speed  (<1> * wheelSpeed);         
		spin tyre3 around x-axis speed  (<1> * wheelSpeed);			
		spin ltyre around x-axis speed  (<1> * wheelSpeed);
		spin rtyre around x-axis speed  (<1> * wheelSpeed);			 
		sleep 98; //200
	}
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	start-script WheelControl();
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

#include "../unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide beam;
	hide cagelight_emit;
	restore_delay = 6000;
	readyToBuild = FALSE;
	call-script TB_Init();
	moveSpeed = get MAX_SPEED;
	SLEEP_UNTIL_UNITFINISHED;
	start-script WheelControl();
}

StartBuilding(heading, pitch)
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;
	if (!readyToBuild){
		turn ldoor to z-axis <-210> speed <360>;
		turn rdoor to z-axis <210> speed <360>;
		wait-for-turn ldoor around z-axis;

		move loturret to y-axis [7] speed [12];
		move upturret to y-axis [5] speed [12];
		wait-for-move upturret along z-axis;
		readyToBuild = TRUE;
	}

	show beam;
	turn upturret to y-axis heading speed <160.038462>;
	wait-for-turn upturret around y-axis;

	set INBUILDSTANCE to 1;

	show cagelight_emit;
	spin cagelight around y-axis speed <250>;
}

StopBuilding()
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;
	
	hide beam;
	hide cagelight_emit;
	turn cagelight to y-axis <0> speed <1000>;

	sleep 6000;
	set INBUILDSTANCE to 0;
	readyToBuild = FALSE;
	
	turn loturret to y-axis <0.0> speed <160.038462>;
	turn upturret to y-axis <0.0> speed <160.038462>;
	wait-for-turn loturret around y-axis;

	move loturret to y-axis [0] speed [12];
	move upturret to y-axis [0] speed [12];
	wait-for-move upturret along z-axis;
	
	turn ldoor to z-axis <0> speed <240>;
	turn rdoor to z-axis <0> speed <240>;
	wait-for-turn ldoor around z-axis;
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = nano;

}




Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		
		
		
		explode cabin type BITMAPONLY | NOHEATCLOUD;
		explode ltyre type BITMAPONLY | NOHEATCLOUD;
		
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		
		
		explode container type FALL | NOHEATCLOUD;
		explode cabin type FALL | NOHEATCLOUD;
		explode ltyre type FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		
		
		explode container type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode cabin type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ltyre type FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		
		
		explode container type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode cabin type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode ltyre type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		
	return corpsetype;
}


