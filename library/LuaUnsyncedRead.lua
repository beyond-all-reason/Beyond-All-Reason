
---!!! DO NOT MANUALLY EDIT THIS FILE !!!
---Generated by lua-doc-extractor 0.0.1
---https://github.com/rhys-vdw/lua-doc-extractor
---
---Date: Wed, 20 Nov 2024 13:06:36 GMT
---Source: rts/Lua/LuaUnsyncedRead.cpp
---
---@meta

---Callouts to get state
---
---@see rts/Lua/LuaUnsyncedRead.cpp

---Replay
---
---@section replay

---@return boolean? isReplay
function Spring.IsReplay() end

---@return number? timeInSeconds
function Spring.GetReplayLength() end

---Game/Menu Name
---
---@section gamename

---@return string name
function Spring.GetGameName() end

---@return string name name .. version from Modinfo.lua. E.g. "Spring: 1944 test-5640-ac2d15b".
function Spring.GetMenuName() end

---Profiling
---
---@section profiling

---@param profilerName string
---@param frameData boolean? (Default: false)
---@return number total in ms
---@return number current in ms
---@return number max_dt
---@return number time_pct
---@return number peak_pct
---@return table<number,number>? frameData Table where key is the frame index and value is duration.
function Spring.GetProfilerTimeRecord(profilerName, frameData) end

---@return string[] profilerNames
function Spring.GetProfilerRecordNames() end

---@return number luaHandleAllocedMem in kilobytes
---@return number luaHandleNumAllocs divided by 1000
---@return number luaGlobalAllocedMem in kilobytes
---@return number luaGlobalNumAllocs divided by 1000
---@return number luaUnsyncedGlobalAllocedMem in kilobytes
---@return number luaUnsyncedGlobalNumAllocs divided by 1000
---@return number luaSyncedGlobalAllocedMem in kilobytes
---@return number luaSyncedGlobalNumAllocs divided by 1000
function Spring.GetLuaMemUsage() end

---@return number usedMem in MB
---@return number availableMem in MB
function Spring.GetVidMemUsage() end

---Get a timer with millisecond resolution
---
---@return integer
function Spring.GetTimer() end

---Get a timer with microsecond resolution
---
---@return integer
function Spring.GetTimerMicros() end

---Get a timer for the start of the frame
---
---This should give better results for camera interpolations
---
---@param lastFrameTime boolean? (Default: false) whether to use last frame time instead of last frame start
---@return integer
function Spring.GetFrameTimer(lastFrameTime) end

---@param endTimer integer
---@param startTimer integer
---@param returnMs boolean? (Default: false) whether to return `timeAmount` in milliseconds as opposed to seconds
---@param fromMicroSecs boolean? (Default: false) whether timers are in microseconds instead of milliseconds
---@return number timeAmount
function Spring.DiffTimers(endTimer, startTimer, returnMs, fromMicroSecs) end

---Screen/Rendering Info
---
---@section screeninfo

---@return number numDisplays as returned by `SDL_GetNumVideoDisplays`
function Spring.GetNumDisplays() end

---Get main view geometry (map and game rendering)
---
---@return number viewSizeX in px
---@return number viewSizeY in px
---@return number viewPosX offset from leftmost screen left border in px
---@return number viewPosY offset from bottommost screen bottom border in px
function Spring.GetViewGeometry() end

---Get dual view geometry (minimap when enabled)
---
---@return number dualViewSizeX in px
---@return number dualViewSizeY in px
---@return number dualViewPosX offset from leftmost screen left border in px
---@return number dualViewPosY offset from bottommost screen bottom border in px
function Spring.GetDualViewGeometry() end

---Get main window geometry
---
---@return number winSizeX in px
---@return number winSizeY in px
---@return number winPosX in px
---@return number winPosY in px
---@return number windowBorderTop in px
---@return number windowBorderLeft in px
---@return number windowBorderBottom in px
---@return number windowBorderRight in px
function Spring.GetWindowGeometry() end

---Get main window display mode
---
---@return number width in px
---@return number height in px
---@return number bits per pixel
---@return number refresh rate in Hz
function Spring.GetWindowDisplayMode() end

---Get screen geometry
---
---@param displayIndex number? (Default: -1)
---@param queryUsable boolean? (Default: false)
---@return number screenSizeX in px
---@return number screenSizeY in px
---@return number screenPosX in px
---@return number screenPosY in px
---@return number windowBorderTop in px
---@return number windowBorderLeft in px
---@return number windowBorderBottom in px
---@return number windowBorderRight in px
---@return number? screenUsableSizeX in px
---@return number? screenUsableSizeY in px
---@return number? screenUsablePosX in px
---@return number? screenUsablePosY in px
function Spring.GetScreenGeometry(displayIndex, queryUsable) end

---Get minimap geometry
---
---@return number minimapPosX in px
---@return number minimapPosY in px
---@return number minimapSizeX in px
---@return number minimapSizeY in px
---@return boolean minimized
---@return boolean maximized
function Spring.GetMiniMapGeometry() end

---Get minimap rotation
---
---@return number amount in radians
function Spring.GetMiniMapRotation() end

---@return string|false position "left"|"right" when dual screen is enabled, false when not
function Spring.GetMiniMapDualScreen() end

---Get vertices from currently active selection box
---
---Returns nil when selection box is inactive
---
---@return number? left
---@return number? top
---@return number? right
---@return number? bottom
---@see Spring.GetUnitsInScreenRectangle
function Spring.GetSelectionBox() end

---@return boolean
function Spring.GetDrawSelectionInfo() end

---@param x number
---@param y number
---@return boolean isAbove
function Spring.IsAboveMiniMap(x, y) end

---@return number low_16bit
---@return number high_16bit
function Spring.GetDrawFrame() end

---
---Ideally, when running 30hz sim, and 60hz rendering, the draw frames should
---have and offset of either 0.0 frames, or 0.5 frames.
---
---When draw frames are not integer multiples of sim frames, some interpolation
---happens, and this timeoffset shows how far along it is.
---
---@return number? offset of the current draw frame from the last sim frame, expressed in fractions of a frame
function Spring.GetFrameTimeOffset() end

---Gets game time for drawing purposes
---
---Returns the game time, taking the interpolated draw frame into account.
---
---@return number game time in seconds

---@return number? lastUpdateSeconds
function Spring.GetLastUpdateSeconds() end

---@return boolean allowRecord
function Spring.GetVideoCapturingMode() end

---Unit attributes
---
---@section unitattributes

---@param unitID integer
---@return boolean? isAllied nil with unitID cannot be parsed
function Spring.IsUnitAllied(unitID) end

---@param unitID integer
---@return boolean? isSelected nil when unitID cannot be parsed
function Spring.IsUnitSelected(unitID) end

---@param unitID integer
---@return boolean? draw nil when unitID cannot be parsed
function Spring.GetUnitLuaDraw(unitID) end

---@param unitID integer
---@return boolean? nil when unitID cannot be parsed
function Spring.GetUnitNoDraw(unitID) end

---@param unitID integer
---@return boolean? nil when unitID cannot be parsed
function Spring.GetUnitEngineDrawMask(unitID) end

---@param unitID integer
---@return boolean? nil when unitID cannot be parsed
function Spring.GetUnitAlwaysUpdateMatrix(unitID) end

---@param unitID integer
---@return number? nil when unitID cannot be parsed
function Spring.GetUnitDrawFlag(unitID) end

---@param unitID integer
---@return boolean? nil when unitID cannot be parsed
function Spring.GetUnitNoMinimap(unitID) end

---@param unitID integer
---@return boolean? nil when unitID cannot be parsed
function Spring.GetUnitNoSelect(unitID) end

---@param unitID integer
---@return boolean? drawIcon
---`true` if icon is being drawn, `nil` when unitID is invalid, otherwise `false`.
function Spring.UnitIconGetDraw(unitID) end

---@param unitID integer
---@return number? scaleX nil when unitID cannot be parsed
---@return number scaleY
---@return number scaleZ
---@return number offsetX
---@return number offsetY
---@return number offsetZ
---@return number volumeType
---@return number useContHitTest
---@return number getPrimaryAxis
---@return boolean ignoreHits
function Spring.GetUnitSelectionVolumeData(unitID) end

---Feature attributes
---
---@section featureattributes

---@param featureID integer
---@return boolean? nil when featureID cannot be parsed
function Spring.GetFeatureLuaDraw(featureID) end

---@param featureID integer
---@return boolean? nil when featureID cannot be parsed
function Spring.GetFeatureNoDraw(featureID) end

---@param featureID integer
---@return boolean? nil when featureID cannot be parsed
function Spring.GetFeatureEngineDrawMask(featureID) end

---@param featureID integer
---@return boolean? nil when featureID cannot be parsed
function Spring.GetFeatureAlwaysUpdateMatrix(featureID) end

---@param featureID integer
---@return number? nil when featureID cannot be parsed
function Spring.GetFeatureDrawFlag(featureID) end

---@param featureID integer
---@return number? scaleX nil when unitID cannot be parsed
---@return number scaleY
---@return number scaleZ
---@return number offsetX
---@return number offsetY
---@return number offsetZ
---@return number volumeType
---@return number useContHitTest
---@return number getPrimaryAxis
---@return boolean ignoreHits
function Spring.GetFeatureSelectionVolumeData(featureID) end

---Misc
---
---@section misc

---@param unitID integer
---@return number? m11 nil when unitID cannot be parsed
---@return number m12
---@return number m13
---@return number m14
---@return number m21
---@return number m22
---@return number m23
---@return number m24
---@return number m31
---@return number m32
---@return number m33
---@return number m34
---@return number m41
---@return number m42
---@return number m43
---@return number m44
function Spring.GetUnitTransformMatrix(unitID) end

---@param featureID integer
---@return number? m11 nil when featureID cannot be parsed
---@return number m12
---@return number m13
---@return number m14
---@return number m21
---@return number m22
---@return number m23
---@return number m24
---@return number m31
---@return number m32
---@return number m33
---@return number m34
---@return number m41
---@return number m42
---@return number m43
---@return number m44
function Spring.GetFeatureTransformMatrix(featureID) end

---Inview
---
---@section inview

---@param unitID integer
---@return boolean? inView nil when unitID cannot be parsed
function Spring.IsUnitInView(unitID) end

---@param unitID integer
---@param radius number? unitRadius when not specified
---@param checkIcon boolean
---@return boolean? isVisible nil when unitID cannot be parsed
function Spring.IsUnitVisible(unitID, radius, checkIcon) end

---@param unitID integer
---@return boolean? isUnitIcon nil when unitID cannot be parsed
function Spring.IsUnitIcon(unitID) end

---@param minX number
---@param minY number
---@param minZ number
---@param maxX number
---@param maxY number
---@param maxZ number
---@return boolean inView
function Spring.IsAABBInView(minX, minY, minZ, maxX, maxY, maxZ) end

---@param posX number
---@param posY number
---@param posZ number
---@param radius number? (Default: 0)
---@return boolean inView
function Spring.IsSphereInView(posX, posY, posZ, radius) end

---@param unitID integer
---@param midPos boolean? (Default: false)
---@return number? x nil when unitID cannot be parsed
---@return number y
---@return number z
function Spring.GetUnitViewPosition(unitID, midPos) end

---@param teamID integer? (Default: -1)
---@param radius number? (Default: 30)
---@param icons boolean? (Default: true)
---@return nil|number[] unitIDs
function Spring.GetVisibleUnits(teamID, radius, icons) end

---@param teamID integer? (Default: -1)
---@param radius number? (Default: 30)
---@param icons boolean? (Default: true)
---@param geos boolean? (Default: true)
---@return nil|number[] featureIDs
function Spring.GetVisibleFeatures(teamID, radius, icons, geos) end

---@param allyTeamID integer? (Default: -1)
---@param addSyncedProjectiles boolean? (Default: true)
---@param addWeaponProjectiles boolean? (Default: true)
---@param addPieceProjectiles boolean? (Default: true)
---@return nil|number[] projectileIDs
function Spring.GetVisibleProjectiles(allyTeamID, addSyncedProjectiles, addWeaponProjectiles, addPieceProjectiles) end

function Spring.GetRenderUnits() end

function Spring.GetRenderUnitsDrawFlagChanged() end

function Spring.GetRenderFeatures() end

function Spring.GetRenderFeaturesDrawFlagChanged() end

---@return nil
function Spring.ClearUnitsPreviousDrawFlag() end

---@return nil
function Spring.ClearFeaturesPreviousDrawFlag() end

---Get units inside a rectangle area on the map
---
---@param left number
---@param top number
---@param right number
---@param bottom number
---@param allegiance number? (Default: -1) teamID when > 0, when < 0 one of AllUnits = -1, MyUnits = -2, AllyUnits = -3, EnemyUnits = -4
---@return nil|number[] unitIDs
function Spring.GetUnitsInScreenRectangle(left, top, right, bottom, allegiance) end

---Get features inside a rectangle area on the map
---
---@param left number
---@param top number
---@param right number
---@param bottom number
---@return nil|number[] featureIDs
function Spring.GetFeaturesInScreenRectangle(left, top, right, bottom) end

---@return number playerID
function Spring.GetLocalPlayerID() end

---@return number teamID
function Spring.GetLocalTeamID() end

---@return number allyTeamID
function Spring.GetLocalAllyTeamID() end

---@return boolean spectating
---@return boolean spectatingFullView
---@return boolean spectatingFullSelect
function Spring.GetSpectatingState() end

---@return number[] unitIDs
function Spring.GetSelectedUnits() end

---Get selected units aggregated by unitDefID
---
---@return table<number,number[]> where keys are unitDefIDs and values are unitIDs
---@return integer the number of unitDefIDs
function Spring.GetSelectedUnitsSorted() end

---Get an aggregate count of selected units per unitDefID
---
---@return table<number,number> unitsCounts where keys are unitDefIDs and values are counts
---@return integer the number of unitDefIDs
function Spring.GetSelectedUnitsCounts() end

---Returns the amount of selected units
---
---@return number selectedUnitsCount
function Spring.GetSelectedUnitsCount() end

---Get if selection box is handled by engine
---
---@return boolean when true engine won't select units inside selection box when released
---@see Spring.GetSelectionBox
---@see Spring.SetBoxSelectionByEngine
function Spring.GetBoxSelectionByEngine() end

---@return boolean
function Spring.IsGUIHidden() end

---@return boolean shadowsLoaded
function Spring.HaveShadows() end

---@return boolean useAdvShading
---@return boolean groundUseAdvShading
function Spring.HaveAdvShading() end

---@return number waterRendererID
---@return string waterRendererName
---@see rts/Rendering/Env/IWater.h
function Spring.GetWaterMode() end

---@return "normal"|"height"|"metal"|"pathTraversability"|"los"
function Spring.GetMapDrawMode() end

---@param texSquareX number
---@param texSquareY number
---@param lodMin number
---@param luaTexName string
---@param lodMax number? (Default: lodMin)
---@return boolean? success
function Spring.GetMapSquareTexture(texSquareX, texSquareY, lodMin, luaTexName, lodMax) end

---@return rgb always
---@return rgb LOS
---@return rgb radar
---@return rgb jam
---@return rgb radar2
function Spring.GetLosViewColors() end

---@return number rotVal in degrees
---@return number rotVel in degrees
---@return number rotAcc in degrees
---@return number rotValRng in degrees
---@return number rotVelRng in degrees
---@return number rotAccRng in degrees
function Spring.GetNanoProjectileParams() end

---Get available cameras.
---
---@return table<string, number> Table where where keys are names and values are indices.
function Spring.GetCameraNames() end

---@param useReturns false
---@return CameraState cameraState
function Spring.GetCameraState(useReturns) end

---@param useReturns true? (Default: `true`) Return multiple values instead of a table.
---@return "ta"|"spring"|"rot"|"ov"|"free"|"fps"|"dummy" name
---@return any Fields depending on current controller mode.
function Spring.GetCameraState(useReturns) end

---@return number posX
---@return number posY
---@return number posZ
function Spring.GetCameraPosition() end

---@return number dirX
---@return number dirY
---@return number dirZ
function Spring.GetCameraDirection() end

---@return number rotX in radians
---@return number rotY in radians
---@return number rotZ in radians
function Spring.GetCameraRotation() end

---@return number vFOV
---@return number hFOV
function Spring.GetCameraFOV() end

---@class CameraVectors
---@field forward xyz
---@field up xyz
---@field right xyz
---@field topFrustumPlane xyz
---@field botFrustumPlane xyz
---@field lftFrustumPlane xyz
---@field rgtFrustumPlane xyz
local CameraVectors = {}

---@return CameraVectors
function Spring.GetCameraVectors() end

---@param x number
---@param y number
---@param z number
---@return number viewPortX
---@return number viewPortY
---@return number viewPortZ
function Spring.WorldToScreenCoords(x, y, z) end

---Get information about a ray traced from screen to world position
---
---Extended to allow a custom plane, parameters are (0, 1, 0, D=0) where D is the offset D can be specified in the third argument (if all the bools are false) or in the seventh (as shown).
---
---Intersection coordinates are returned in t[4],t[5],t[6] when the ray goes offmap and includeSky is true), or when no unit or feature is hit (or onlyCoords is true).
---
---This will only work for units & objects with the default collission sphere. Per Piece collission and custom collission objects are not supported.
---
---The unit must be selectable, to appear to a screen trace ray.
---
---@param screenX number position on x axis in mouse coordinates (origin on left border of view)
---@param screenY number position on y axis in mouse coordinates (origin on top border of view)
---@param onlyCoords boolean? (Default: false) return only description (1st return value) and coordinates (2nd return value)
---@param useMinimap boolean? (Default: false) if position arguments are contained by minimap, use the minimap corresponding world position
---@param includeSky boolean? (Default: false)
---@param ignoreWater boolean? (Default: false)
---@param heightOffset number? (Default: 0)
---@return nil|string description of traced position
---@return nil|number|string|xyz unitID or feature, position triple when onlyCoords=true
---@return nil|number|string featureID or ground
---@return nil|xyz coords
function Spring.TraceScreenRay(screenX, screenY, onlyCoords, useMinimap, includeSky, ignoreWater, heightOffset) end

---@param x number
---@param y number
---@return number dirX
---@return number dirY
---@return number dirZ
function Spring.GetPixelDir(x, y) end

---@param teamID integer
---@return number? r factor from 0 to 1
---@return number? g factor from 0 to 1
---@return number? b factor from 0 to 1
---@return number? a factor from 0 to 1
function Spring.GetTeamColor(teamID) end

---@param teamID integer
---@return number? r factor from 0 to 1
---@return number? g factor from 0 to 1
---@return number? b factor from 0 to 1
---@return number? a factor from 0 to 1
function Spring.GetTeamOrigColor(teamID) end

---@return integer Time in seconds
function Spring.GetDrawSeconds() end

---Sound
---
---@section sound

---@return number playTime
---@return number time
function Spring.GetSoundStreamTime() end

function Spring.GetSoundEffectParams() end

---Game Speed
---
---@section gamespeed

---@return number fps
function Spring.GetFPS() end

---@return number wantedSpeedFactor
---@return number speedFactor
---@return boolean paused
function Spring.GetGameSpeed() end

---@param maxLatency number? (Default: 500) used for `isSimLagging` return parameter
---@return boolean doneLoading
---@return boolean isSavedGame
---@return boolean isClientPaused
---@return boolean isSimLagging
function Spring.GetGameState(maxLatency) end

---Commands
---
---@section commands

---@return number? cmdIndex
---@return number? cmdID
---@return number? cmdType
---@return nil|string cmdName
function Spring.GetActiveCommand() end

---@return number? cmdIndex
---@return number? cmdID
---@return number? cmdType
---@return nil|string cmdName
function Spring.GetDefaultCommand() end

---@return CommandDescription[] cmdDescs
function Spring.GetActiveCmdDescs() end

---@param cmdIndex integer
---@return CommandDescription?
function Spring.GetActiveCmdDesc(cmdIndex) end

---@param cmdID integer
---@return integer? cmdDescIndex
function Spring.GetCmdDescIndex(cmdID) end

---@alias Facing
---| 0 # South
---| 1 # East
---| 2 # North
---| 3 # West

---@return Facing buildFacing
function Spring.GetBuildFacing() end

---@return number buildSpacing
function Spring.GetBuildSpacing() end

---@return number gatherMode
function Spring.GetGatherMode() end

---@return number activePage
---@return number maxPage
function Spring.GetActivePage() end

---Mouse State
---
---@section mousestate

---@return number x
---@return number y
---@return number lmbPressed left mouse button pressed
---@return number mmbPressed middle mouse button pressed
---@return number rmbPressed right mouse button pressed
---@return boolean offscreen
---@return boolean mmbScroll
function Spring.GetMouseState() end

---@return string cursorName
---@return number cursorScale
function Spring.GetMouseCursor() end

---@param button number
---@return number x
---@return number y
---@return number camPosX
---@return number camPosY
---@return number camPosZ
---@return number dirX
---@return number dirY
---@return number dirZ
function Spring.GetMouseStartPosition(button) end

---Text
---
---@section text

---@return string text
function Spring.GetClipboard() end

---@return boolean
function Spring.IsUserWriting() end

---Console
---
---@section console

---@return xyz[] message positions
function Spring.GetLastMessagePositions() end

---@param maxLines number
---@return { text: string, priority: integer }[] buffer
function Spring.GetConsoleBuffer(maxLines) end

---@return string tooltip
function Spring.GetCurrentTooltip() end

---Key Input
---
---@section keyinput

---@param scanSymbol string
---@return string keyName
function Spring.GetKeyFromScanSymbol(scanSymbol) end

---@param keyCode number
---@return boolean pressed
function Spring.GetKeyState(keyCode) end

---@return boolean alt
---@return boolean ctrl
---@return boolean meta
---@return boolean shift
function Spring.GetModKeyState() end

---@return table<number|string,true> where keys are keyCodes or key names
function Spring.GetPressedKeys() end

---@return table<number|string,true> where keys are scanCodes or scan names
function Spring.GetPressedScans() end

---@return number? queueKey
function Spring.GetInvertQueueKey() end

---@param keySym string
---@return number keyCode
function Spring.GetKeyCode(keySym) end

---@param keyCode number
---@return string keyCodeName
---@return string keyCodeDefaultName name when there are not aliases
function Spring.GetKeySymbol(keyCode) end

---@param scanCode number
---@return string scanCodeName
---@return string scanCodeDefaultName name when there are not aliases
function Spring.GetScanSymbol(scanCode) end

---Keybinding
---
---Contains data about a keybinding
---
---@class KeyBinding
---@field command string
---@field extra string
---@field boundWith string
local KeyBinding = {}

---@param keySet1 string? filters keybindings bound to this keyset
---@param keySet2 string? OR bound to this keyset
---@return KeyBinding[]
function Spring.GetKeyBindings(keySet1, keySet2) end

---@param actionName string
---@return string[]? hotkeys
function Spring.GetActionHotKeys(actionName) end

---Unit Groups
---
---@section unitgroups

---@return nil|table<number,number> where keys are groupIDs and values are counts
function Spring.GetGroupList() end

---@return number groupID -1 when no group selected
function Spring.GetSelectedGroup() end

---@param unitID integer
---@return number? groupID
function Spring.GetUnitGroup(unitID) end

---@param groupID integer
---@return nil|number[] unitIDs
function Spring.GetGroupUnits(groupID) end

---@param groupID integer
---@return nil|table<number,number[]> where keys are unitDefIDs and values are unitIDs
function Spring.GetGroupUnitsSorted(groupID) end

---@param groupID integer
---@return nil|table<number,number> where keys are unitDefIDs and values are counts
function Spring.GetGroupUnitsCounts(groupID) end

---@param groupID integer
---@return number? groupSize
function Spring.GetGroupUnitsCount(groupID) end

---Team/Player Info
---
---@section teamplayerinfo

---Roster
---
---Contains data about a player
---
---@class Roster
---@field name string
---@field playerID integer
---@field teamID integer
---@field allyTeamID integer
---@field spectator boolean
---@field cpuUsage number in order to find the progress, use: cpuUsage&0x1 if it's PC or BO, cpuUsage& 0xFE to get path res, (cpuUsage>>8)*1000 for the progress
---@field pingTime number if -1, the player is pathfinding
local Roster = {}

---@param sortType number? return unsorted if unspecified. Disabled = 0, Allies = 1, TeamID = 2, PlayerName = 3, PlayerCPU = 4, PlayerPing = 5
---@param showPathingPlayers boolean? (Default: false)
---@return Roster[]? playerTable
function Spring.GetPlayerRoster(sortType, showPathingPlayers) end

---@param playerID integer
---@param packetID integer?
---@return number traffic
function Spring.GetPlayerTraffic(playerID, packetID) end

---@param playerID integer
---@return number? mousePixels nil when invalid playerID
---@return number mouseClicks
---@return number keyPresses
---@return number numCommands
---@return number unitCommands
function Spring.GetPlayerStatistics(playerID) end

---Configuration
---
---@section configuration

---Configuration
---
---Contains data about a configuration, only name and type are guaranteed
---
---@class Configuration
---@field name string
---@field type string
---@field description string
---@field defaultValue string
---@field minimumValue string
---@field maximumValue string
---@field safemodeValue string
---@field declarationFile string
---@field declarationLine string
---@field readOnly boolean
local Configuration = {}

---@return Configuration[]
function Spring.GetConfigParams() end

---@param name string
---@tparam
---@return number? configInt
function Spring.GetConfigInt(name) end

---@param name string
---@tparam
---@return number? configFloat
function Spring.GetConfigFloat(name) end

---@param name string
---@tparam
---@return number? configString
function Spring.GetConfigString(name) end

---@return table<string,number> sections where keys are names and loglevel are values. E.g. `{ "KeyBindings" = LOG.INFO, "Font" = LOG.INFO, "Sound" = LOG.WARNING, ... }`
function Spring.GetLogSections() end

---Decals
---
---@section decals

---@return number[] decalIDs
function Spring.GetAllGroundDecals() end

---@param decalID integer
---@return number? posX
---@return number posZ
function Spring.GetGroundDecalMiddlePos(decalID) end

---@param decalID integer
---@return number? posTL.x
---@return number posTL.z
---@return number posTR.x
---@return number posTR.z
---@return number posBR.x
---@return number posBR.z
---@return number posBL.x
---@return number posBL.z
function Spring.GetDecalQuadPos(decalID) end

---@param decalID integer
---@return number? sizeX
---@return number sizeY
---@return number projCubeHeight
function Spring.GetGroundDecalSizeAndHeight(decalID) end

---@param decalID integer
---@return number? rotation in radians
function Spring.GetGroundDecalRotation(decalID) end

---@param decalID integer
---@param isMainTex boolean? (Default: true) If false, it gets the normals/glow map
---@return nil|string texture
function Spring.GetGroundDecalTexture(decalID, isMainTex) end

---@param isMainTex boolean? (Default: true) If false, it gets the texture for normals/glow maps
---@return string[] textureNames All textures on the atlas and available for use in SetGroundDecalTexture
function Spring.GetDecalTextures(isMainTex) end

---@param decalID integer
---@return number? texWrapDistance if non-zero sets the mode to repeat the texture along the left-right direction of the decal every texWrapFactor elmos
---@return number texTraveledDistance shifts the texture repetition defined by texWrapFactor so the texture of a next line in the continuous multiline can start where the previous finished. For that it should collect all elmo lengths of the previously set multiline segments.
function Spring.SetGroundDecalTextureParams(decalID) end

---@param decalID integer
---@return number? alpha Between 0 and 1
---@return number alphaFalloff Between 0 and 1, per second
function Spring.GetGroundDecalAlpha(decalID) end

---
---If all three equal 0, the decal follows the normals of ground at midpoint
---
---@param decalID integer
---@return number? normal.x
---@return number normal.y
---@return number normal.z
function Spring.GetGroundDecalNormal(decalID) end

---
---Gets the tint of the ground decal.
---A color of (0.5, 0.5, 0.5, 0.5) is effectively no tint
---
---@param decalID integer
---@return number? tintR
---@return number tintG
---@return number tintB
---@return number tintA
function Spring.GetGroundDecalTint(decalID) end

---
---Returns less important parameters of a ground decal
---
---@param decalID integer
---@return number? dotElimExp
---@return number refHeight
---@return number minHeight
---@return number maxHeight
---@return number forceHeightMode
function Spring.GetGroundDecalMisc(decalID) end

---
---Min can be not equal to max for "gradient" style decals, e.g. unit tracks
---
---@param decalID integer
---@return number? creationFrameMin
---@return number creationFrameMax
function Spring.GetGroundDecalCreationFrame(decalID) end

---@param decalID integer
---@return number? unitID|number featureID(+MAX_UNITS)
function Spring.GetGroundDecalOwner(decalID) end

---@param decalID integer
---@return nil|string type "explosion"|"plate"|"lua"|"track"|"unknown"
function Spring.GetGroundDecalType(decalID) end

---Misc
---
---@section misc

---@param collectGC boolean? (Default: false) collect before returning metric
---@return number? GC values are expressed in Kbytes: #bytes/2^10
function Spring.GetSyncedGCInfo(collectGC) end

---@param groupID integer
---@return number[]? unitIDs
function Spring.SolveNURBSCurve(groupID) end