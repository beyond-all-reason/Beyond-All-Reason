
---!!! DO NOT MANUALLY EDIT THIS FILE !!!
---Generated by lua-doc-extractor 0.0.1
---https://github.com/rhys-vdw/lua-doc-extractor
---
---Date: Wed, 20 Nov 2024 13:06:36 GMT
---Source: rts/Lua/LuaMathExtra.cpp
---
---@meta

---math extensions
---
---@see rts/Lua/LuaMathExtra.cpp

---Returns the length of hypotenuse of right angle triangle with sides x and y,
---equivalent to `sqrt(x*x + y*y)`, but has better numerical stability and
---internally handles intermediate overflows/underflows, but is also slower.
---
---@param x number
---@param y number
---@return number `sqrt(x*x+y*y)`
function math.hypot(x, y) end

---Returns the length of the diagonal of an n-dimensional box (or the length of
---an n-component vector). Rather quick method that does not handle intermediate
---overflows/underflows nor is made for numerical stability.
---
---@param x number
---@param ... number
---@return number diagonal
function math.diag(x, ...) end

---Returns x clamped to min and max boundaries.
---
---@param value number
---@param min number
---@param max number
---@return number clamped
function math.clamp(value, min, max) end

---Returns 0 if x == 0, 1 if x > 0, -1 if x < 0
---
---@param x number
---@return number sign
function math.sgn(x) end

---Returns linear interpolation between x and y with ratio a (x+(y-x)*a).
---
---@param x number
---@param y number
---@param a number
---@return number (x+(y-x)*a)
function math.mix(x, y, a) end

---Returns x rounded to n decimals, if n is omitted or <=0, rounds to nearest
---integer. Note that Spring's Lua interpreter uses 32-bit floats for all
---numbers so max. precision is ~7 decimal digits.
---
---@param x number
---@param decimals number
---@return number rounded
function math.round(x, decimals) end

---Returns erf(x), the Gauss error function, between -1 and 1.
---
---@param x number
---@return number erf
function math.erf(x) end

---Applies the smoothstep function
---
---Clamps and rescales v to a value between [0; 1] based on the edges and then applies the smoothstep function.
---For example math.smoothstep(10, 25, 15) is 0.259, because 15 is 0.333 of the way from 10 to 25, and smoothstep(0.333) is 0.259
---
---@param edge0 number
---@param edge1 number
---@param v number
---@return number smoothstep
function math.smoothstep(edge0, edge1, v) end

---Returns the normalize vector of an given vector.
---
---@param x number
---@param ... number
---@return number ... normalized
function math.normalize(x, ...) end