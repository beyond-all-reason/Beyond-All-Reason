
---!!! DO NOT MANUALLY EDIT THIS FILE !!!
---Generated by lua-doc-extractor 0.0.1
---https://github.com/rhys-vdw/lua-doc-extractor
---
---Date: Wed, 20 Nov 2024 13:06:36 GMT
---Source: rts/Lua/LuaZip.cpp
---
---@meta

---LuaZip
---
---@see rts/Lua/LuaZip.cpp

---@class LuaZipFileWriter
---@brief A Lua userdatum to write zip files
---
---This class defines functions for a Lua userdatum to write to zip files.
---Such a userdatum supports the following methods:
---- close()    : close the zipFile, after this open and write raise an error
---- open(name) : opens a new file within the zipFile (for writing)
---- write(...) : writes data to the open file within the zipFile (similar to io.write)
local LuaZipFileWriter = {}

---@class LuaZipFileReader
---@brief A Lua userdatum to read zip files
---
---This class defines functions for a Lua userdatum to read archive files.
---The type is currently forced to a zip-file, while allowing any file extension.
---Such a userdatum supports the following methods:
---- close()    : close the archive, after this open and read raise an error
---- open(name) : opens a new file within the archive (for reading)
---- read(...)  : reads data from the open file within the archive (similar to io.read)
local LuaZipFileReader = {}

---@brief Pushes a new ZipFileWriter userdatum on the Lua stack.
---
---If zip != nullptr:
---- the userdatum is made to point to the zipFile,
---- the zipFile will never be closed by Lua (close()->no-op, GC->no-op)
---Otherwise:
---- a new zipFile is opened (without overwrite, with directory creation)
---- this zipFile may be closed by Lua (close() or GC)

---@brief Pushes a new ZipFileReader userdatum on the Lua stack.
---
---If archive != nullptr:
---- the userdatum is made to point to the archive,
---- the archive will never be closed by Lua (close()->no-op, GC->no-op)
---Otherwise:
---- a new archive is opened
---- the type is currently forced to a zip-file, while allowing any file extension
---- this archive may be closed by Lua (close() or GC)

---Similar to Lua's built-in (I/O library) read function.
---
---Except that "*number" and *line" aren't supported; only "*all" and \<num\> are
---supported. The special case read(0) (test for end of file) is handled.
---
---Note that reading is only possible after a chunk has been opened using
---openchunk().