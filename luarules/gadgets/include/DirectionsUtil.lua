-- DIRECTIONSUTIL -------------------------------------------------------------------------------------------
-- This is a minor utility for distributing directions rotationally in 3D.

local DirectionsUtil = {}
local DIRECTION_SET_SIZE_MAX = 64

DirectionsUtil.Directions = {}

--------------------------------------------------------------------------------------------------------------
-- Evenly distributed arrays ---------------------------------------------------------------------------------

-- Randomness produces clumping at small sample sizes, so you may want to use evenly-spaced vectors instead.
-- "Even spacing" has all kinds of meanings -- you can generally sort these into different spatial packings.

-- This is a set of solutions for packing spheres along the surface of a larger, unit sphere.
-- Each inner array contains its solution set of float3 directions unrolled into one contiguous array.
-- Solutions are provided for n = [2, 16], with n = 1 set to an empty array (it's a nonsense result).
-- Credit to Hardin, Sloane, & Smith (and contribs) for the tables at neilsloane.com/packings/dim3/
-- To add more, fetch neilsloane.com/packings/dim3/pack.3.<n>.txt for next n & replace newlines with commas.

local spherePackings = {
    {},
    { 1,                         0,                         0,                         -1,                        0,                         0 },
    { 1,                         0,                         0,                         -0.5,                      0,                         0.866025403784439,         -0.5,                      0,                         -0.866025403784438 },
    { -0.577350269072,           0.577350269072,            -0.577350269072,           0.577350269072,            0.577350269072,            0.577350269072,            -0.577350269072,           -0.577350269072,           0.577350269072,            0.577350269072,            -0.577350269072,           -0.577350269072 },
    { -1.478255937088018300e-01, 8.557801392177640800e-01,  4.957700547280610200e-01,  9.298520676823500700e-01,  -3.330452755499895800e-01, -1.563840677968503200e-01, -7.820264758448114400e-01, -5.227348665222011400e-01, -3.393859902820995400e-01, -3.612306945786420600e-02, -5.056147808319168000e-01, 8.620027942282061400e-01,  3.612306958303366400e-02,  5.056147801034870400e-01,  -8.620027946502272200e-01 },
    { 0.212548255920,            -0.977150570601,           0.000000000000,            -0.977150570601,           -0.212548255920,           0.000000000000,            -0.212548255920,           0.977150570601,            0.000000000000,            0.977150570601,            0.212548255920,            0.000000000000,            0.000000000000,            0.000000000000,            1.000000000000,            0.000000000000,            0.000000000000,            -1.000000000000 },
    { -9.476914051796328000e-01, -2.052179514558175300e-01, 2.444720698749264500e-01,  8.503710682661692600e-01,  4.830848344829018500e-01,  2.085619547004717300e-01,  -4.995609516538522300e-01, 3.276811928816584800e-01,  -8.019126457503652500e-01, -3.344875986220292000e-01, 8.899589445240678700e-01,  3.099856826204648300e-01,  2.420381484495352800e-02,  -9.924430055046316000e-01, 1.202957030483007100e-01,  5.426485704335360500e-02,  -8.987314180840469400e-02, 9.944738024058507000e-01,  5.948684088498340500e-01,  -2.881863468134767100e-01, -7.503867040818149600e-01 },
    { -7.941044876934105800e-01, 3.289288487526511000e-01,  5.110810846464987100e-01,  3.289288487526511000e-01,  -7.941044876934105800e-01, -5.110810846464987100e-01, 7.941044876934105800e-01,  3.289288487526511000e-01,  -5.110810846464987100e-01, -3.289288487526511000e-01, -7.941044876934105800e-01, 5.110810846464987100e-01,  -7.941044876934105800e-01, -3.289288487526511000e-01, -5.110810846464987100e-01, 3.289288487526511000e-01,  7.941044876934105800e-01,  5.110810846464987100e-01,  7.941044876934105800e-01,  -3.289288487526511000e-01, 5.110810846464987100e-01,  -3.289288487526511000e-01, 7.941044876934105800e-01,  -5.110810846464987100e-01 },
    { -8.643506667047617900e-01, 5.383237842631424800e-02,  -5.000000000000000000e-01, -5.299022434190759900e-01, 7.798028605204248000e-01,  3.333333333820566700e-01,  -6.225653123557293200e-01, -7.080263559415142000e-01, 3.333333333820566700e-01,  -4.633153446832672500e-02, -7.439146082309695500e-01, -6.666666667641134600e-01, -1.814158190933165000e-20, -3.736015732192668700e-20, 1.000000000000000000e+00,  8.643506667047617900e-01,  -5.383237842631424800e-02, -5.000000000000000000e-01, 5.299022434190759900e-01,  -7.798028605204248000e-01, 3.333333333820566700e-01,  6.225653123557293200e-01,  7.080263559415142000e-01,  3.333333333820566700e-01,  4.633153446832672500e-02,  7.439146082309695500e-01,  -6.666666667641134600e-01 },
    { 1.272017215942770300e-01,  -8.282613625701686900e-01, -5.457131456148549600e-01, 1.272017215942770300e-01,  8.282613625701686900e-01,  5.457131456148549600e-01,  -7.924432042767676200e-01, -6.099457090557890400e-01, -2.741585411849682600e-20, 8.379720535542102300e-01,  -1.947788276596200700e-27, -5.457131457662900400e-01, 1.272017215942770300e-01,  -8.282613625701686900e-01, 5.457131456148549600e-01,  8.379720535542102300e-01,  1.058131978332546100e-19,  5.457131457662900400e-01,  -5.103133233369202500e-01, -3.373110909106216600e-19, -8.599885534266302800e-01, -7.924432042767676200e-01, 6.099457090557890400e-01,  -6.234852139790438900e-20, 1.272017215942770300e-01,  8.282613625701686900e-01,  -5.457131456148549600e-01, -5.103133233369202500e-01, 1.058052789347472700e-19,  8.599885534266302800e-01 },
    { -8.506508083196721000e-01, -5.257311121715058100e-01, 0.000000000000000000e+00,  0.000000000000000000e+00,  -8.506508083196721000e-01, -5.257311121715058100e-01, 0.000000000000000000e+00,  8.506508083196721000e-01,  5.257311121715058100e-01,  -5.257311121715058100e-01, 0.000000000000000000e+00,  -8.506508083196721000e-01, 0.000000000000000000e+00,  8.506508083196721000e-01,  -5.257311121715058100e-01, 0.000000000000000000e+00,  -8.506508083196721000e-01, 5.257311121715058100e-01,  5.257311121715058100e-01,  0.000000000000000000e+00,  8.506508083196721000e-01,  8.506508083196721000e-01,  -5.257311121715058100e-01, 0.000000000000000000e+00,  -5.257311121715058100e-01, 0.000000000000000000e+00,  8.506508083196721000e-01,  8.506508083196721000e-01,  5.257311121715058100e-01,  0.000000000000000000e+00,  -8.506508083196721000e-01, 5.257311121715058100e-01,  0.000000000000000000e+00 },
    { 8.506508083520922800e-01,  8.461919126260937200e-21,  -5.257311121190491000e-01, 5.257311121190491000e-01,  -8.506508083520922800e-01, 0.000000000000000000e+00,  1.266847532837018700e-20,  -5.257311121190491000e-01, 8.506508083520922800e-01,  8.506508083520922800e-01,  2.117154529536468700e-20,  5.257311121190491000e-01,  -5.257311121190491000e-01, -8.506508083520922800e-01, 3.303943689239743800e-23,  -4.393463640892673700e-21, 5.257311121190491000e-01,  -8.506508083520922800e-01, -8.506508083520922800e-01, -8.452634485559703400e-21, -5.257311121190491000e-01, -5.257311121190491000e-01, 8.506508083520922800e-01,  6.548656517555661000e-21,  1.691455361231732600e-20,  5.257311121190491000e-01,  8.506508083520922800e-01,  -8.506508083520922800e-01, 1.437620000877874100e-20,  5.257311121190491000e-01,  5.257311121190491000e-01,  8.506508083520922800e-01,  -1.769525700386171300e-21, -1.447394738531641700e-20, -5.257311121190491000e-01, -8.506508083520922800e-01 },
    { -3.662782754263035300e-01, 7.559006998770361200e-01,  5.426364868640331000e-01,  -9.408369689587646700e-01, 3.266601753606225300e-01,  -9.010509238579085500e-02, 2.949031158172585300e-01,  -6.086014011689210300e-01, -7.366386405670685100e-01, -7.408675404485654300e-20, 1.131011890285944400e-19,  1.000000000000000000e+00,  -7.559006998770361200e-01, -3.662782754263035300e-01, 5.426364868640331000e-01,  -3.266601753606225300e-01, -9.408369689587646700e-01, -9.010509238579085500e-02, 6.086014011689210300e-01,  2.949031158172585300e-01,  -7.366386405670685100e-01, 3.662782754263035300e-01,  -7.559006998770361200e-01, 5.426364868640331000e-01,  9.408369689587646700e-01,  -3.266601753606225300e-01, -9.010509238579085500e-02, -2.949031158172585300e-01, 6.086014011689210300e-01,  -7.366386405670685100e-01, 7.559006998770361200e-01,  3.662782754263035300e-01,  5.426364868640331000e-01,  3.266601753606225300e-01,  9.408369689587646700e-01,  -9.010509238579085500e-02, -6.086014011689210300e-01, -2.949031158172585300e-01, -7.366386405670685100e-01 },
    { 6.946907954011297700e-01,  6.946907954011297700e-01,  -1.865727674927167300e-01, -1.514598564738553500e-01, -8.118004501805740100e-01, 5.639503000828500800e-01,  8.118004501805740100e-01,  1.514598564738553500e-01,  5.639503000828500800e-01,  -9.244833579897193300e-20, 1.696363851953479400e-20,  1.000000000000000000e+00,  3.564164657663047900e-20,  5.579881977585050800e-22,  -1.000000000000000000e+00, -6.946907954011297700e-01, 6.946907954011297700e-01,  1.865727674927167300e-01,  1.514598564738553500e-01,  -8.118004501805740100e-01, -5.639503000828500800e-01, -8.118004501805740100e-01, 1.514598564738553500e-01,  -5.639503000828500800e-01, 6.946907954011297700e-01,  -6.946907954011297700e-01, 1.865727674927167300e-01,  -1.514598564738553500e-01, 8.118004501805740100e-01,  -5.639503000828500800e-01, 8.118004501805740100e-01,  -1.514598564738553500e-01, -5.639503000828500800e-01, -6.946907954011297700e-01, -6.946907954011297700e-01, -1.865727674927167300e-01, 1.514598564738553500e-01,  8.118004501805740100e-01,  5.639503000828500800e-01,  -8.118004501805740100e-01, -1.514598564738553500e-01, 5.639503000828500800e-01 },
    { 3.051769020044634000e-01,  -1.827216208011631400e-01, 9.346014486265010700e-01,  -4.907082900156075600e-01, -4.074541928305096000e-01, -7.701859871841322300e-01, -8.509184718243962800e-01, -5.229714314530596900e-01, 4.938254946812591100e-02,  7.012202810984599100e-01,  -6.570858127633901800e-01, 2.766375824816142400e-01,  9.555627298013018600e-01,  -6.205070554219331900e-03, -2.947225246127304600e-01, 4.640178136061391400e-01,  7.161624359518460300e-01,  -5.213432976338108200e-01, 3.293077595811665400e-01,  -7.129347262317069200e-02, -9.415272912884480300e-01, -9.197709483984433100e-01, 3.744800967201638600e-01,  1.174140521517120100e-01,  -1.486192639405116700e-01, -8.424318278596852900e-01, 5.179005018290389100e-01,  -5.847106287835063300e-01, -1.058298387139187500e-01, 8.043093470956201900e-01,  2.450588634219090800e-01,  -8.423966818187401700e-01, -4.799103915515254800e-01, -3.651725826023697900e-01, 4.861143234505876400e-01,  -7.939407090278801600e-01, -5.940876942043927400e-02, 6.276928285275815700e-01,  7.761908986396279800e-01,  -2.557474796815069600e-01, 9.660236791779427400e-01,  -3.730251873625246900e-02, 7.271391725044883400e-01, 5.996412865218138100e-01,  3.342139304516675300e-01 },
    { 1.266109423779690200e-01,  9.635507195418956400e-01,  -2.356685811483104400e-01, -5.918057918773704800e-01, 7.708607037331326500e-01,  2.356685811483104100e-01,  8.112044025054730700e-02,  6.173531063344418500e-01,  7.824925662731709900e-01,  -3.791737544816633500e-01, 4.938953812696635900e-01,  -7.824925662731708800e-01, -9.635507195418956400e-01, 1.266109423779690200e-01,  -2.356685811483104400e-01, -7.708607037331326500e-01, -5.918057918773704800e-01, 2.356685811483104100e-01,  -6.173531063344418500e-01, 8.112044025054730700e-02,  7.824925662731709900e-01,  -4.938953812696635900e-01, -3.791737544816633500e-01, -7.824925662731708800e-01, -1.266109423779690200e-01, -9.635507195418956400e-01, -2.356685811483104400e-01, 5.918057918773704800e-01,  -7.708607037331326500e-01, 2.356685811483104100e-01,  -8.112044025054730700e-02, -6.173531063344418500e-01, 7.824925662731709900e-01,  3.791737544816633500e-01,  -4.938953812696635900e-01, -7.824925662731708800e-01, 9.635507195418956400e-01,  -1.266109423779690200e-01, -2.356685811483104400e-01, 7.708607037331326500e-01,  5.918057918773704800e-01,  2.356685811483104100e-01,  6.173531063344418500e-01, -8.112044025054730700e-02, 7.824925662731709900e-01, 4.938953812696635900e-01, 3.791737544816633500e-01, -7.824925662731708800e-01 }
}

--------------------------------------------------------------------------------------------------------------
-- Randomly distributed arrays -------------------------------------------------------------------------------

--- Produces a array of unrolled float3 vectors representing directions.
-- This function uses rejection sampling which is efficient but inappropriate for constant-time operations.
-- @tparam[opt] number n count of directions to produce
-- @treturn {float,...} array with length equal to 3n
DirectionsUtil.GetRandomDirections = function(n)
    n = n > 1 and n or 1
    local vecs = {}
    for ii = 1, 3 * (n - 1) + 1, 3 do
        local m1, m2, m3, m4    -- Marsaglia procedure:
        repeat                  -- The method begins by sampling & rejecting points.
            m1 = 2 * rand() - 1 -- The result can be transformed into radial coords.
            m2 = 2 * rand() - 1
            m3 = m1 * m1 + m2 * m2
        until (m3 < 1)
        m4 = (1 - m3) ^ 0.5
        vecs[ii    ] = 2 * m1 * m4 -- x
        vecs[ii + 1] = 2 * m2 * m4 -- y
        vecs[ii + 2] = 1 -  2 * m3  -- z
    end
    return vecs
end

--------------------------------------------------------------------------------------------------------------
-- Combined distribution arrays ------------------------------------------------------------------------------

--- Fetches a premade direction set from DistributedDirections; otherwise, generates random directions.
-- @tparam[opt] number n count of (unrolled) float3 directions to retrieve
-- @treturn[1] {float,...} array with length equal to 3n
-- @treturn[1] boolean true if the result is random
-- @treturn[2] nil
-- @see DirectionsUtil.GetRandomDirections
DirectionsUtil.GetDirections = function(n)
    if not n or n < 1 then return end
    local distributed = DirectionsUtil.Directions[n]
    if distributed then
        return distributed, false
    end
    if n <= DIRECTION_SET_SIZE_MAX then
        for ii = 1, 3 * (n - 1) + 1, 3 do
            return getRandomDirections(n), true
        end
    end
end

--- Pad the size of an insufficient direction set by adding randomly generated directions.
-- @tparam number n maximum solution size to add to Directions
-- @treturn boolean whether provisioning succeeded
DirectionsUtil.ProvisionDirections = function(n)
    if n < 2 or n > DIRECTION_SET_SIZE_MAX then return false end
    local directions = DirectionsUtil.Directions
    if not directions then return false end
    for ii = #directions + 1, n do
        directions[ii] = DirectionsUtil.GetRandomDirections(ii)
    end
    return true
end

--------------------------------------------------------------------------------------------------------------

-- Choose a spacing method:
DirectionsUtil.Directions = spherePackings

return DirectionsUtil
